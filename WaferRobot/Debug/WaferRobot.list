
WaferRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012800  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c00  080129b0  080129b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155b0  080155b0  00017088  2**0
                  CONTENTS
  4 .ARM          00000008  080155b0  080155b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155b8  080155b8  00017088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155b8  080155b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080155bc  080155bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080155c0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017088  2**0
                  CONTENTS
 10 .bss          00008b00  20000088  20000088  00017088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008b88  20008b88  00017088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002530e  00000000  00000000  000170b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006867  00000000  00000000  0003c3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c90  00000000  00000000  00042c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016aa  00000000  00000000  000448c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000341a6  00000000  00000000  00045f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003346a  00000000  00000000  0007a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100114  00000000  00000000  000ad57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ad68e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007cf0  00000000  00000000  001ad6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001b53c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012998 	.word	0x08012998

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	08012998 	.word	0x08012998

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000592:	4b21      	ldr	r3, [pc, #132]	@ (8000618 <MX_ADC1_Init+0x98>)
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <MX_ADC1_Init+0x9c>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_ADC1_Init+0x98>)
 800059a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005c2:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <MX_ADC1_Init+0xa0>)
 80005c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005dc:	2201      	movs	r2, #1
 80005de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e0:	480d      	ldr	r0, [pc, #52]	@ (8000618 <MX_ADC1_Init+0x98>)
 80005e2:	f001 fb95 	bl	8001d10 <HAL_ADC_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005ec:	f001 f872 	bl	80016d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005f0:	2303      	movs	r3, #3
 80005f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005f8:	2301      	movs	r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_ADC1_Init+0x98>)
 8000602:	f001 fcf7 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800060c:	f001 f862 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000a4 	.word	0x200000a4
 800061c:	40012000 	.word	0x40012000
 8000620:	0f000001 	.word	0x0f000001

08000624 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a2f      	ldr	r2, [pc, #188]	@ (8000700 <HAL_ADC_MspInit+0xdc>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d157      	bne.n	80006f6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <HAL_ADC_MspInit+0xe0>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064e:	4a2d      	ldr	r2, [pc, #180]	@ (8000704 <HAL_ADC_MspInit+0xe0>)
 8000650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000654:	6453      	str	r3, [r2, #68]	@ 0x44
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <HAL_ADC_MspInit+0xe0>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <HAL_ADC_MspInit+0xe0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <HAL_ADC_MspInit+0xe0>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <HAL_ADC_MspInit+0xe0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800067e:	2308      	movs	r3, #8
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000682:	2303      	movs	r3, #3
 8000684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	481d      	ldr	r0, [pc, #116]	@ (8000708 <HAL_ADC_MspInit+0xe4>)
 8000692:	f003 fce9 	bl	8004068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000696:	4b1d      	ldr	r3, [pc, #116]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 8000698:	4a1d      	ldr	r2, [pc, #116]	@ (8000710 <HAL_ADC_MspInit+0xec>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006da:	480c      	ldr	r0, [pc, #48]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006dc:	f002 f84c 	bl	8002778 <HAL_DMA_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006e6:	f000 fff5 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80006f0:	4a06      	ldr	r2, [pc, #24]	@ (800070c <HAL_ADC_MspInit+0xe8>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	@ 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40012000 	.word	0x40012000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000
 800070c:	200000ec 	.word	0x200000ec
 8000710:	40026410 	.word	0x40026410

08000714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a0b      	ldr	r2, [pc, #44]	@ (8000750 <MX_DMA_Init+0x3c>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_DMA_Init+0x3c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2038      	movs	r0, #56	@ 0x38
 800073c:	f001 ffe5 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000740:	2038      	movs	r0, #56	@ 0x38
 8000742:	f001 fffe 	bl	8002742 <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	@ 0x30
 8000758:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b62      	ldr	r3, [pc, #392]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a61      	ldr	r2, [pc, #388]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b5f      	ldr	r3, [pc, #380]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b5b      	ldr	r3, [pc, #364]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a5a      	ldr	r2, [pc, #360]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b58      	ldr	r3, [pc, #352]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b54      	ldr	r3, [pc, #336]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a53      	ldr	r2, [pc, #332]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b51      	ldr	r3, [pc, #324]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b4d      	ldr	r3, [pc, #308]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a4c      	ldr	r2, [pc, #304]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b4a      	ldr	r3, [pc, #296]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b46      	ldr	r3, [pc, #280]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a45      	ldr	r2, [pc, #276]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b43      	ldr	r3, [pc, #268]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b3f      	ldr	r3, [pc, #252]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a3e      	ldr	r2, [pc, #248]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b38      	ldr	r3, [pc, #224]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a37      	ldr	r2, [pc, #220]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b35      	ldr	r3, [pc, #212]	@ (80008f8 <MX_GPIO_Init+0x1a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000834:	4831      	ldr	r0, [pc, #196]	@ (80008fc <MX_GPIO_Init+0x1a8>)
 8000836:	f003 fdc3 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	@ 0x40
 800083e:	4830      	ldr	r0, [pc, #192]	@ (8000900 <MX_GPIO_Init+0x1ac>)
 8000840:	f003 fdbe 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	482a      	ldr	r0, [pc, #168]	@ (8000904 <MX_GPIO_Init+0x1b0>)
 800085c:	f003 fc04 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000860:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4820      	ldr	r0, [pc, #128]	@ (80008fc <MX_GPIO_Init+0x1a8>)
 800087a:	f003 fbf5 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800087e:	2340      	movs	r3, #64	@ 0x40
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	481a      	ldr	r0, [pc, #104]	@ (8000900 <MX_GPIO_Init+0x1ac>)
 8000896:	f003 fbe7 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800089a:	2380      	movs	r3, #128	@ 0x80
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4814      	ldr	r0, [pc, #80]	@ (8000900 <MX_GPIO_Init+0x1ac>)
 80008ae:	f003 fbdb 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008b2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c4:	230a      	movs	r3, #10
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <MX_GPIO_Init+0x1b4>)
 80008d0:	f003 fbca 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4807      	ldr	r0, [pc, #28]	@ (8000908 <MX_GPIO_Init+0x1b4>)
 80008ea:	f003 fbbd 	bl	8004068 <HAL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	@ 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400
 8000900:	40021800 	.word	0x40021800
 8000904:	40020800 	.word	0x40020800
 8000908:	40020000 	.word	0x40020000

0800090c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	@ 0x58
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2220      	movs	r2, #32
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f011 fa17 	bl	8011d78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 800094c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a4c <MX_TIM1_Init+0x140>)
 800094e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800;
 8000950:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000952:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800095e:	4b3a      	ldr	r3, [pc, #232]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000960:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000964:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096c:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000978:	4833      	ldr	r0, [pc, #204]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 800097a:	f004 fa23 	bl	8004dc4 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000984:	f000 fea6 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000992:	4619      	mov	r1, r3
 8000994:	482c      	ldr	r0, [pc, #176]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000996:	f004 fd37 	bl	8005408 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009a0:	f000 fe98 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4828      	ldr	r0, [pc, #160]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 80009a6:	f004 fa5c 	bl	8004e62 <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009b0:	f000 fe90 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009c0:	4619      	mov	r1, r3
 80009c2:	4821      	ldr	r0, [pc, #132]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 80009c4:	f005 f92c 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80009ce:	f000 fe81 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d2:	2360      	movs	r3, #96	@ 0x60
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	4814      	ldr	r0, [pc, #80]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 80009f8:	f004 fc44 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a02:	f000 fe67 	bl	80016d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000a2a:	f005 f975 	bl	8005d18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000a34:	f000 fe4e 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM1_Init+0x13c>)
 8000a3a:	f000 f91f 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3758      	adds	r7, #88	@ 0x58
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000014c 	.word	0x2000014c
 8000a4c:	40010000 	.word	0x40010000

08000a50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	@ 0x38
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	615a      	str	r2, [r3, #20]
 8000a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800;
 8000a88:	4b2b      	ldr	r3, [pc, #172]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000a8a:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000a8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b29      	ldr	r3, [pc, #164]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a96:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000a98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aaa:	4823      	ldr	r0, [pc, #140]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000aac:	f004 f98a 	bl	8004dc4 <HAL_TIM_Base_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ab6:	f000 fe0d 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481c      	ldr	r0, [pc, #112]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000ac8:	f004 fc9e 	bl	8005408 <HAL_TIM_ConfigClockSource>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ad2:	f000 fdff 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad6:	4818      	ldr	r0, [pc, #96]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000ad8:	f004 f9c3 	bl	8004e62 <HAL_TIM_PWM_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ae2:	f000 fdf7 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	4619      	mov	r1, r3
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000af6:	f005 f893 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b00:	f000 fde8 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b04:	2360      	movs	r3, #96	@ 0x60
 8000b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000b1c:	f004 fbb2 	bl	8005284 <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b26:	f000 fdd5 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b2a:	4803      	ldr	r0, [pc, #12]	@ (8000b38 <MX_TIM2_Init+0xe8>)
 8000b2c:	f000 f8a6 	bl	8000c7c <HAL_TIM_MspPostInit>

}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	@ 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000194 	.word	0x20000194

08000b3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd4 <MX_TIM3_Init+0x98>)
 8000b5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900-1;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b60:	f240 3283 	movw	r2, #899	@ 0x383
 8000b64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b6e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b80:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b82:	f004 f91f 	bl	8004dc4 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b8c:	f000 fda2 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000b9e:	f004 fc33 	bl	8005408 <HAL_TIM_ConfigClockSource>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f000 fd94 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <MX_TIM3_Init+0x94>)
 8000bba:	f005 f831 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f000 fd86 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200001dc 	.word	0x200001dc
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <HAL_TIM_Base_MspInit+0x98>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d10e      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a20      	ldr	r2, [pc, #128]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c06:	e02e      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c10:	d10e      	bne.n	8000c30 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	4a16      	ldr	r2, [pc, #88]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
}
 8000c2e:	e01a      	b.n	8000c66 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <HAL_TIM_Base_MspInit+0xa0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d115      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_TIM_Base_MspInit+0x9c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	201d      	movs	r0, #29
 8000c5c:	f001 fd55 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c60:	201d      	movs	r0, #29
 8000c62:	f001 fd6e 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40000400 	.word	0x40000400

08000c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a24      	ldr	r2, [pc, #144]	@ (8000d2c <HAL_TIM_MspPostInit+0xb0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d11f      	bne.n	8000cde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a22      	ldr	r2, [pc, #136]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <HAL_TIM_MspPostInit+0xb8>)
 8000cd8:	f003 f9c6 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cdc:	e022      	b.n	8000d24 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce6:	d11d      	bne.n	8000d24 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_TIM_MspPostInit+0xb4>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d04:	2301      	movs	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d14:	2301      	movs	r3, #1
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <HAL_TIM_MspPostInit+0xbc>)
 8000d20:	f003 f9a2 	bl	8004068 <HAL_GPIO_Init>
}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40020000 	.word	0x40020000

08000d3c <CurrentSensor_Init>:
static uint32_t adc_buffer[ADC_BUFFER_SIZE];
static float filter_buffer[FILTER_WINDOW_SIZE];
static uint8_t filter_index = 0;
static float filter_sum = 0;

void CurrentSensor_Init(ADC_HandleTypeDef *hadc) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    hadc_sensor = hadc;
 8000d44:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <CurrentSensor_Init+0x3c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < FILTER_WINDOW_SIZE; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
 8000d4e:	e009      	b.n	8000d64 <CurrentSensor_Init+0x28>
        filter_buffer[i] = 0;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <CurrentSensor_Init+0x40>)
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < FILTER_WINDOW_SIZE; i++) {
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3301      	adds	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d9f2      	bls.n	8000d50 <CurrentSensor_Init+0x14>
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	20000428 	.word	0x20000428

08000d80 <CurrentSensor_Start>:

void CurrentSensor_Start(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(hadc_sensor, adc_buffer, ADC_BUFFER_SIZE);
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <CurrentSensor_Start+0x18>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	4904      	ldr	r1, [pc, #16]	@ (8000d9c <CurrentSensor_Start+0x1c>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f803 	bl	8001d98 <HAL_ADC_Start_DMA>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000224 	.word	0x20000224
 8000d9c:	20000228 	.word	0x20000228

08000da0 <CurrentSensor_GetValue>:

float CurrentSensor_GetValue(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
    static uint32_t adc_sum = 0;
    for (uint8_t i = 0; i < ADC_BUFFER_SIZE; i++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	e00b      	b.n	8000dc4 <CurrentSensor_GetValue+0x24>
        adc_sum += adc_buffer[i];
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a2d      	ldr	r2, [pc, #180]	@ (8000e64 <CurrentSensor_GetValue+0xc4>)
 8000db0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e68 <CurrentSensor_GetValue+0xc8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <CurrentSensor_GetValue+0xc8>)
 8000dbc:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < ADC_BUFFER_SIZE; i++) {
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	daef      	bge.n	8000dac <CurrentSensor_GetValue+0xc>
    }
    float adc_average = (float)adc_sum / ADC_BUFFER_SIZE;
 8000dcc:	4b26      	ldr	r3, [pc, #152]	@ (8000e68 <CurrentSensor_GetValue+0xc8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dd8:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000e6c <CurrentSensor_GetValue+0xcc>
 8000ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de0:	edc7 7a00 	vstr	s15, [r7]
    adc_sum = 0;
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <CurrentSensor_GetValue+0xc8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]

    filter_sum -= filter_buffer[filter_index];
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <CurrentSensor_GetValue+0xd0>)
 8000dec:	ed93 7a00 	vldr	s14, [r3]
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <CurrentSensor_GetValue+0xd4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <CurrentSensor_GetValue+0xd8>)
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <CurrentSensor_GetValue+0xd0>)
 8000e04:	edc3 7a00 	vstr	s15, [r3]
    filter_buffer[filter_index] = adc_average;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <CurrentSensor_GetValue+0xd4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e78 <CurrentSensor_GetValue+0xd8>)
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	601a      	str	r2, [r3, #0]
    filter_sum += adc_average;
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <CurrentSensor_GetValue+0xd0>)
 8000e18:	ed93 7a00 	vldr	s14, [r3]
 8000e1c:	edd7 7a00 	vldr	s15, [r7]
 8000e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <CurrentSensor_GetValue+0xd0>)
 8000e26:	edc3 7a00 	vstr	s15, [r3]
    filter_index = (filter_index + 1) % FILTER_WINDOW_SIZE;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <CurrentSensor_GetValue+0xd4>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	425a      	negs	r2, r3
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	f002 020f 	and.w	r2, r2, #15
 8000e3a:	bf58      	it	pl
 8000e3c:	4253      	negpl	r3, r2
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <CurrentSensor_GetValue+0xd4>)
 8000e42:	701a      	strb	r2, [r3, #0]

    return filter_sum / FILTER_WINDOW_SIZE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <CurrentSensor_GetValue+0xd0>)
 8000e46:	edd3 7a00 	vldr	s15, [r3]
 8000e4a:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000e4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000e52:	eef0 7a66 	vmov.f32	s15, s13
}
 8000e56:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000228 	.word	0x20000228
 8000e68:	20000470 	.word	0x20000470
 8000e6c:	43000000 	.word	0x43000000
 8000e70:	2000046c 	.word	0x2000046c
 8000e74:	20000468 	.word	0x20000468
 8000e78:	20000428 	.word	0x20000428

08000e7c <qbufferCreate>:


#include "qbuffer.h"

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	60da      	str	r2, [r3, #12]

  return ret;
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b089      	sub	sp, #36	@ 0x24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	77fb      	strb	r3, [r7, #31]
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	e027      	b.n	8000f18 <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	6892      	ldr	r2, [r2, #8]
 8000ed2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ed6:	fb01 f202 	mul.w	r2, r1, r2
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	617b      	str	r3, [r7, #20]

    if (next_in != p_node->out)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d011      	beq.n	8000f0c <qbufferWrite+0x5a>
    {
      if (p_node->p_buf != NULL)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d009      	beq.n	8000f04 <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	441a      	add	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	440b      	add	r3, r1
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	701a      	strb	r2, [r3, #0]
      }
      p_node->in = next_in;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e002      	b.n	8000f12 <qbufferWrite+0x60>
    }
    else
    {
      ret = false;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	77fb      	strb	r3, [r7, #31]
      break;
 8000f10:	e006      	b.n	8000f20 <qbufferWrite+0x6e>
  for (int i=0; i<length; i++)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8d3      	bhi.n	8000ec8 <qbufferWrite+0x16>
    }
  }

  return ret;
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	@ 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b087      	sub	sp, #28
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e026      	b.n	8000f92 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	441a      	add	r2, r3
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	440b      	add	r3, r1
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d00c      	beq.n	8000f86 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	6892      	ldr	r2, [r2, #8]
 8000f76:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f7a:	fb01 f202 	mul.w	r2, r1, r2
 8000f7e:	1a9a      	subs	r2, r3, r2
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	e002      	b.n	8000f8c <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]
      break;
 8000f8a:	e006      	b.n	8000f9a <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d8d4      	bhi.n	8000f44 <qbufferRead+0x16>
    }
  }

  return ret;
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t ret;
  ret = (p_node->in - p_node->out) % p_node->len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6892      	ldr	r2, [r2, #8]
 8000fbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc2:	fb01 f202 	mul.w	r2, r1, r2
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]

  return ret;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <servo_Init>:
#include "servo.h"

static TIM_HandleTypeDef *htim_motor_x;
static TIM_HandleTypeDef *htim_motor_y;

void servo_Init(TIM_HandleTypeDef *htim_x, TIM_HandleTypeDef *htim_y) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    htim_motor_x = htim_x;
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8001014 <servo_Init+0x3c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6013      	str	r3, [r2, #0]
    htim_motor_y = htim_y;
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <servo_Init+0x40>)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6013      	str	r3, [r2, #0]

    HAL_TIM_PWM_Start(htim_motor_x, TIM_CHANNEL_1);
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <servo_Init+0x3c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 ff8d 	bl	8004f14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim_motor_y, TIM_CHANNEL_1);
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <servo_Init+0x40>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f003 ff87 	bl	8004f14 <HAL_TIM_PWM_Start>

    servo_PerformAction(RETRACT);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 f808 	bl	800101c <servo_PerformAction>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000474 	.word	0x20000474
 8001018:	20000478 	.word	0x20000478

0800101c <servo_PerformAction>:

void servo_PerformAction(MotorAction action) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    switch (action) {
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d83e      	bhi.n	80010aa <servo_PerformAction+0x8e>
 800102c:	a201      	add	r2, pc, #4	@ (adr r2, 8001034 <servo_PerformAction+0x18>)
 800102e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001032:	bf00      	nop
 8001034:	08001045 	.word	0x08001045
 8001038:	0800105f 	.word	0x0800105f
 800103c:	08001077 	.word	0x08001077
 8001040:	08001091 	.word	0x08001091
        case EXTEND:
            __HAL_TIM_SET_COMPARE(htim_motor_x, TIM_CHANNEL_1, 1500);
 8001044:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <servo_PerformAction+0xb0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim_motor_y, TIM_CHANNEL_1, 1500);
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <servo_PerformAction+0xb4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800105a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800105c:	e030      	b.n	80010c0 <servo_PerformAction+0xa4>

        case RETRACT:
            __HAL_TIM_SET_COMPARE(htim_motor_x, TIM_CHANNEL_1, 1000);
 800105e:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <servo_PerformAction+0xb0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001068:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim_motor_y, TIM_CHANNEL_1, 100);
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <servo_PerformAction+0xb4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2264      	movs	r2, #100	@ 0x64
 8001072:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001074:	e024      	b.n	80010c0 <servo_PerformAction+0xa4>

        case LEFT:
            __HAL_TIM_SET_COMPARE(htim_motor_x, TIM_CHANNEL_1, 1250);
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <servo_PerformAction+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001080:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim_motor_y, TIM_CHANNEL_1, 1250);
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <servo_PerformAction+0xb4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800108e:	e017      	b.n	80010c0 <servo_PerformAction+0xa4>

        case RIGHT:
            __HAL_TIM_SET_COMPARE(htim_motor_x, TIM_CHANNEL_1, 1750);
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <servo_PerformAction+0xb0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 800109a:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim_motor_y, TIM_CHANNEL_1, 1750);
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <servo_PerformAction+0xb4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80010a8:	e00a      	b.n	80010c0 <servo_PerformAction+0xa4>

        default:
            __HAL_TIM_SET_COMPARE(htim_motor_x, TIM_CHANNEL_1, 0);
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <servo_PerformAction+0xb0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(htim_motor_y, TIM_CHANNEL_1, 0);
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <servo_PerformAction+0xb4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80010be:	bf00      	nop
    }
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	20000474 	.word	0x20000474
 80010d0:	20000478 	.word	0x20000478

080010d4 <uartInit>:
static uint8_t rx_buf_2[256];
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

bool uartInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e007      	b.n	80010f0 <uartInit+0x1c>
  {
    is_open[i] = false;
 80010e0:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <uartInit+0x30>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3301      	adds	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	ddf4      	ble.n	80010e0 <uartInit+0xc>
  }


  return true;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	2000047c 	.word	0x2000047c

08001108 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <uartOpen+0x1c>
 800111e:	2b01      	cmp	r3, #1
 8001120:	d03c      	beq.n	800119c <uartOpen+0x94>
 8001122:	e07a      	b.n	800121a <uartOpen+0x112>
  {
    case _DEF_UART1:

    	  huart3.Instance = USART3;
 8001124:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <uartOpen+0x11c>)
 8001126:	4a40      	ldr	r2, [pc, #256]	@ (8001228 <uartOpen+0x120>)
 8001128:	601a      	str	r2, [r3, #0]
    	  huart3.Init.BaudRate = baud;
 800112a:	4a3e      	ldr	r2, [pc, #248]	@ (8001224 <uartOpen+0x11c>)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6053      	str	r3, [r2, #4]
    	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001130:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <uartOpen+0x11c>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    	  huart3.Init.StopBits = UART_STOPBITS_1;
 8001136:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <uartOpen+0x11c>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
    	  huart3.Init.Parity = UART_PARITY_NONE;
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <uartOpen+0x11c>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
    	  huart3.Init.Mode = UART_MODE_TX_RX;
 8001142:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <uartOpen+0x11c>)
 8001144:	220c      	movs	r2, #12
 8001146:	615a      	str	r2, [r3, #20]
    	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001148:	4b36      	ldr	r3, [pc, #216]	@ (8001224 <uartOpen+0x11c>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <uartOpen+0x11c>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    	  qbufferCreate(&qbuffer[ch], &rx_buf_1[0], 256);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4a34      	ldr	r2, [pc, #208]	@ (800122c <uartOpen+0x124>)
 800115a:	4413      	add	r3, r2
 800115c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001160:	4933      	ldr	r1, [pc, #204]	@ (8001230 <uartOpen+0x128>)
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fe8a 	bl	8000e7c <qbufferCreate>

    	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001168:	4832      	ldr	r0, [pc, #200]	@ (8001234 <uartOpen+0x12c>)
 800116a:	f004 fe3b 	bl	8005de4 <HAL_UART_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <uartOpen+0x72>
    	  {
    	    Error_Handler();
 8001174:	f000 faae 	bl	80016d4 <Error_Handler>
    			  ret =false;
    		  }

    	}

    	  break;
 8001178:	e04c      	b.n	8001214 <uartOpen+0x10c>
    		  ret= true;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
    		  is_open[ch]=true;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4a2d      	ldr	r2, [pc, #180]	@ (8001238 <uartOpen+0x130>)
 8001182:	2101      	movs	r1, #1
 8001184:	54d1      	strb	r1, [r2, r3]
    		  if(HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data[_DEF_UART1], 1)!=HAL_OK)
 8001186:	2201      	movs	r2, #1
 8001188:	492c      	ldr	r1, [pc, #176]	@ (800123c <uartOpen+0x134>)
 800118a:	4826      	ldr	r0, [pc, #152]	@ (8001224 <uartOpen+0x11c>)
 800118c:	f004 fe7a 	bl	8005e84 <HAL_UART_Receive_IT>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d03e      	beq.n	8001214 <uartOpen+0x10c>
    			  ret =false;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
    	  break;
 800119a:	e03b      	b.n	8001214 <uartOpen+0x10c>

    case _DEF_UART2:

    	  huart2.Instance = USART2;
 800119c:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <uartOpen+0x12c>)
 800119e:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <uartOpen+0x138>)
 80011a0:	601a      	str	r2, [r3, #0]
    	  huart2.Init.BaudRate = baud;
 80011a2:	4a24      	ldr	r2, [pc, #144]	@ (8001234 <uartOpen+0x12c>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	6053      	str	r3, [r2, #4]
    	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <uartOpen+0x12c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    	  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <uartOpen+0x12c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
    	  huart2.Init.Parity = UART_PARITY_NONE;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <uartOpen+0x12c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
    	  huart2.Init.Mode = UART_MODE_TX_RX;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <uartOpen+0x12c>)
 80011bc:	220c      	movs	r2, #12
 80011be:	615a      	str	r2, [r3, #20]
    	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <uartOpen+0x12c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
    	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <uartOpen+0x12c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]

    	  qbufferCreate(&qbuffer[ch], &rx_buf_2[0], 256);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4a16      	ldr	r2, [pc, #88]	@ (800122c <uartOpen+0x124>)
 80011d2:	4413      	add	r3, r2
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	491a      	ldr	r1, [pc, #104]	@ (8001244 <uartOpen+0x13c>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe4e 	bl	8000e7c <qbufferCreate>

    	  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <uartOpen+0x12c>)
 80011e2:	f004 fdff 	bl	8005de4 <HAL_UART_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <uartOpen+0xea>
    	  {
    	    Error_Handler();
 80011ec:	f000 fa72 	bl	80016d4 <Error_Handler>
    			  ret =false;
    		  }

    	}

    	  break;
 80011f0:	e012      	b.n	8001218 <uartOpen+0x110>
    		  ret= true;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
    		  is_open[ch]=true;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001238 <uartOpen+0x130>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	54d1      	strb	r1, [r2, r3]
    		  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data[_DEF_UART2], 1)!=HAL_OK)
 80011fe:	2201      	movs	r2, #1
 8001200:	4911      	ldr	r1, [pc, #68]	@ (8001248 <uartOpen+0x140>)
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <uartOpen+0x12c>)
 8001204:	f004 fe3e 	bl	8005e84 <HAL_UART_Receive_IT>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <uartOpen+0x110>
    			  ret =false;
 800120e:	2300      	movs	r3, #0
 8001210:	73fb      	strb	r3, [r7, #15]
    	  break;
 8001212:	e001      	b.n	8001218 <uartOpen+0x110>
    	  break;
 8001214:	bf00      	nop
 8001216:	e000      	b.n	800121a <uartOpen+0x112>
    	  break;
 8001218:	bf00      	nop
  }

  return ret;
 800121a:	7bfb      	ldrb	r3, [r7, #15]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200006ec 	.word	0x200006ec
 8001228:	40004800 	.word	0x40004800
 800122c:	20000480 	.word	0x20000480
 8001230:	200004a4 	.word	0x200004a4
 8001234:	200006a4 	.word	0x200006a4
 8001238:	2000047c 	.word	0x2000047c
 800123c:	200004a0 	.word	0x200004a0
 8001240:	40004400 	.word	0x40004400
 8001244:	200005a4 	.word	0x200005a4
 8001248:	200004a1 	.word	0x200004a1

0800124c <uartGetQBuffer>:
}



qbuffer_t *uartGetQBuffer(uint8_t ch)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
    if (ch < UART_MAX_CH)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d804      	bhi.n	8001266 <uartGetQBuffer+0x1a>
    {
        return &qbuffer[ch];
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <uartGetQBuffer+0x28>)
 8001262:	4413      	add	r3, r2
 8001264:	e000      	b.n	8001268 <uartGetQBuffer+0x1c>
    }
    return NULL;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	20000480 	.word	0x20000480

08001278 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  if (huart->Instance == USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_UART_RxCpltCallback+0x4c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d109      	bne.n	80012b2 <HAL_UART_RxCpltCallback+0x26>
  {
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	490e      	ldr	r1, [pc, #56]	@ (80012dc <HAL_UART_RxCpltCallback+0x50>)
 80012a2:	480f      	ldr	r0, [pc, #60]	@ (80012e0 <HAL_UART_RxCpltCallback+0x54>)
 80012a4:	f7ff fe05 	bl	8000eb2 <qbufferWrite>

    HAL_UART_Receive_IT(&huart2, (uint8_t *)&rx_data[_DEF_UART2], 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	490c      	ldr	r1, [pc, #48]	@ (80012dc <HAL_UART_RxCpltCallback+0x50>)
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <HAL_UART_RxCpltCallback+0x58>)
 80012ae:	f004 fde9 	bl	8005e84 <HAL_UART_Receive_IT>
  }

  if (huart->Instance == USART3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <HAL_UART_RxCpltCallback+0x5c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d109      	bne.n	80012d0 <HAL_UART_RxCpltCallback+0x44>
  {
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 80012bc:	2201      	movs	r2, #1
 80012be:	490b      	ldr	r1, [pc, #44]	@ (80012ec <HAL_UART_RxCpltCallback+0x60>)
 80012c0:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <HAL_UART_RxCpltCallback+0x64>)
 80012c2:	f7ff fdf6 	bl	8000eb2 <qbufferWrite>

    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data[_DEF_UART1], 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	4908      	ldr	r1, [pc, #32]	@ (80012ec <HAL_UART_RxCpltCallback+0x60>)
 80012ca:	480a      	ldr	r0, [pc, #40]	@ (80012f4 <HAL_UART_RxCpltCallback+0x68>)
 80012cc:	f004 fdda 	bl	8005e84 <HAL_UART_Receive_IT>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40004400 	.word	0x40004400
 80012dc:	200004a1 	.word	0x200004a1
 80012e0:	20000490 	.word	0x20000490
 80012e4:	200006a4 	.word	0x200006a4
 80012e8:	40004800 	.word	0x40004800
 80012ec:	200004a0 	.word	0x200004a0
 80012f0:	20000480 	.word	0x20000480
 80012f4:	200006ec 	.word	0x200006ec

080012f8 <VibrationSensor_Init>:
#include "vibration.h"

static qbuffer_t *uart_qbuffer;

void VibrationSensor_Init(uint8_t ch)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	uart_qbuffer = uartGetQBuffer(ch);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffa1 	bl	800124c <uartGetQBuffer>
 800130a:	4603      	mov	r3, r0
 800130c:	4a02      	ldr	r2, [pc, #8]	@ (8001318 <VibrationSensor_Init+0x20>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000734 	.word	0x20000734

0800131c <HandleVibration>:
uint8_t* HandleVibration(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b092      	sub	sp, #72	@ 0x48
 8001320:	af00      	add	r7, sp, #0
	uint8_t minimum_packet_size = 3;
 8001322:	2303      	movs	r3, #3
 8001324:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	while (qbufferAvailable(&uart_qbuffer) >= minimum_packet_size)
 8001328:	e045      	b.n	80013b6 <HandleVibration+0x9a>
	{
		uint8_t header[2];
		uint8_t length;

		qbufferRead(&uart_qbuffer, header, 2);
 800132a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800132e:	2202      	movs	r2, #2
 8001330:	4619      	mov	r1, r3
 8001332:	4827      	ldr	r0, [pc, #156]	@ (80013d0 <HandleVibration+0xb4>)
 8001334:	f7ff fdfb 	bl	8000f2e <qbufferRead>
		qbufferRead(&uart_qbuffer, &length, 1);
 8001338:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 800133c:	2201      	movs	r2, #1
 800133e:	4619      	mov	r1, r3
 8001340:	4823      	ldr	r0, [pc, #140]	@ (80013d0 <HandleVibration+0xb4>)
 8001342:	f7ff fdf4 	bl	8000f2e <qbufferRead>

		if (header[0] == 0xAA && header[1] == 0x55)
 8001346:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800134a:	2baa      	cmp	r3, #170	@ 0xaa
 800134c:	d133      	bne.n	80013b6 <HandleVibration+0x9a>
 800134e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001352:	2b55      	cmp	r3, #85	@ 0x55
 8001354:	d12f      	bne.n	80013b6 <HandleVibration+0x9a>
		{
			uint8_t total_packet_size = 3 + length;
 8001356:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800135a:	3303      	adds	r3, #3
 800135c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

			if (qbufferAvailable(&uart_qbuffer)
 8001360:	481b      	ldr	r0, [pc, #108]	@ (80013d0 <HandleVibration+0xb4>)
 8001362:	f7ff fe21 	bl	8000fa8 <qbufferAvailable>
 8001366:	4601      	mov	r1, r0
					>= (total_packet_size - minimum_packet_size))
 8001368:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800136c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001370:	1ad3      	subs	r3, r2, r3
			if (qbufferAvailable(&uart_qbuffer)
 8001372:	4299      	cmp	r1, r3
 8001374:	d310      	bcc.n	8001398 <HandleVibration+0x7c>
			{
				VibrationSensor packet;

				memcpy(packet.header, header, 2);
 8001376:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800137a:	803b      	strh	r3, [r7, #0]
				packet.length = length;
 800137c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001380:	70bb      	strb	r3, [r7, #2]
				qbufferRead(&uart_qbuffer, packet.data, length);
 8001382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001386:	461a      	mov	r2, r3
 8001388:	463b      	mov	r3, r7
 800138a:	3303      	adds	r3, #3
 800138c:	4619      	mov	r1, r3
 800138e:	4810      	ldr	r0, [pc, #64]	@ (80013d0 <HandleVibration+0xb4>)
 8001390:	f7ff fdcd 	bl	8000f2e <qbufferRead>

				return packet.data;
 8001394:	2300      	movs	r3, #0
 8001396:	e017      	b.n	80013c8 <HandleVibration+0xac>
			}
			else
			{
				qbufferWrite(&uart_qbuffer, header, 2);
 8001398:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800139c:	2202      	movs	r2, #2
 800139e:	4619      	mov	r1, r3
 80013a0:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <HandleVibration+0xb4>)
 80013a2:	f7ff fd86 	bl	8000eb2 <qbufferWrite>
				qbufferWrite(&uart_qbuffer, &length, 1);
 80013a6:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <HandleVibration+0xb4>)
 80013b0:	f7ff fd7f 	bl	8000eb2 <qbufferWrite>
				break;
 80013b4:	e007      	b.n	80013c6 <HandleVibration+0xaa>
	while (qbufferAvailable(&uart_qbuffer) >= minimum_packet_size)
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <HandleVibration+0xb4>)
 80013b8:	f7ff fdf6 	bl	8000fa8 <qbufferAvailable>
 80013bc:	4602      	mov	r2, r0
 80013be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d2b1      	bcs.n	800132a <HandleVibration+0xe>
		{
			continue;
		}
	}

	return NULL;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3748      	adds	r7, #72	@ 0x48
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000734 	.word	0x20000734

080013d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013d8:	f000 fc04 	bl	8001be4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013dc:	f000 f842 	bl	8001464 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013e0:	f7ff f9b8 	bl	8000754 <MX_GPIO_Init>
	MX_DMA_Init();
 80013e4:	f7ff f996 	bl	8000714 <MX_DMA_Init>
	MX_ADC1_Init();
 80013e8:	f7ff f8ca 	bl	8000580 <MX_ADC1_Init>
	MX_TIM1_Init();
 80013ec:	f7ff fa8e 	bl	800090c <MX_TIM1_Init>
	MX_TIM2_Init();
 80013f0:	f7ff fb2e 	bl	8000a50 <MX_TIM2_Init>
	MX_LWIP_Init();
 80013f4:	f005 fc60 	bl	8006cb8 <MX_LWIP_Init>
	MX_TIM3_Init();
 80013f8:	f7ff fba0 	bl	8000b3c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	uartInit();
 80013fc:	f7ff fe6a 	bl	80010d4 <uartInit>
	uartOpen(_DEF_UART2, 115200);
 8001400:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fe7f 	bl	8001108 <uartOpen>

	VibrationSensor_Init(_DEF_UART2);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff ff74 	bl	80012f8 <VibrationSensor_Init>
	CurrentSensor_Init(&hadc1);
 8001410:	480f      	ldr	r0, [pc, #60]	@ (8001450 <main+0x7c>)
 8001412:	f7ff fc93 	bl	8000d3c <CurrentSensor_Init>
	CurrentSensor_Start();
 8001416:	f7ff fcb3 	bl	8000d80 <CurrentSensor_Start>
	servo_Init(&htim1, &htim2);
 800141a:	490e      	ldr	r1, [pc, #56]	@ (8001454 <main+0x80>)
 800141c:	480e      	ldr	r0, [pc, #56]	@ (8001458 <main+0x84>)
 800141e:	f7ff fddb 	bl	8000fd8 <servo_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		sensordata.vibration_value = HandleVibration();
 8001422:	f7ff ff7b 	bl	800131c <HandleVibration>
 8001426:	4603      	mov	r3, r0
 8001428:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <main+0x88>)
 800142a:	6013      	str	r3, [r2, #0]
		sensordata.current_value = CurrentSensor_GetValue();
 800142c:	f7ff fcb8 	bl	8000da0 <CurrentSensor_GetValue>
 8001430:	eef0 7a40 	vmov.f32	s15, s0
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <main+0x88>)
 8001436:	edc3 7a01 	vstr	s15, [r3, #4]

		if(send2server_flag)
 800143a:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <main+0x8c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0ee      	beq.n	8001422 <main+0x4e>
		{
			send2server_flag =0;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <main+0x8c>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
			SendPacket();
 800144a:	f000 f8ff 	bl	800164c <SendPacket>
		sensordata.vibration_value = HandleVibration();
 800144e:	e7e8      	b.n	8001422 <main+0x4e>
 8001450:	200000a4 	.word	0x200000a4
 8001454:	20000194 	.word	0x20000194
 8001458:	2000014c 	.word	0x2000014c
 800145c:	2000073c 	.word	0x2000073c
 8001460:	20000744 	.word	0x20000744

08001464 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	@ 0x50
 8001468:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	@ 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f010 fc80 	bl	8011d78 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b2b      	ldr	r3, [pc, #172]	@ (800153c <SystemClock_Config+0xd8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a2a      	ldr	r2, [pc, #168]	@ (800153c <SystemClock_Config+0xd8>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
 8001498:	4b28      	ldr	r3, [pc, #160]	@ (800153c <SystemClock_Config+0xd8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b25      	ldr	r3, [pc, #148]	@ (8001540 <SystemClock_Config+0xdc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <SystemClock_Config+0xdc>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <SystemClock_Config+0xdc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 80014d8:	23b4      	movs	r3, #180	@ 0xb4
 80014da:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80014e0:	2307      	movs	r3, #7
 80014e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 ffd3 	bl	8004494 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
		Error_Handler();
 80014f4:	f000 f8ee 	bl	80016d4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80014f8:	f002 ff7c 	bl	80043f4 <HAL_PWREx_EnableOverDrive>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0xa2>
		Error_Handler();
 8001502:	f000 f8e7 	bl	80016d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001512:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001516:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2105      	movs	r1, #5
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fa2d 	bl	8004984 <HAL_RCC_ClockConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0xd0>
		Error_Handler();
 8001530:	f000 f8d0 	bl	80016d4 <Error_Handler>
	}
}
 8001534:	bf00      	nop
 8001536:	3750      	adds	r7, #80	@ 0x50
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <HAL_UART_MspInit>:

/* USER CODE BEGIN 4 */
void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	@ 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART2) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a36      	ldr	r2, [pc, #216]	@ (800163c <HAL_UART_MspInit+0xf8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d134      	bne.n	80015d0 <HAL_UART_MspInit+0x8c>
		/* USER CODE BEGIN USART2_MspInit 0 */

		/* USER CODE END USART2_MspInit 0 */
		/* USART2 clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	4b35      	ldr	r3, [pc, #212]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a34      	ldr	r2, [pc, #208]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 8001570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b32      	ldr	r3, [pc, #200]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a2d      	ldr	r2, [pc, #180]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
		/**USART2 GPIO Configuration
		 PD5     ------> USART2_TX
		 PD6     ------> USART2_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800159e:	2360      	movs	r3, #96	@ 0x60
 80015a0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ae:	2307      	movs	r3, #7
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4822      	ldr	r0, [pc, #136]	@ (8001644 <HAL_UART_MspInit+0x100>)
 80015ba:	f002 fd55 	bl	8004068 <HAL_GPIO_Init>

		/* USART2 interrupt Init */
		HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2026      	movs	r0, #38	@ 0x26
 80015c4:	f001 f8a1 	bl	800270a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015c8:	2026      	movs	r0, #38	@ 0x26
 80015ca:	f001 f8ba 	bl	8002742 <HAL_NVIC_EnableIRQ>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 80015ce:	e031      	b.n	8001634 <HAL_UART_MspInit+0xf0>
	} else if (uartHandle->Instance == USART3) {
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001648 <HAL_UART_MspInit+0x104>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12c      	bne.n	8001634 <HAL_UART_MspInit+0xf0>
		__HAL_RCC_USART3_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a10      	ldr	r2, [pc, #64]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_UART_MspInit+0xfc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001616:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001624:	2307      	movs	r3, #7
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <HAL_UART_MspInit+0x100>)
 8001630:	f002 fd1a 	bl	8004068 <HAL_GPIO_Init>
}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40004400 	.word	0x40004400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40004800 	.word	0x40004800

0800164c <SendPacket>:

		/* USER CODE END USART3_MspDeInit 1 */
	}
}
void SendPacket(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
	struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, sizeof(SensorData), PBUF_POOL);
 8001652:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8001656:	2108      	movs	r1, #8
 8001658:	2036      	movs	r0, #54	@ 0x36
 800165a:	f006 fff9 	bl	8008650 <pbuf_alloc>
 800165e:	6078      	str	r0, [r7, #4]
	if (p == NULL) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <SendPacket+0x22>
		printf("Failed to allocate pbuf\n");
 8001666:	480f      	ldr	r0, [pc, #60]	@ (80016a4 <SendPacket+0x58>)
 8001668:	f010 fa96 	bl	8011b98 <puts>
		return;
 800166c:	e016      	b.n	800169c <SendPacket+0x50>
	}

	/* Copy data to pbuf */
	pbuf_take(p, (void*) &sensordata, sizeof(SensorData));
 800166e:	2208      	movs	r2, #8
 8001670:	490d      	ldr	r1, [pc, #52]	@ (80016a8 <SendPacket+0x5c>)
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f007 fd2c 	bl	80090d0 <pbuf_take>

	/* Send the pbuf */
	if (tcp_write(pcbTx, p->payload, p->len, TCP_WRITE_FLAG_COPY) != ERR_OK) {
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <SendPacket+0x60>)
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	895a      	ldrh	r2, [r3, #10]
 8001684:	2301      	movs	r3, #1
 8001686:	f00b fe37 	bl	800d2f8 <tcp_write>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <SendPacket+0x4a>
		printf("Failed to write data to TCP\n");
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <SendPacket+0x64>)
 8001692:	f010 fa81 	bl	8011b98 <puts>
	}

	/* Free the pbuf */
	pbuf_free(p);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f007 fabe 	bl	8008c18 <pbuf_free>
}
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	080129b0 	.word	0x080129b0
 80016a8:	2000073c 	.word	0x2000073c
 80016ac:	20000738 	.word	0x20000738
 80016b0:	080129c8 	.word	0x080129c8

080016b4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

	send2server_flag=1;
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000744 	.word	0x20000744

080016d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	4a0f      	ldr	r2, [pc, #60]	@ (800172c <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	@ (800172c <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <UsageFault_Handler+0x4>

08001758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001786:	f000 fa7f 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <TIM3_IRQHandler+0x10>)
 8001796:	f003 fc85 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200001dc 	.word	0x200001dc

080017a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <USART2_IRQHandler+0x10>)
 80017aa:	f004 fb91 	bl	8005ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200006a4 	.word	0x200006a4

080017b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <DMA2_Stream0_IRQHandler+0x10>)
 80017be:	f001 f973 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200000ec 	.word	0x200000ec

080017cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return 1;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_kill>:

int _kill(int pid, int sig)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <_kill+0x20>)
 80017e8:	2216      	movs	r2, #22
 80017ea:	601a      	str	r2, [r3, #0]
  return -1;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	20008b78 	.word	0x20008b78

08001800 <_exit>:

void _exit (int status)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe5 	bl	80017dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001812:	bf00      	nop
 8001814:	e7fd      	b.n	8001812 <_exit+0x12>

08001816 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e00a      	b.n	800183e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001828:	f3af 8000 	nop.w
 800182c:	4601      	mov	r1, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	60ba      	str	r2, [r7, #8]
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3301      	adds	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	dbf0      	blt.n	8001828 <_read+0x12>
  }

  return len;
 8001846:	687b      	ldr	r3, [r7, #4]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e009      	b.n	8001876 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	60ba      	str	r2, [r7, #8]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbf1      	blt.n	8001862 <_write+0x12>
  }
  return len;
 800187e:	687b      	ldr	r3, [r7, #4]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_close>:

int _close(int file)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b0:	605a      	str	r2, [r3, #4]
  return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_isatty>:

int _isatty(int file)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d205      	bcs.n	800192c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <_sbrk+0x6c>)
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a06      	ldr	r2, [pc, #24]	@ (8001954 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	20030000 	.word	0x20030000
 8001950:	00000400 	.word	0x00000400
 8001954:	20000748 	.word	0x20000748
 8001958:	20008b88 	.word	0x20008b88
 800195c:	20008b78 	.word	0x20008b78

08001960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	@ (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001988:	f7ff ffea 	bl	8001960 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800198c:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800198e:	490d      	ldr	r1, [pc, #52]	@ (80019c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001990:	4a0d      	ldr	r2, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a4:	4c0a      	ldr	r4, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f010 fa2f 	bl	8011e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b6:	f7ff fd0d 	bl	80013d4 <main>
  bx  lr    
 80019ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019c8:	080155c0 	.word	0x080155c0
  ldr r2, =_sbss
 80019cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80019d0:	20008b88 	.word	0x20008b88

080019d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC_IRQHandler>

080019d6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <LAN8742_RegisterBusIO+0x28>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <LAN8742_RegisterBusIO+0x28>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <LAN8742_RegisterBusIO+0x28>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e014      	b.n	8001a2e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d139      	bne.n	8001aca <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e01c      	b.n	8001aaa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	2112      	movs	r1, #18
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	4798      	blx	r3
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da03      	bge.n	8001a8c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001a84:	f06f 0304 	mvn.w	r3, #4
 8001a88:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001a8a:	e00b      	b.n	8001aa4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d105      	bne.n	8001aa4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
         break;
 8001aa2:	e005      	b.n	8001ab0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b1f      	cmp	r3, #31
 8001aae:	d9df      	bls.n	8001a70 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b1f      	cmp	r3, #31
 8001ab6:	d902      	bls.n	8001abe <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001ab8:	f06f 0302 	mvn.w	r3, #2
 8001abc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001aca:	693b      	ldr	r3, [r7, #16]
 }
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6810      	ldr	r0, [r2, #0]
 8001ae8:	f107 020c 	add.w	r2, r7, #12
 8001aec:	2101      	movs	r1, #1
 8001aee:	4798      	blx	r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da02      	bge.n	8001afc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001af6:	f06f 0304 	mvn.w	r3, #4
 8001afa:	e06e      	b.n	8001bda <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6810      	ldr	r0, [r2, #0]
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4798      	blx	r3
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da02      	bge.n	8001b18 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b12:	f06f 0304 	mvn.w	r3, #4
 8001b16:	e060      	b.n	8001bda <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e059      	b.n	8001bda <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6810      	ldr	r0, [r2, #0]
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	2100      	movs	r1, #0
 8001b34:	4798      	blx	r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	da02      	bge.n	8001b42 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b3c:	f06f 0304 	mvn.w	r3, #4
 8001b40:	e04b      	b.n	8001bda <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11b      	bne.n	8001b84 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <LAN8742_GetLinkState+0x90>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b60:	2302      	movs	r3, #2
 8001b62:	e03a      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e033      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	e02c      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b80:	2305      	movs	r3, #5
 8001b82:	e02a      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6810      	ldr	r0, [r2, #0]
 8001b8c:	f107 020c 	add.w	r2, r7, #12
 8001b90:	211f      	movs	r1, #31
 8001b92:	4798      	blx	r3
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da02      	bge.n	8001ba0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b9a:	f06f 0304 	mvn.w	r3, #4
 8001b9e:	e01c      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001baa:	2306      	movs	r3, #6
 8001bac:	e015      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 031c 	and.w	r3, r3, #28
 8001bb4:	2b18      	cmp	r3, #24
 8001bb6:	d101      	bne.n	8001bbc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e00e      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 031c 	and.w	r3, r3, #28
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d101      	bne.n	8001bca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e007      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 031c 	and.w	r3, r3, #28
 8001bd0:	2b14      	cmp	r3, #20
 8001bd2:	d101      	bne.n	8001bd8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e000      	b.n	8001bda <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bd8:	2305      	movs	r3, #5
    }
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c24 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <HAL_Init+0x40>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_Init+0x40>)
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_Init+0x40>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f000 fd71 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f000 f808 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c18:	f7ff fd62 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fd89 	bl	800275e <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 fd51 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	2000074c 	.word	0x2000074c

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000074c 	.word	0x2000074c

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e033      	b.n	8001d8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fc78 	bl	8000624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d56:	f023 0302 	bic.w	r3, r3, #2
 8001d5a:	f043 0202 	orr.w	r2, r3, #2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa78 	bl	8002258 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f023 0303 	bic.w	r3, r3, #3
 8001d76:	f043 0201 	orr.w	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d7e:	e001      	b.n	8001d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start_DMA+0x1e>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0e9      	b.n	8001f8a <HAL_ADC_Start_DMA+0x1f2>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d018      	beq.n	8001dfe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ddc:	4b6d      	ldr	r3, [pc, #436]	@ (8001f94 <HAL_ADC_Start_DMA+0x1fc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6d      	ldr	r2, [pc, #436]	@ (8001f98 <HAL_ADC_Start_DMA+0x200>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9a      	lsrs	r2, r3, #18
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e0c:	d107      	bne.n	8001e1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e1c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	f040 80a1 	bne.w	8001f70 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e6c:	d106      	bne.n	8001e7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f023 0206 	bic.w	r2, r3, #6
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e7a:	e002      	b.n	8001e82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8a:	4b44      	ldr	r3, [pc, #272]	@ (8001f9c <HAL_ADC_Start_DMA+0x204>)
 8001e8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e92:	4a43      	ldr	r2, [pc, #268]	@ (8001fa0 <HAL_ADC_Start_DMA+0x208>)
 8001e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9a:	4a42      	ldr	r2, [pc, #264]	@ (8001fa4 <HAL_ADC_Start_DMA+0x20c>)
 8001e9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea2:	4a41      	ldr	r2, [pc, #260]	@ (8001fa8 <HAL_ADC_Start_DMA+0x210>)
 8001ea4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001eae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001ebe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ece:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	334c      	adds	r3, #76	@ 0x4c
 8001eda:	4619      	mov	r1, r3
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f000 fcf8 	bl	80028d4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 031f 	and.w	r3, r3, #31
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d12a      	bne.n	8001f46 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8001fac <HAL_ADC_Start_DMA+0x214>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d015      	beq.n	8001f26 <HAL_ADC_Start_DMA+0x18e>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb0 <HAL_ADC_Start_DMA+0x218>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_Start_DMA+0x178>
 8001f04:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <HAL_ADC_Start_DMA+0x204>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_ADC_Start_DMA+0x21c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d136      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_ADC_Start_DMA+0x204>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d130      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d129      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	e020      	b.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_ADC_Start_DMA+0x214>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d11b      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	e00b      	b.n	8001f88 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000000 	.word	0x20000000
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	40012300 	.word	0x40012300
 8001fa0:	08002451 	.word	0x08002451
 8001fa4:	0800250b 	.word	0x0800250b
 8001fa8:	08002527 	.word	0x08002527
 8001fac:	40012000 	.word	0x40012000
 8001fb0:	40012100 	.word	0x40012100
 8001fb4:	40012200 	.word	0x40012200

08001fb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1c>
 800200c:	2302      	movs	r3, #2
 800200e:	e113      	b.n	8002238 <HAL_ADC_ConfigChannel+0x244>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b09      	cmp	r3, #9
 800201e:	d925      	bls.n	800206c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68d9      	ldr	r1, [r3, #12]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1e      	subs	r3, #30
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43da      	mvns	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	400a      	ands	r2, r1
 8002044:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	4603      	mov	r3, r0
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4403      	add	r3, r0
 800205e:	3b1e      	subs	r3, #30
 8002060:	409a      	lsls	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	e022      	b.n	80020b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6919      	ldr	r1, [r3, #16]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4613      	mov	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	2207      	movs	r2, #7
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	400a      	ands	r2, r1
 800208e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4403      	add	r3, r0
 80020a8:	409a      	lsls	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d824      	bhi.n	8002104 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b05      	subs	r3, #5
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b05      	subs	r3, #5
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34
 8002102:	e04c      	b.n	800219e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d824      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	3b23      	subs	r3, #35	@ 0x23
 800211e:	221f      	movs	r2, #31
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43da      	mvns	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	400a      	ands	r2, r1
 800212c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b23      	subs	r3, #35	@ 0x23
 8002148:	fa00 f203 	lsl.w	r2, r0, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	631a      	str	r2, [r3, #48]	@ 0x30
 8002154:	e023      	b.n	800219e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b41      	subs	r3, #65	@ 0x41
 8002168:	221f      	movs	r2, #31
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	400a      	ands	r2, r1
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b41      	subs	r3, #65	@ 0x41
 8002192:	fa00 f203 	lsl.w	r2, r0, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219e:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_ADC_ConfigChannel+0x250>)
 80021a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a28      	ldr	r2, [pc, #160]	@ (8002248 <HAL_ADC_ConfigChannel+0x254>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d10f      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1d8>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d10b      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002248 <HAL_ADC_ConfigChannel+0x254>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12b      	bne.n	800222e <HAL_ADC_ConfigChannel+0x23a>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a1c      	ldr	r2, [pc, #112]	@ (800224c <HAL_ADC_ConfigChannel+0x258>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d003      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x1f4>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b11      	cmp	r3, #17
 80021e6:	d122      	bne.n	800222e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a11      	ldr	r2, [pc, #68]	@ (800224c <HAL_ADC_ConfigChannel+0x258>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d111      	bne.n	800222e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_ADC_ConfigChannel+0x25c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_ADC_ConfigChannel+0x260>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	0c9a      	lsrs	r2, r3, #18
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002220:	e002      	b.n	8002228 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	3b01      	subs	r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f9      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40012300 	.word	0x40012300
 8002248:	40012000 	.word	0x40012000
 800224c:	10000012 	.word	0x10000012
 8002250:	20000000 	.word	0x20000000
 8002254:	431bde83 	.word	0x431bde83

08002258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002260:	4b79      	ldr	r3, [pc, #484]	@ (8002448 <ADC_Init+0x1f0>)
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	021a      	lsls	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ea:	4a58      	ldr	r2, [pc, #352]	@ (800244c <ADC_Init+0x1f4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d022      	beq.n	8002336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e00f      	b.n	8002356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002354:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0202 	bic.w	r2, r2, #2
 8002364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7e1b      	ldrb	r3, [r3, #24]
 8002370:	005a      	lsls	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002392:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	3b01      	subs	r3, #1
 80023b0:	035a      	lsls	r2, r3, #13
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	e007      	b.n	80023cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	051a      	lsls	r2, r3, #20
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800240e:	025a      	lsls	r2, r3, #9
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6899      	ldr	r1, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	029a      	lsls	r2, r3, #10
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40012300 	.word	0x40012300
 800244c:	0f000001 	.word	0x0f000001

08002450 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002466:	2b00      	cmp	r3, #0
 8002468:	d13c      	bne.n	80024e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d12b      	bne.n	80024dc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d127      	bne.n	80024dc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002492:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d119      	bne.n	80024dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0220 	bic.w	r2, r2, #32
 80024b6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fd6b 	bl	8001fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024e2:	e00e      	b.n	8002502 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff fd75 	bl	8001fe0 <HAL_ADC_ErrorCallback>
}
 80024f6:	e004      	b.n	8002502 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f7ff fd57 	bl	8001fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002532:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2240      	movs	r2, #64	@ 0x40
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f043 0204 	orr.w	r2, r3, #4
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff fd4a 	bl	8001fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fa94 	bl	8001cb0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e099      	b.n	80028c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b4:	e00f      	b.n	80027d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b6:	f7ff fa7b 	bl	8001cb0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d908      	bls.n	80027d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e078      	b.n	80028c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e8      	bne.n	80027b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_DMA_Init+0x158>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	2b04      	cmp	r3, #4
 800282e:	d107      	bne.n	8002840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	4313      	orrs	r3, r2
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0307 	bic.w	r3, r3, #7
 8002856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	2b04      	cmp	r3, #4
 8002868:	d117      	bne.n	800289a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fb01 	bl	8002e84 <DMA_CheckFifoParam>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2240      	movs	r2, #64	@ 0x40
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002896:	2301      	movs	r3, #1
 8002898:	e016      	b.n	80028c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fab8 	bl	8002e18 <DMA_CalcBaseAndBitshift>
 80028a8:	4603      	mov	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	223f      	movs	r2, #63	@ 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	f010803f 	.word	0xf010803f

080028d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Start_IT+0x26>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e040      	b.n	800297c <HAL_DMA_Start_IT+0xa8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12f      	bne.n	800296e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa4a 	bl	8002dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	223f      	movs	r2, #63	@ 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0216 	orr.w	r2, r2, #22
 8002942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e005      	b.n	800297a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800297a:	7dfb      	ldrb	r3, [r7, #23]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002992:	f7ff f98d 	bl	8001cb0 <HAL_GetTick>
 8002996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d008      	beq.n	80029b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2280      	movs	r2, #128	@ 0x80
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e052      	b.n	8002a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0216 	bic.w	r2, r2, #22
 80029c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_DMA_Abort+0x62>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a06:	e013      	b.n	8002a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a08:	f7ff f952 	bl	8001cb0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d90c      	bls.n	8002a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e015      	b.n	8002a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e4      	bne.n	8002a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	223f      	movs	r2, #63	@ 0x3f
 8002a44:	409a      	lsls	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d004      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2280      	movs	r2, #128	@ 0x80
 8002a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00c      	b.n	8002a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2205      	movs	r2, #5
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf0 <HAL_DMA_IRQHandler+0x248>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8002cf4 <HAL_DMA_IRQHandler+0x24c>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a9b      	lsrs	r3, r3, #10
 8002ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	2208      	movs	r2, #8
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d012      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	2201      	movs	r2, #1
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	2204      	movs	r2, #4
 8002b50:	409a      	lsls	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	2210      	movs	r2, #16
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d043      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03c      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	409a      	lsls	r2, r3
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d018      	beq.n	8002bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d024      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
 8002bd6:	e01f      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0208 	bic.w	r2, r2, #8
 8002c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 808f 	beq.w	8002d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8087 	beq.w	8002d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2220      	movs	r2, #32
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d136      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0216 	bic.w	r2, r2, #22
 8002c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x1da>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0208 	bic.w	r2, r2, #8
 8002c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c96:	223f      	movs	r2, #63	@ 0x3f
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d07e      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4798      	blx	r3
        }
        return;
 8002cbe:	e079      	b.n	8002db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d01d      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e02c      	b.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
 8002d08:	e01e      	b.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10f      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0210 	bic.w	r2, r2, #16
 8002d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d032      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2205      	movs	r2, #5
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d307      	bcc.n	8002d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f2      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x2cc>
 8002d8e:	e000      	b.n	8002d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e000      	b.n	8002db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002db4:	bf00      	nop
    }
  }
}
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b40      	cmp	r3, #64	@ 0x40
 8002de8:	d108      	bne.n	8002dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dfa:	e007      	b.n	8002e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3b10      	subs	r3, #16
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <DMA_CalcBaseAndBitshift+0x64>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e32:	4a13      	ldr	r2, [pc, #76]	@ (8002e80 <DMA_CalcBaseAndBitshift+0x68>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d909      	bls.n	8002e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e58:	e007      	b.n	8002e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	aaaaaaab 	.word	0xaaaaaaab
 8002e80:	080153dc 	.word	0x080153dc

08002e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d856      	bhi.n	8002f52 <DMA_CheckFifoParam+0xce>
 8002ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <DMA_CheckFifoParam+0x28>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecf 	.word	0x08002ecf
 8002eb4:	08002ebd 	.word	0x08002ebd
 8002eb8:	08002f53 	.word	0x08002f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d046      	beq.n	8002f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e043      	b.n	8002f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed6:	d140      	bne.n	8002f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e03d      	b.n	8002f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee6:	d121      	bne.n	8002f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d837      	bhi.n	8002f5e <DMA_CheckFifoParam+0xda>
 8002eee:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <DMA_CheckFifoParam+0x70>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f0b 	.word	0x08002f0b
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f1d 	.word	0x08002f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e030      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d025      	beq.n	8002f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e022      	b.n	8002f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f24:	d11f      	bne.n	8002f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f2a:	e01c      	b.n	8002f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d903      	bls.n	8002f3a <DMA_CheckFifoParam+0xb6>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d003      	beq.n	8002f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f38:	e018      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3e:	e015      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e00b      	b.n	8002f6a <DMA_CheckFifoParam+0xe6>
      break;
 8002f52:	bf00      	nop
 8002f54:	e00a      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e008      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e006      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e08a      	b.n	80030a4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2223      	movs	r2, #35	@ 0x23
 8002f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f004 f92b 	bl	80071fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_ETH_Init+0x130>)
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	4a3f      	ldr	r2, [pc, #252]	@ (80030ac <HAL_ETH_Init+0x130>)
 8002fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ac <HAL_ETH_Init+0x130>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_ETH_Init+0x134>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <HAL_ETH_Init+0x134>)
 8002fc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fcc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002fce:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <HAL_ETH_Init+0x134>)
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4936      	ldr	r1, [pc, #216]	@ (80030b0 <HAL_ETH_Init+0x134>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_ETH_Init+0x134>)
 8002fde:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff8:	f7fe fe5a 	bl	8001cb0 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002ffe:	e011      	b.n	8003024 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003000:	f7fe fe56 	bl	8001cb0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800300e:	d909      	bls.n	8003024 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2204      	movs	r2, #4
 8003014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	22e0      	movs	r2, #224	@ 0xe0
 800301c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e03f      	b.n	80030a4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e4      	bne.n	8003000 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fd58 	bl	8003aec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fe03 	bl	8003c48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fe59 	bl	8003cfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	461a      	mov	r2, r3
 800304e:	2100      	movs	r1, #0
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fdc1 	bl	8003bd8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800307a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800308e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2210      	movs	r2, #16
 800309e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800

080030b4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d150      	bne.n	8003168 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2223      	movs	r2, #35	@ 0x23
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f939 	bl	800334c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0208 	orr.w	r2, r2, #8
 80030e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fe fde8 	bl	8001cc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0204 	orr.w	r2, r2, #4
 800310e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003118:	2001      	movs	r0, #1
 800311a:	f7fe fdd5 	bl	8001cc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fb7c 	bl	8003824 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800313e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003142:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800315a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2223      	movs	r2, #35	@ 0x23
 8003160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003180:	2b23      	cmp	r3, #35	@ 0x23
 8003182:	d14a      	bne.n	800321a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2223      	movs	r2, #35	@ 0x23
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800319e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031a2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	f023 0302 	bic.w	r3, r3, #2
 80031b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80031ba:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fe fd77 	bl	8001cc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fb1e 	bl	8003824 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0208 	bic.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003200:	2001      	movs	r0, #1
 8003202:	f7fe fd61 	bl	8001cc8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2210      	movs	r2, #16
 8003212:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07c      	b.n	8003344 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003250:	2b23      	cmp	r3, #35	@ 0x23
 8003252:	d176      	bne.n	8003342 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003254:	2200      	movs	r2, #0
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fdbd 	bl	8003dd8 <ETH_Prepare_Tx_Descriptors>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e065      	b.n	8003344 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8003278:	f3bf 8f4f 	dsb	sy
}
 800327c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3206      	adds	r2, #6
 8003286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	629a      	str	r2, [r3, #40]	@ 0x28
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329a:	2b03      	cmp	r3, #3
 800329c:	d904      	bls.n	80032a8 <HAL_ETH_Transmit+0x84>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	1f1a      	subs	r2, r3, #4
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3106      	adds	r1, #6
 80032b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032bc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80032be:	f7fe fcf7 	bl	8001cb0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80032c4:	e037      	b.n	8003336 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d011      	beq.n	80032fc <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e023      	b.n	8003344 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d018      	beq.n	8003336 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7fe fcd4 	bl	8001cb0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <HAL_ETH_Transmit+0xf6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10d      	bne.n	8003336 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f043 0204 	orr.w	r2, r3, #4
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8003330:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e006      	b.n	8003344 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	dbc3      	blt.n	80032c6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003358:	2301      	movs	r3, #1
 800335a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003360:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	3212      	adds	r2, #18
 8003368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003372:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003374:	e044      	b.n	8003400 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d112      	bne.n	80033a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	4618      	mov	r0, r3
 8003384:	f004 f8da 	bl	800753c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	74fb      	strb	r3, [r7, #19]
 8003392:	e007      	b.n	80033a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	461a      	mov	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	461a      	mov	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02a      	beq.n	8003400 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d108      	bne.n	80033c4 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	6053      	str	r3, [r2, #4]
 80033c2:	e005      	b.n	80033d0 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	3301      	adds	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d902      	bls.n	80033ee <ETH_UpdateDescriptor+0xa2>
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	3b04      	subs	r3, #4
 80033ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	3212      	adds	r2, #18
 80033f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f8:	617b      	str	r3, [r7, #20]
      desccount--;
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <ETH_UpdateDescriptor+0xc0>
 8003406:	7cfb      	ldrb	r3, [r7, #19]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1b4      	bne.n	8003376 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	429a      	cmp	r2, r3
 8003414:	d01a      	beq.n	800344c <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3301      	adds	r3, #1
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003420:	f3bf 8f5f 	dmb	sy
}
 8003424:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6919      	ldr	r1, [r3, #16]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	18ca      	adds	r2, r1, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800343e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800344c:	bf00      	nop
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 031c 	and.w	r3, r3, #28
 8003470:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	02db      	lsls	r3, r3, #11
 8003476:	b29b      	uxth	r3, r3
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0302 	bic.w	r3, r3, #2
 8003492:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80034a4:	f7fe fc04 	bl	8001cb0 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034aa:	e00d      	b.n	80034c8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80034ac:	f7fe fc00 	bl	8001cb0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ba:	d301      	bcc.n	80034c0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e010      	b.n	80034e2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ec      	bne.n	80034ac <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 031c 	and.w	r3, r3, #28
 8003506:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	02db      	lsls	r3, r3, #11
 800350c:	b29b      	uxth	r3, r3
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	019b      	lsls	r3, r3, #6
 8003518:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003544:	f7fe fbb4 	bl	8001cb0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800354a:	e00d      	b.n	8003568 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800354c:	f7fe fbb0 	bl	8001cb0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355a:	d301      	bcc.n	8003560 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e009      	b.n	8003574 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ec      	bne.n	800354c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0e6      	b.n	800375e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf0c      	ite	eq
 80035c8:	2301      	moveq	r3, #1
 80035ca:	2300      	movne	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf14      	ite	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	2300      	moveq	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b29a      	uxth	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e00b      	b.n	8003796 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003784:	2b10      	cmp	r3, #16
 8003786:	d105      	bne.n	8003794 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003788:	6839      	ldr	r1, [r7, #0]
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f870 	bl	8003870 <ETH_SetMACConfig>

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 031c 	bic.w	r3, r3, #28
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80037b8:	f001 fad0 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 80037bc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <HAL_ETH_SetMDIOClockRange+0x74>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d804      	bhi.n	80037d0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e019      	b.n	8003804 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4a11      	ldr	r2, [pc, #68]	@ (8003818 <HAL_ETH_SetMDIOClockRange+0x78>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d204      	bcs.n	80037e2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f043 030c 	orr.w	r3, r3, #12
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e010      	b.n	8003804 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <HAL_ETH_SetMDIOClockRange+0x7c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d90c      	bls.n	8003804 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003820 <HAL_ETH_SetMDIOClockRange+0x80>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d804      	bhi.n	80037fc <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e003      	b.n	8003804 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f043 0310 	orr.w	r3, r3, #16
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	611a      	str	r2, [r3, #16]
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	02160ebf 	.word	0x02160ebf
 8003818:	03938700 	.word	0x03938700
 800381c:	05f5e0ff 	.word	0x05f5e0ff
 8003820:	08f0d17f 	.word	0x08f0d17f

08003824 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003842:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003846:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003854:	2001      	movs	r0, #1
 8003856:	f7fe fa37 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003864:	6193      	str	r3, [r2, #24]
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <ETH_SetMACConfig+0x164>)
 8003886:	4013      	ands	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	7b9b      	ldrb	r3, [r3, #14]
 800388e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	7c12      	ldrb	r2, [r2, #16]
 8003894:	2a00      	cmp	r2, #0
 8003896:	d102      	bne.n	800389e <ETH_SetMACConfig+0x2e>
 8003898:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800389c:	e000      	b.n	80038a0 <ETH_SetMACConfig+0x30>
 800389e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80038a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	7c52      	ldrb	r2, [r2, #17]
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d102      	bne.n	80038b0 <ETH_SetMACConfig+0x40>
 80038aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80038ae:	e000      	b.n	80038b2 <ETH_SetMACConfig+0x42>
 80038b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	7fdb      	ldrb	r3, [r3, #31]
 80038be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80038c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	7f92      	ldrb	r2, [r2, #30]
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	d102      	bne.n	80038d6 <ETH_SetMACConfig+0x66>
 80038d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80038d4:	e000      	b.n	80038d8 <ETH_SetMACConfig+0x68>
 80038d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80038d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	7f1b      	ldrb	r3, [r3, #28]
 80038de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80038e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80038ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	d102      	bne.n	8003900 <ETH_SetMACConfig+0x90>
 80038fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038fe:	e000      	b.n	8003902 <ETH_SetMACConfig+0x92>
 8003900:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003902:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	7bdb      	ldrb	r3, [r3, #15]
 8003908:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800390a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003910:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003918:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800391a:	4313      	orrs	r3, r2
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003932:	2001      	movs	r0, #1
 8003934:	f7fe f9c8 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800394e:	4013      	ands	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003956:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800395e:	2a00      	cmp	r2, #0
 8003960:	d101      	bne.n	8003966 <ETH_SetMACConfig+0xf6>
 8003962:	2280      	movs	r2, #128	@ 0x80
 8003964:	e000      	b.n	8003968 <ETH_SetMACConfig+0xf8>
 8003966:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003968:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800396e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003976:	2a01      	cmp	r2, #1
 8003978:	d101      	bne.n	800397e <ETH_SetMACConfig+0x10e>
 800397a:	2208      	movs	r2, #8
 800397c:	e000      	b.n	8003980 <ETH_SetMACConfig+0x110>
 800397e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003980:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003988:	2a01      	cmp	r2, #1
 800398a:	d101      	bne.n	8003990 <ETH_SetMACConfig+0x120>
 800398c:	2204      	movs	r2, #4
 800398e:	e000      	b.n	8003992 <ETH_SetMACConfig+0x122>
 8003990:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003992:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800399a:	2a01      	cmp	r2, #1
 800399c:	d101      	bne.n	80039a2 <ETH_SetMACConfig+0x132>
 800399e:	2202      	movs	r2, #2
 80039a0:	e000      	b.n	80039a4 <ETH_SetMACConfig+0x134>
 80039a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039a4:	4313      	orrs	r3, r2
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039bc:	2001      	movs	r0, #1
 80039be:	f7fe f983 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	619a      	str	r2, [r3, #24]
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	fd20810f 	.word	0xfd20810f

080039d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae8 <ETH_SetDMAConfig+0x110>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	7b1b      	ldrb	r3, [r3, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <ETH_SetDMAConfig+0x2c>
 80039fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a02:	e000      	b.n	8003a06 <ETH_SetDMAConfig+0x2e>
 8003a04:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	7b5b      	ldrb	r3, [r3, #13]
 8003a0a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a0c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	7f52      	ldrb	r2, [r2, #29]
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	d102      	bne.n	8003a1c <ETH_SetDMAConfig+0x44>
 8003a16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a1a:	e000      	b.n	8003a1e <ETH_SetDMAConfig+0x46>
 8003a1c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	7b9b      	ldrb	r3, [r3, #14]
 8003a24:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a26:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	7f1b      	ldrb	r3, [r3, #28]
 8003a32:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	7f9b      	ldrb	r3, [r3, #30]
 8003a3a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a3c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a4a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f7fe f92a 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	791b      	ldrb	r3, [r3, #4]
 8003a86:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003a8c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003a92:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003a98:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aa0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003aa2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003aaa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ab0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003abe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003acc:	2001      	movs	r0, #1
 8003ace:	f7fe f8fb 	bl	8001cc8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ada:	461a      	mov	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	f8de3f23 	.word	0xf8de3f23

08003aec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b0a6      	sub	sp, #152	@ 0x98
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b00:	2300      	movs	r3, #0
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b66:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fe7f 	bl	8003870 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b72:	2301      	movs	r3, #1
 8003b74:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b76:	2301      	movs	r3, #1
 8003b78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ba6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ba8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bb2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003bc2:	f107 0308 	add.w	r3, r7, #8
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff05 	bl	80039d8 <ETH_SetDMAConfig>
}
 8003bce:	bf00      	nop
 8003bd0:	3798      	adds	r7, #152	@ 0x98
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3305      	adds	r3, #5
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	3204      	adds	r2, #4
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4b11      	ldr	r3, [pc, #68]	@ (8003c40 <ETH_MACAddressConfig+0x68>)
 8003bfa:	4413      	add	r3, r2
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3303      	adds	r3, #3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	061a      	lsls	r2, r3, #24
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3301      	adds	r3, #1
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <ETH_MACAddressConfig+0x6c>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	6013      	str	r3, [r2, #0]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40028040 	.word	0x40028040
 8003c44:	40028044 	.word	0x40028044

08003c48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e03e      	b.n	8003cd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68d9      	ldr	r1, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	3206      	adds	r2, #6
 8003c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d80c      	bhi.n	8003cb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68d9      	ldr	r1, [r3, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	e004      	b.n	8003cc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d9bd      	bls.n	8003c56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cec:	611a      	str	r2, [r3, #16]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e048      	b.n	8003d9a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6919      	ldr	r1, [r3, #16]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	440b      	add	r3, r1
 8003d18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2200      	movs	r2, #0
 8003d36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003d44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	3212      	adds	r2, #18
 8003d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d80c      	bhi.n	8003d8a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6919      	ldr	r1, [r3, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e004      	b.n	8003d94 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d9b3      	bls.n	8003d08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dca:	60da      	str	r2, [r3, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b091      	sub	sp, #68	@ 0x44
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3318      	adds	r3, #24
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e1a:	d007      	beq.n	8003e2c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e20:	3304      	adds	r3, #4
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e115      	b.n	800405c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e32:	3301      	adds	r3, #1
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003e48:	f023 031f 	bic.w	r3, r3, #31
 8003e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4e:	6852      	ldr	r2, [r2, #4]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003eb6:	e084      	b.n	8003fc2 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e005      	b.n	8003ee4 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d902      	bls.n	8003ef6 <ETH_Prepare_Tx_Descriptors+0x11e>
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef2:	3b04      	subs	r3, #4
 8003ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f0c:	d007      	beq.n	8003f1e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f12:	3304      	adds	r3, #4
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d029      	beq.n	8003f72 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f30:	e019      	b.n	8003f66 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003f32:	f3bf 8f5f 	dmb	sy
}
 8003f36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f46:	3301      	adds	r3, #1
 8003f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d902      	bls.n	8003f56 <ETH_Prepare_Tx_Descriptors+0x17e>
 8003f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f52:	3b04      	subs	r3, #4
 8003f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f5e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f62:	3301      	adds	r3, #1
 8003f64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3e1      	bcc.n	8003f32 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e074      	b.n	800405c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	3301      	adds	r3, #1
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003f9c:	f023 031f 	bic.w	r3, r3, #31
 8003fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa2:	6852      	ldr	r2, [r2, #4]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fac:	3301      	adds	r3, #1
 8003fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003fb0:	f3bf 8f5f 	dmb	sy
}
 8003fb4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f47f af76 	bne.w	8003eb8 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e005      	b.n	8003fec <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004000:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8004002:	f3bf 8f5f 	dmb	sy
}
 8004006:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800401a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401c:	3304      	adds	r3, #4
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004028:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800402a:	f3ef 8310 	mrs	r3, PRIMASK
 800402e:	613b      	str	r3, [r7, #16]
  return(result);
 8004030:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f383 8810 	msr	PRIMASK, r3
}
 800403e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	4413      	add	r3, r2
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3744      	adds	r7, #68	@ 0x44
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	@ 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e177      	b.n	8004374 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	f040 8166 	bne.w	800436e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d005      	beq.n	80040ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d130      	bne.n	800411c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d017      	beq.n	8004158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d123      	bne.n	80041ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80c0 	beq.w	800436e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b66      	ldr	r3, [pc, #408]	@ (800438c <HAL_GPIO_Init+0x324>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	4a65      	ldr	r2, [pc, #404]	@ (800438c <HAL_GPIO_Init+0x324>)
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041fe:	4b63      	ldr	r3, [pc, #396]	@ (800438c <HAL_GPIO_Init+0x324>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800420a:	4a61      	ldr	r2, [pc, #388]	@ (8004390 <HAL_GPIO_Init+0x328>)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a58      	ldr	r2, [pc, #352]	@ (8004394 <HAL_GPIO_Init+0x32c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d037      	beq.n	80042a6 <HAL_GPIO_Init+0x23e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a57      	ldr	r2, [pc, #348]	@ (8004398 <HAL_GPIO_Init+0x330>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d031      	beq.n	80042a2 <HAL_GPIO_Init+0x23a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a56      	ldr	r2, [pc, #344]	@ (800439c <HAL_GPIO_Init+0x334>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <HAL_GPIO_Init+0x236>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a55      	ldr	r2, [pc, #340]	@ (80043a0 <HAL_GPIO_Init+0x338>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d025      	beq.n	800429a <HAL_GPIO_Init+0x232>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a54      	ldr	r2, [pc, #336]	@ (80043a4 <HAL_GPIO_Init+0x33c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <HAL_GPIO_Init+0x22e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a53      	ldr	r2, [pc, #332]	@ (80043a8 <HAL_GPIO_Init+0x340>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d019      	beq.n	8004292 <HAL_GPIO_Init+0x22a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a52      	ldr	r2, [pc, #328]	@ (80043ac <HAL_GPIO_Init+0x344>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d013      	beq.n	800428e <HAL_GPIO_Init+0x226>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a51      	ldr	r2, [pc, #324]	@ (80043b0 <HAL_GPIO_Init+0x348>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00d      	beq.n	800428a <HAL_GPIO_Init+0x222>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a50      	ldr	r2, [pc, #320]	@ (80043b4 <HAL_GPIO_Init+0x34c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <HAL_GPIO_Init+0x21e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4f      	ldr	r2, [pc, #316]	@ (80043b8 <HAL_GPIO_Init+0x350>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d101      	bne.n	8004282 <HAL_GPIO_Init+0x21a>
 800427e:	2309      	movs	r3, #9
 8004280:	e012      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004282:	230a      	movs	r3, #10
 8004284:	e010      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004286:	2308      	movs	r3, #8
 8004288:	e00e      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800428a:	2307      	movs	r3, #7
 800428c:	e00c      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800428e:	2306      	movs	r3, #6
 8004290:	e00a      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004292:	2305      	movs	r3, #5
 8004294:	e008      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 8004296:	2304      	movs	r3, #4
 8004298:	e006      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800429a:	2303      	movs	r3, #3
 800429c:	e004      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 800429e:	2302      	movs	r3, #2
 80042a0:	e002      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_GPIO_Init+0x240>
 80042a6:	2300      	movs	r3, #0
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	f002 0203 	and.w	r2, r2, #3
 80042ae:	0092      	lsls	r2, r2, #2
 80042b0:	4093      	lsls	r3, r2
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b8:	4935      	ldr	r1, [pc, #212]	@ (8004390 <HAL_GPIO_Init+0x328>)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <HAL_GPIO_Init+0x354>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4013      	ands	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ea:	4a34      	ldr	r2, [pc, #208]	@ (80043bc <HAL_GPIO_Init+0x354>)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042f0:	4b32      	ldr	r3, [pc, #200]	@ (80043bc <HAL_GPIO_Init+0x354>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004314:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <HAL_GPIO_Init+0x354>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800431a:	4b28      	ldr	r3, [pc, #160]	@ (80043bc <HAL_GPIO_Init+0x354>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800433e:	4a1f      	ldr	r2, [pc, #124]	@ (80043bc <HAL_GPIO_Init+0x354>)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <HAL_GPIO_Init+0x354>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	43db      	mvns	r3, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4013      	ands	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004368:	4a14      	ldr	r2, [pc, #80]	@ (80043bc <HAL_GPIO_Init+0x354>)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3301      	adds	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	f67f ae84 	bls.w	8004084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	3724      	adds	r7, #36	@ 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40023800 	.word	0x40023800
 8004390:	40013800 	.word	0x40013800
 8004394:	40020000 	.word	0x40020000
 8004398:	40020400 	.word	0x40020400
 800439c:	40020800 	.word	0x40020800
 80043a0:	40020c00 	.word	0x40020c00
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40021400 	.word	0x40021400
 80043ac:	40021800 	.word	0x40021800
 80043b0:	40021c00 	.word	0x40021c00
 80043b4:	40022000 	.word	0x40022000
 80043b8:	40022400 	.word	0x40022400
 80043bc:	40013c00 	.word	0x40013c00

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043dc:	e003      	b.n	80043e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	041a      	lsls	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4b20      	ldr	r3, [pc, #128]	@ (8004484 <HAL_PWREx_EnableOverDrive+0x90>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	4a1f      	ldr	r2, [pc, #124]	@ (8004484 <HAL_PWREx_EnableOverDrive+0x90>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6413      	str	r3, [r2, #64]	@ 0x40
 800440e:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <HAL_PWREx_EnableOverDrive+0x90>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800441a:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <HAL_PWREx_EnableOverDrive+0x94>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004420:	f7fd fc46 	bl	8001cb0 <HAL_GetTick>
 8004424:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004426:	e009      	b.n	800443c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004428:	f7fd fc42 	bl	8001cb0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004436:	d901      	bls.n	800443c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e01f      	b.n	800447c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d1ee      	bne.n	8004428 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800444a:	4b11      	ldr	r3, [pc, #68]	@ (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004450:	f7fd fc2e 	bl	8001cb0 <HAL_GetTick>
 8004454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004456:	e009      	b.n	800446c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004458:	f7fd fc2a 	bl	8001cb0 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004466:	d901      	bls.n	800446c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e007      	b.n	800447c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800446c:	4b07      	ldr	r3, [pc, #28]	@ (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004478:	d1ee      	bne.n	8004458 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	420e0040 	.word	0x420e0040
 800448c:	40007000 	.word	0x40007000
 8004490:	420e0044 	.word	0x420e0044

08004494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e267      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d075      	beq.n	800459e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044b2:	4b88      	ldr	r3, [pc, #544]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d00c      	beq.n	80044d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044be:	4b85      	ldr	r3, [pc, #532]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d112      	bne.n	80044f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ca:	4b82      	ldr	r3, [pc, #520]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d6:	d10b      	bne.n	80044f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d8:	4b7e      	ldr	r3, [pc, #504]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d05b      	beq.n	800459c <HAL_RCC_OscConfig+0x108>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d157      	bne.n	800459c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e242      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_OscConfig+0x74>
 80044fa:	4b76      	ldr	r3, [pc, #472]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a75      	ldr	r2, [pc, #468]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e01d      	b.n	8004544 <HAL_RCC_OscConfig+0xb0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x98>
 8004512:	4b70      	ldr	r3, [pc, #448]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6f      	ldr	r2, [pc, #444]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b6d      	ldr	r3, [pc, #436]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6c      	ldr	r2, [pc, #432]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e00b      	b.n	8004544 <HAL_RCC_OscConfig+0xb0>
 800452c:	4b69      	ldr	r3, [pc, #420]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a68      	ldr	r2, [pc, #416]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b66      	ldr	r3, [pc, #408]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a65      	ldr	r2, [pc, #404]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 800453e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d013      	beq.n	8004574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fd fbb0 	bl	8001cb0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fd fbac 	bl	8001cb0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e207      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	4b5b      	ldr	r3, [pc, #364]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f0      	beq.n	8004554 <HAL_RCC_OscConfig+0xc0>
 8004572:	e014      	b.n	800459e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fd fb9c 	bl	8001cb0 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fd fb98 	bl	8001cb0 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	@ 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e1f3      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	4b51      	ldr	r3, [pc, #324]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0xe8>
 800459a:	e000      	b.n	800459e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d063      	beq.n	8004672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045aa:	4b4a      	ldr	r3, [pc, #296]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b6:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d11c      	bne.n	80045fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c2:	4b44      	ldr	r3, [pc, #272]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ce:	4b41      	ldr	r3, [pc, #260]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_RCC_OscConfig+0x152>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d001      	beq.n	80045e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e1c7      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e6:	4b3b      	ldr	r3, [pc, #236]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4937      	ldr	r1, [pc, #220]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	e03a      	b.n	8004672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d020      	beq.n	8004646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004604:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <HAL_RCC_OscConfig+0x244>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fd fb51 	bl	8001cb0 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004612:	f7fd fb4d 	bl	8001cb0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e1a8      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004624:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004630:	4b28      	ldr	r3, [pc, #160]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4925      	ldr	r1, [pc, #148]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
 8004644:	e015      	b.n	8004672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_RCC_OscConfig+0x244>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fd fb30 	bl	8001cb0 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fd fb2c 	bl	8001cb0 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e187      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d036      	beq.n	80046ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004686:	4b15      	ldr	r3, [pc, #84]	@ (80046dc <HAL_RCC_OscConfig+0x248>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468c:	f7fd fb10 	bl	8001cb0 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004694:	f7fd fb0c 	bl	8001cb0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e167      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a6:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <HAL_RCC_OscConfig+0x240>)
 80046a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x200>
 80046b2:	e01b      	b.n	80046ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b4:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <HAL_RCC_OscConfig+0x248>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ba:	f7fd faf9 	bl	8001cb0 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	e00e      	b.n	80046e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fd faf5 	bl	8001cb0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d907      	bls.n	80046e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e150      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
 80046d4:	40023800 	.word	0x40023800
 80046d8:	42470000 	.word	0x42470000
 80046dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	4b88      	ldr	r3, [pc, #544]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ea      	bne.n	80046c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8097 	beq.w	8004828 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fa:	2300      	movs	r3, #0
 80046fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b81      	ldr	r3, [pc, #516]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	4b7d      	ldr	r3, [pc, #500]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	4a7c      	ldr	r2, [pc, #496]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004718:	6413      	str	r3, [r2, #64]	@ 0x40
 800471a:	4b7a      	ldr	r3, [pc, #488]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472a:	4b77      	ldr	r3, [pc, #476]	@ (8004908 <HAL_RCC_OscConfig+0x474>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d118      	bne.n	8004768 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004736:	4b74      	ldr	r3, [pc, #464]	@ (8004908 <HAL_RCC_OscConfig+0x474>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a73      	ldr	r2, [pc, #460]	@ (8004908 <HAL_RCC_OscConfig+0x474>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7fd fab5 	bl	8001cb0 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7fd fab1 	bl	8001cb0 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e10c      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	4b6a      	ldr	r3, [pc, #424]	@ (8004908 <HAL_RCC_OscConfig+0x474>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x2ea>
 8004770:	4b64      	ldr	r3, [pc, #400]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004774:	4a63      	ldr	r2, [pc, #396]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6713      	str	r3, [r2, #112]	@ 0x70
 800477c:	e01c      	b.n	80047b8 <HAL_RCC_OscConfig+0x324>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b05      	cmp	r3, #5
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x30c>
 8004786:	4b5f      	ldr	r3, [pc, #380]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	4a5e      	ldr	r2, [pc, #376]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	6713      	str	r3, [r2, #112]	@ 0x70
 8004792:	4b5c      	ldr	r3, [pc, #368]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	4a5b      	ldr	r2, [pc, #364]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6713      	str	r3, [r2, #112]	@ 0x70
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0x324>
 80047a0:	4b58      	ldr	r3, [pc, #352]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a4:	4a57      	ldr	r2, [pc, #348]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ac:	4b55      	ldr	r3, [pc, #340]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	4a54      	ldr	r2, [pc, #336]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80047b2:	f023 0304 	bic.w	r3, r3, #4
 80047b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd fa76 	bl	8001cb0 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	e00a      	b.n	80047de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c8:	f7fd fa72 	bl	8001cb0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e0cb      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047de:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0ee      	beq.n	80047c8 <HAL_RCC_OscConfig+0x334>
 80047ea:	e014      	b.n	8004816 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ec:	f7fd fa60 	bl	8001cb0 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fd fa5c 	bl	8001cb0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0b5      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480a:	4b3e      	ldr	r3, [pc, #248]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1ee      	bne.n	80047f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004816:	7dfb      	ldrb	r3, [r7, #23]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d105      	bne.n	8004828 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481c:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	4a38      	ldr	r2, [pc, #224]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004826:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80a1 	beq.w	8004974 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004832:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b08      	cmp	r3, #8
 800483c:	d05c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d141      	bne.n	80048ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b31      	ldr	r3, [pc, #196]	@ (800490c <HAL_RCC_OscConfig+0x478>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fd fa30 	bl	8001cb0 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd fa2c 	bl	8001cb0 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e087      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b27      	ldr	r3, [pc, #156]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	061b      	lsls	r3, r3, #24
 8004896:	491b      	ldr	r1, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800489c:	4b1b      	ldr	r3, [pc, #108]	@ (800490c <HAL_RCC_OscConfig+0x478>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fd fa05 	bl	8001cb0 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fd fa01 	bl	8001cb0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e05c      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048bc:	4b11      	ldr	r3, [pc, #68]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x416>
 80048c8:	e054      	b.n	8004974 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b10      	ldr	r3, [pc, #64]	@ (800490c <HAL_RCC_OscConfig+0x478>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd f9ee 	bl	8001cb0 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd f9ea 	bl	8001cb0 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e045      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_RCC_OscConfig+0x470>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x444>
 80048f6:	e03d      	b.n	8004974 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e038      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
 8004904:	40023800 	.word	0x40023800
 8004908:	40007000 	.word	0x40007000
 800490c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCC_OscConfig+0x4ec>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d028      	beq.n	8004970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d121      	bne.n	8004970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d11a      	bne.n	8004970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004948:	4293      	cmp	r3, r2
 800494a:	d111      	bne.n	8004970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	3b01      	subs	r3, #1
 800495a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d107      	bne.n	8004970 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800

08004984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0cc      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004998:	4b68      	ldr	r3, [pc, #416]	@ (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d90c      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b65      	ldr	r3, [pc, #404]	@ (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b63      	ldr	r3, [pc, #396]	@ (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0b8      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d8:	4b59      	ldr	r3, [pc, #356]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a58      	ldr	r2, [pc, #352]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f0:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049fc:	4b50      	ldr	r3, [pc, #320]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	494d      	ldr	r1, [pc, #308]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d044      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a22:	4b47      	ldr	r3, [pc, #284]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d119      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e07f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a42:	4b3f      	ldr	r3, [pc, #252]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e06f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b3b      	ldr	r3, [pc, #236]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e067      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a62:	4b37      	ldr	r3, [pc, #220]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4934      	ldr	r1, [pc, #208]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a74:	f7fd f91c 	bl	8001cb0 <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a7c:	f7fd f918 	bl	8001cb0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e04f      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a92:	4b2b      	ldr	r3, [pc, #172]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 020c 	and.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1eb      	bne.n	8004a7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b25      	ldr	r3, [pc, #148]	@ (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d20c      	bcs.n	8004acc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b22      	ldr	r3, [pc, #136]	@ (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <HAL_RCC_ClockConfig+0x1b8>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e032      	b.n	8004b32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad8:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4916      	ldr	r1, [pc, #88]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	490e      	ldr	r1, [pc, #56]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b0a:	f000 f821 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	4b0b      	ldr	r3, [pc, #44]	@ (8004b40 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	091b      	lsrs	r3, r3, #4
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	490a      	ldr	r1, [pc, #40]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c0>)
 8004b1c:	5ccb      	ldrb	r3, [r1, r3]
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	4a09      	ldr	r2, [pc, #36]	@ (8004b48 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b26:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd f87c 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023c00 	.word	0x40023c00
 8004b40:	40023800 	.word	0x40023800
 8004b44:	080153c4 	.word	0x080153c4
 8004b48:	20000000 	.word	0x20000000
 8004b4c:	20000004 	.word	0x20000004

08004b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b094      	sub	sp, #80	@ 0x50
 8004b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b68:	4b79      	ldr	r3, [pc, #484]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d00d      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x40>
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	f200 80e1 	bhi.w	8004d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x34>
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b82:	e0db      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b84:	4b73      	ldr	r3, [pc, #460]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b88:	e0db      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b8a:	4b73      	ldr	r3, [pc, #460]	@ (8004d58 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b8e:	e0d8      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b90:	4b6f      	ldr	r3, [pc, #444]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d063      	beq.n	8004c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	2200      	movs	r2, #0
 8004bae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bba:	2300      	movs	r3, #0
 8004bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	462b      	mov	r3, r5
 8004bc6:	f04f 0000 	mov.w	r0, #0
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	0159      	lsls	r1, r3, #5
 8004bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd4:	0150      	lsls	r0, r2, #5
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4621      	mov	r1, r4
 8004bdc:	1a51      	subs	r1, r2, r1
 8004bde:	6139      	str	r1, [r7, #16]
 8004be0:	4629      	mov	r1, r5
 8004be2:	eb63 0301 	sbc.w	r3, r3, r1
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	018b      	lsls	r3, r1, #6
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bfe:	4651      	mov	r1, sl
 8004c00:	018a      	lsls	r2, r1, #6
 8004c02:	4651      	mov	r1, sl
 8004c04:	ebb2 0801 	subs.w	r8, r2, r1
 8004c08:	4659      	mov	r1, fp
 8004c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c22:	4690      	mov	r8, r2
 8004c24:	4699      	mov	r9, r3
 8004c26:	4623      	mov	r3, r4
 8004c28:	eb18 0303 	adds.w	r3, r8, r3
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	462b      	mov	r3, r5
 8004c30:	eb49 0303 	adc.w	r3, r9, r3
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c42:	4629      	mov	r1, r5
 8004c44:	024b      	lsls	r3, r1, #9
 8004c46:	4621      	mov	r1, r4
 8004c48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	024a      	lsls	r2, r1, #9
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c56:	2200      	movs	r2, #0
 8004c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c60:	f7fb fb16 	bl	8000290 <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c6c:	e058      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6e:	4b38      	ldr	r3, [pc, #224]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	099b      	lsrs	r3, r3, #6
 8004c74:	2200      	movs	r2, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	4611      	mov	r1, r2
 8004c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	2300      	movs	r3, #0
 8004c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	f04f 0000 	mov.w	r0, #0
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c9a:	0150      	lsls	r0, r2, #5
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	00eb      	lsls	r3, r5, #3
 8004cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd6:	00e2      	lsls	r2, r4, #3
 8004cd8:	4614      	mov	r4, r2
 8004cda:	461d      	mov	r5, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	18e3      	adds	r3, r4, r3
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	eb45 0303 	adc.w	r3, r5, r3
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	028b      	lsls	r3, r1, #10
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d00:	4621      	mov	r1, r4
 8004d02:	028a      	lsls	r2, r1, #10
 8004d04:	4610      	mov	r0, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	61fa      	str	r2, [r7, #28]
 8004d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d14:	f7fb fabc 	bl	8000290 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d3a:	e002      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3750      	adds	r7, #80	@ 0x50
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023800 	.word	0x40023800
 8004d54:	00f42400 	.word	0x00f42400
 8004d58:	007a1200 	.word	0x007a1200

08004d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d60:	4b03      	ldr	r3, [pc, #12]	@ (8004d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000000 	.word	0x20000000

08004d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d78:	f7ff fff0 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0a9b      	lsrs	r3, r3, #10
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4903      	ldr	r1, [pc, #12]	@ (8004d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	080153d4 	.word	0x080153d4

08004d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004da0:	f7ff ffdc 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0b5b      	lsrs	r3, r3, #13
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4903      	ldr	r1, [pc, #12]	@ (8004dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	080153d4 	.word	0x080153d4

08004dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e041      	b.n	8004e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fb fef4 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f000 fbf0 	bl	80055e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e041      	b.n	8004ef8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f839 	bl	8004f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fba1 	bl	80055e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_TIM_PWM_Start+0x24>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	e022      	b.n	8004f7e <HAL_TIM_PWM_Start+0x6a>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d109      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x3e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	bf14      	ite	ne
 8004f4a:	2301      	movne	r3, #1
 8004f4c:	2300      	moveq	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	e015      	b.n	8004f7e <HAL_TIM_PWM_Start+0x6a>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d109      	bne.n	8004f6c <HAL_TIM_PWM_Start+0x58>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	bf14      	ite	ne
 8004f64:	2301      	movne	r3, #1
 8004f66:	2300      	moveq	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	e008      	b.n	8004f7e <HAL_TIM_PWM_Start+0x6a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07c      	b.n	8005080 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x82>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f94:	e013      	b.n	8004fbe <HAL_TIM_PWM_Start+0xaa>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start+0x92>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa4:	e00b      	b.n	8004fbe <HAL_TIM_PWM_Start+0xaa>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start+0xa2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb4:	e003      	b.n	8004fbe <HAL_TIM_PWM_Start+0xaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fe04 	bl	8005bd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005088 <HAL_TIM_PWM_Start+0x174>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <HAL_TIM_PWM_Start+0xcc>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2c      	ldr	r2, [pc, #176]	@ (800508c <HAL_TIM_PWM_Start+0x178>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIM_PWM_Start+0xd0>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xd2>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	@ (8005088 <HAL_TIM_PWM_Start+0x174>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d022      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800500c:	d01d      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1f      	ldr	r2, [pc, #124]	@ (8005090 <HAL_TIM_PWM_Start+0x17c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <HAL_TIM_PWM_Start+0x180>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d013      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1c      	ldr	r2, [pc, #112]	@ (8005098 <HAL_TIM_PWM_Start+0x184>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a16      	ldr	r2, [pc, #88]	@ (800508c <HAL_TIM_PWM_Start+0x178>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <HAL_TIM_PWM_Start+0x188>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_TIM_PWM_Start+0x136>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_TIM_PWM_Start+0x18c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d111      	bne.n	800506e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b06      	cmp	r3, #6
 800505a:	d010      	beq.n	800507e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506c:	e007      	b.n	800507e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 0201 	orr.w	r2, r2, #1
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40010000 	.word	0x40010000
 800508c:	40010400 	.word	0x40010400
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40014000 	.word	0x40014000
 80050a0:	40001800 	.word	0x40001800

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01b      	beq.n	8005108 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0202 	mvn.w	r2, #2
 80050d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa5b 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 80050f4:	e005      	b.n	8005102 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa4d 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa5e 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 fa35 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa27 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa38 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0208 	mvn.w	r2, #8
 8005170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2204      	movs	r2, #4
 8005176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa0f 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa01 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa12 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2208      	movs	r2, #8
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f9e9 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9db 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f9ec 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00c      	beq.n	8005210 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0201 	mvn.w	r2, #1
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc fa52 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d007      	beq.n	8005234 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800522c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fdce 	bl	8005dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d007      	beq.n	8005258 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9bd 	bl	80055d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0220 	mvn.w	r2, #32
 8005274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fda0 	bl	8005dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0ae      	b.n	8005400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b0c      	cmp	r3, #12
 80052ae:	f200 809f 	bhi.w	80053f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052b2:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052ed 	.word	0x080052ed
 80052bc:	080053f1 	.word	0x080053f1
 80052c0:	080053f1 	.word	0x080053f1
 80052c4:	080053f1 	.word	0x080053f1
 80052c8:	0800532d 	.word	0x0800532d
 80052cc:	080053f1 	.word	0x080053f1
 80052d0:	080053f1 	.word	0x080053f1
 80052d4:	080053f1 	.word	0x080053f1
 80052d8:	0800536f 	.word	0x0800536f
 80052dc:	080053f1 	.word	0x080053f1
 80052e0:	080053f1 	.word	0x080053f1
 80052e4:	080053f1 	.word	0x080053f1
 80052e8:	080053af 	.word	0x080053af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fa24 	bl	8005740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0208 	orr.w	r2, r2, #8
 8005306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0204 	bic.w	r2, r2, #4
 8005316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6999      	ldr	r1, [r3, #24]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	619a      	str	r2, [r3, #24]
      break;
 800532a:	e064      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fa74 	bl	8005820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6999      	ldr	r1, [r3, #24]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	619a      	str	r2, [r3, #24]
      break;
 800536c:	e043      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	4618      	mov	r0, r3
 8005376:	f000 fac9 	bl	800590c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69da      	ldr	r2, [r3, #28]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 0208 	orr.w	r2, r2, #8
 8005388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0204 	bic.w	r2, r2, #4
 8005398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69d9      	ldr	r1, [r3, #28]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	61da      	str	r2, [r3, #28]
      break;
 80053ac:	e023      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fb1d 	bl	80059f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69da      	ldr	r2, [r3, #28]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69d9      	ldr	r1, [r3, #28]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	021a      	lsls	r2, r3, #8
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	61da      	str	r2, [r3, #28]
      break;
 80053ee:	e002      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	75fb      	strb	r3, [r7, #23]
      break;
 80053f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIM_ConfigClockSource+0x1c>
 8005420:	2302      	movs	r3, #2
 8005422:	e0b4      	b.n	800558e <HAL_TIM_ConfigClockSource+0x186>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800544a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800545c:	d03e      	beq.n	80054dc <HAL_TIM_ConfigClockSource+0xd4>
 800545e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005462:	f200 8087 	bhi.w	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546a:	f000 8086 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x172>
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005472:	d87f      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b70      	cmp	r3, #112	@ 0x70
 8005476:	d01a      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0xa6>
 8005478:	2b70      	cmp	r3, #112	@ 0x70
 800547a:	d87b      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b60      	cmp	r3, #96	@ 0x60
 800547e:	d050      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x11a>
 8005480:	2b60      	cmp	r3, #96	@ 0x60
 8005482:	d877      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b50      	cmp	r3, #80	@ 0x50
 8005486:	d03c      	beq.n	8005502 <HAL_TIM_ConfigClockSource+0xfa>
 8005488:	2b50      	cmp	r3, #80	@ 0x50
 800548a:	d873      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b40      	cmp	r3, #64	@ 0x40
 800548e:	d058      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x13a>
 8005490:	2b40      	cmp	r3, #64	@ 0x40
 8005492:	d86f      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b30      	cmp	r3, #48	@ 0x30
 8005496:	d064      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 8005498:	2b30      	cmp	r3, #48	@ 0x30
 800549a:	d86b      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b20      	cmp	r3, #32
 800549e:	d060      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d867      	bhi.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d05a      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x15a>
 80054ac:	e062      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054be:	f000 fb69 	bl	8005b94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	609a      	str	r2, [r3, #8]
      break;
 80054da:	e04f      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ec:	f000 fb52 	bl	8005b94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054fe:	609a      	str	r2, [r3, #8]
      break;
 8005500:	e03c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	461a      	mov	r2, r3
 8005510:	f000 fac6 	bl	8005aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2150      	movs	r1, #80	@ 0x50
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fb1f 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 8005520:	e02c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fae5 	bl	8005afe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2160      	movs	r1, #96	@ 0x60
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fb0f 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 8005540:	e01c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	461a      	mov	r2, r3
 8005550:	f000 faa6 	bl	8005aa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2140      	movs	r1, #64	@ 0x40
 800555a:	4618      	mov	r0, r3
 800555c:	f000 faff 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 8005560:	e00c      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f000 faf6 	bl	8005b5e <TIM_ITRx_SetConfig>
      break;
 8005572:	e003      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
      break;
 8005578:	e000      	b.n	800557c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800557a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a46      	ldr	r2, [pc, #280]	@ (8005714 <TIM_Base_SetConfig+0x12c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005606:	d00f      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a43      	ldr	r2, [pc, #268]	@ (8005718 <TIM_Base_SetConfig+0x130>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a42      	ldr	r2, [pc, #264]	@ (800571c <TIM_Base_SetConfig+0x134>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a41      	ldr	r2, [pc, #260]	@ (8005720 <TIM_Base_SetConfig+0x138>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a40      	ldr	r2, [pc, #256]	@ (8005724 <TIM_Base_SetConfig+0x13c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a35      	ldr	r2, [pc, #212]	@ (8005714 <TIM_Base_SetConfig+0x12c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02b      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005648:	d027      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a32      	ldr	r2, [pc, #200]	@ (8005718 <TIM_Base_SetConfig+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d023      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a31      	ldr	r2, [pc, #196]	@ (800571c <TIM_Base_SetConfig+0x134>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01f      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a30      	ldr	r2, [pc, #192]	@ (8005720 <TIM_Base_SetConfig+0x138>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01b      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2f      	ldr	r2, [pc, #188]	@ (8005724 <TIM_Base_SetConfig+0x13c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d017      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2e      	ldr	r2, [pc, #184]	@ (8005728 <TIM_Base_SetConfig+0x140>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2d      	ldr	r2, [pc, #180]	@ (800572c <TIM_Base_SetConfig+0x144>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <TIM_Base_SetConfig+0x148>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00b      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	@ (8005734 <TIM_Base_SetConfig+0x14c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	@ (8005738 <TIM_Base_SetConfig+0x150>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	@ (800573c <TIM_Base_SetConfig+0x154>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d108      	bne.n	80056ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a10      	ldr	r2, [pc, #64]	@ (8005714 <TIM_Base_SetConfig+0x12c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0xf8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a12      	ldr	r2, [pc, #72]	@ (8005724 <TIM_Base_SetConfig+0x13c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d105      	bne.n	8005706 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]
  }
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40010400 	.word	0x40010400
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400
 8005730:	40014800 	.word	0x40014800
 8005734:	40001800 	.word	0x40001800
 8005738:	40001c00 	.word	0x40001c00
 800573c:	40002000 	.word	0x40002000

08005740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f023 0201 	bic.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 0302 	bic.w	r3, r3, #2
 8005788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a20      	ldr	r2, [pc, #128]	@ (8005818 <TIM_OC1_SetConfig+0xd8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC1_SetConfig+0x64>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <TIM_OC1_SetConfig+0xdc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d10c      	bne.n	80057be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0308 	bic.w	r3, r3, #8
 80057aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f023 0304 	bic.w	r3, r3, #4
 80057bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a15      	ldr	r2, [pc, #84]	@ (8005818 <TIM_OC1_SetConfig+0xd8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_OC1_SetConfig+0x8e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a14      	ldr	r2, [pc, #80]	@ (800581c <TIM_OC1_SetConfig+0xdc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d111      	bne.n	80057f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	40010000 	.word	0x40010000
 800581c:	40010400 	.word	0x40010400

08005820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f023 0210 	bic.w	r2, r3, #16
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0320 	bic.w	r3, r3, #32
 800586a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a22      	ldr	r2, [pc, #136]	@ (8005904 <TIM_OC2_SetConfig+0xe4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_OC2_SetConfig+0x68>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a21      	ldr	r2, [pc, #132]	@ (8005908 <TIM_OC2_SetConfig+0xe8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10d      	bne.n	80058a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <TIM_OC2_SetConfig+0xe4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_OC2_SetConfig+0x94>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a16      	ldr	r2, [pc, #88]	@ (8005908 <TIM_OC2_SetConfig+0xe8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d113      	bne.n	80058dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40010000 	.word	0x40010000
 8005908:	40010400 	.word	0x40010400

0800590c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a21      	ldr	r2, [pc, #132]	@ (80059ec <TIM_OC3_SetConfig+0xe0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <TIM_OC3_SetConfig+0x66>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <TIM_OC3_SetConfig+0xe4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10d      	bne.n	800598e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800598c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a16      	ldr	r2, [pc, #88]	@ (80059ec <TIM_OC3_SetConfig+0xe0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d003      	beq.n	800599e <TIM_OC3_SetConfig+0x92>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a15      	ldr	r2, [pc, #84]	@ (80059f0 <TIM_OC3_SetConfig+0xe4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d113      	bne.n	80059c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40010000 	.word	0x40010000
 80059f0:	40010400 	.word	0x40010400

080059f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a12      	ldr	r2, [pc, #72]	@ (8005a98 <TIM_OC4_SetConfig+0xa4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_OC4_SetConfig+0x68>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a11      	ldr	r2, [pc, #68]	@ (8005a9c <TIM_OC4_SetConfig+0xa8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d109      	bne.n	8005a70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	019b      	lsls	r3, r3, #6
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40010400 	.word	0x40010400

08005aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0201 	bic.w	r2, r3, #1
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f023 030a 	bic.w	r3, r3, #10
 8005adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b087      	sub	sp, #28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f023 0210 	bic.w	r2, r3, #16
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f043 0307 	orr.w	r3, r3, #7
 8005b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	609a      	str	r2, [r3, #8]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	609a      	str	r2, [r3, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2201      	movs	r2, #1
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6a1a      	ldr	r2, [r3, #32]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	fa01 f303 	lsl.w	r3, r1, r3
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
}
 8005c12:	bf00      	nop
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e05a      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	@ (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800
 8005d08:	40000c00 	.word	0x40000c00
 8005d0c:	40010400 	.word	0x40010400
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40001800 	.word	0x40001800

08005d18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e03d      	b.n	8005db0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e042      	b.n	8005e7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fb fb9a 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	@ 0x24
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fcd1 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d112      	bne.n	8005ec4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_UART_Receive_IT+0x26>
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e00b      	b.n	8005ec6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fab0 	bl	8006420 <UART_Start_Receive_IT>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	e000      	b.n	8005ec6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ec4:	2302      	movs	r3, #2
  }
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b0ba      	sub	sp, #232	@ 0xe8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10f      	bne.n	8005f36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d009      	beq.n	8005f36 <HAL_UART_IRQHandler+0x66>
 8005f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb8f 	bl	8006652 <UART_Receive_IT>
      return;
 8005f34:	e25b      	b.n	80063ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80de 	beq.w	80060fc <HAL_UART_IRQHandler+0x22c>
 8005f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f50:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80d1 	beq.w	80060fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <HAL_UART_IRQHandler+0xae>
 8005f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	f043 0201 	orr.w	r2, r3, #1
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xd2>
 8005f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00b      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xf6>
 8005fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fbe:	f043 0204 	orr.w	r2, r3, #4
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x126>
 8005fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d105      	bne.n	8005fea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 81f2 	beq.w	80063e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_UART_IRQHandler+0x14e>
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fb1a 	bl	8006652 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006028:	2b40      	cmp	r3, #64	@ 0x40
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <HAL_UART_IRQHandler+0x17a>
 8006042:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d04f      	beq.n	80060ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa22 	bl	8006494 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d141      	bne.n	80060e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3314      	adds	r3, #20
 8006064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3314      	adds	r3, #20
 8006086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800608a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800608e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d013      	beq.n	80060da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	4a7e      	ldr	r2, [pc, #504]	@ (80062b0 <HAL_UART_IRQHandler+0x3e0>)
 80060b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fc fcd0 	bl	8002a64 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d016      	beq.n	80060f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00e      	b.n	80060f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fb f8cc 	bl	8001278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00a      	b.n	80060f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fb f8c8 	bl	8001278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e006      	b.n	80060f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fb f8c4 	bl	8001278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80060f6:	e175      	b.n	80063e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	bf00      	nop
    return;
 80060fa:	e173      	b.n	80063e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006100:	2b01      	cmp	r3, #1
 8006102:	f040 814f 	bne.w	80063a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610a:	f003 0310 	and.w	r3, r3, #16
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8148 	beq.w	80063a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006118:	f003 0310 	and.w	r3, r3, #16
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 8141 	beq.w	80063a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006142:	2b40      	cmp	r3, #64	@ 0x40
 8006144:	f040 80b6 	bne.w	80062b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006154:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8145 	beq.w	80063e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006166:	429a      	cmp	r2, r3
 8006168:	f080 813e 	bcs.w	80063e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006172:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800617e:	f000 8088 	beq.w	8006292 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	330c      	adds	r3, #12
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006198:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80061ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1d9      	bne.n	8006182 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3314      	adds	r3, #20
 80061d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e1      	bne.n	80061ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800621a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800621c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800622e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006230:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006234:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800623c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006262:	f023 0310 	bic.w	r3, r3, #16
 8006266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006274:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006276:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006278:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800627a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800627c:	e841 2300 	strex	r3, r2, [r1]
 8006280:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e3      	bne.n	8006250 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628c:	4618      	mov	r0, r3
 800628e:	f7fc fb79 	bl	8002984 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f8ad 	bl	8006408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062ae:	e09b      	b.n	80063e8 <HAL_UART_IRQHandler+0x518>
 80062b0:	0800655b 	.word	0x0800655b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 808e 	beq.w	80063ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80062d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8089 	beq.w	80063ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80062fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006300:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006304:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800630c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e3      	bne.n	80062da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3314      	adds	r3, #20
 8006318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	623b      	str	r3, [r7, #32]
   return(result);
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3314      	adds	r3, #20
 8006332:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006336:	633a      	str	r2, [r7, #48]	@ 0x30
 8006338:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800633c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1e3      	bne.n	8006312 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	330c      	adds	r3, #12
 800635e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	e853 3f00 	ldrex	r3, [r3]
 8006366:	60fb      	str	r3, [r7, #12]
   return(result);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0310 	bic.w	r3, r3, #16
 800636e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800637c:	61fa      	str	r2, [r7, #28]
 800637e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	617b      	str	r3, [r7, #20]
   return(result);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e3      	bne.n	8006358 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f833 	bl	8006408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a2:	e023      	b.n	80063ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d009      	beq.n	80063c4 <HAL_UART_IRQHandler+0x4f4>
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8e0 	bl	8006582 <UART_Transmit_IT>
    return;
 80063c2:	e014      	b.n	80063ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <HAL_UART_IRQHandler+0x51e>
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f920 	bl	8006622 <UART_EndTransmit_IT>
    return;
 80063e2:	e004      	b.n	80063ee <HAL_UART_IRQHandler+0x51e>
    return;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <HAL_UART_IRQHandler+0x51e>
      return;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <HAL_UART_IRQHandler+0x51e>
      return;
 80063ec:	bf00      	nop
  }
}
 80063ee:	37e8      	adds	r7, #232	@ 0xe8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	88fa      	ldrh	r2, [r7, #6]
 800643e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2222      	movs	r2, #34	@ 0x22
 800644a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006464:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68da      	ldr	r2, [r3, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0220 	orr.w	r2, r2, #32
 8006484:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b095      	sub	sp, #84	@ 0x54
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3314      	adds	r3, #20
 80064d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	61fb      	str	r3, [r7, #28]
   return(result);
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3314      	adds	r3, #20
 80064ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e5      	bne.n	80064d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006508:	2b01      	cmp	r3, #1
 800650a:	d119      	bne.n	8006540 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	60bb      	str	r3, [r7, #8]
   return(result);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f023 0310 	bic.w	r3, r3, #16
 8006522:	647b      	str	r3, [r7, #68]	@ 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800652c:	61ba      	str	r2, [r7, #24]
 800652e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800654e:	bf00      	nop
 8006550:	3754      	adds	r7, #84	@ 0x54
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006566:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f7fa fe7f 	bl	8001278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b21      	cmp	r3, #33	@ 0x21
 8006594:	d13e      	bne.n	8006614 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800659e:	d114      	bne.n	80065ca <UART_Transmit_IT+0x48>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d110      	bne.n	80065ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]
 80065c8:	e008      	b.n	80065dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	1c59      	adds	r1, r3, #1
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6211      	str	r1, [r2, #32]
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4619      	mov	r1, r3
 80065ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10f      	bne.n	8006610 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800660e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	e000      	b.n	8006616 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006614:	2302      	movs	r3, #2
  }
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006638:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fed6 	bl	80063f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b08c      	sub	sp, #48	@ 0x30
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b22      	cmp	r3, #34	@ 0x22
 8006664:	f040 80ae 	bne.w	80067c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006670:	d117      	bne.n	80066a2 <UART_Receive_IT+0x50>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d113      	bne.n	80066a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006682:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006690:	b29a      	uxth	r2, r3
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	1c9a      	adds	r2, r3, #2
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	629a      	str	r2, [r3, #40]	@ 0x28
 80066a0:	e026      	b.n	80066f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b4:	d007      	beq.n	80066c6 <UART_Receive_IT+0x74>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10a      	bne.n	80066d4 <UART_Receive_IT+0x82>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	e008      	b.n	80066e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	4619      	mov	r1, r3
 80066fe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006700:	2b00      	cmp	r3, #0
 8006702:	d15d      	bne.n	80067c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0220 	bic.w	r2, r2, #32
 8006712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006746:	2b01      	cmp	r3, #1
 8006748:	d135      	bne.n	80067b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	613b      	str	r3, [r7, #16]
   return(result);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f023 0310 	bic.w	r3, r3, #16
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006770:	623a      	str	r2, [r7, #32]
 8006772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	61bb      	str	r3, [r7, #24]
   return(result);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b10      	cmp	r3, #16
 8006790:	d10a      	bne.n	80067a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fe2a 	bl	8006408 <HAL_UARTEx_RxEventCallback>
 80067b4:	e002      	b.n	80067bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fa fd68 	bl	800128c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e002      	b.n	80067c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3730      	adds	r7, #48	@ 0x30
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d4:	b0c0      	sub	sp, #256	@ 0x100
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ec:	68d9      	ldr	r1, [r3, #12]
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	ea40 0301 	orr.w	r3, r0, r1
 80067f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	431a      	orrs	r2, r3
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006828:	f021 010c 	bic.w	r1, r1, #12
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006836:	430b      	orrs	r3, r1
 8006838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684a:	6999      	ldr	r1, [r3, #24]
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	ea40 0301 	orr.w	r3, r0, r1
 8006856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a9c <UART_SetConfig+0x2cc>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d005      	beq.n	8006870 <UART_SetConfig+0xa0>
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b8d      	ldr	r3, [pc, #564]	@ (8006aa0 <UART_SetConfig+0x2d0>)
 800686c:	429a      	cmp	r2, r3
 800686e:	d104      	bne.n	800687a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006870:	f7fe fa94 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8006874:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006878:	e003      	b.n	8006882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800687a:	f7fe fa7b 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 800687e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800688c:	f040 810c 	bne.w	8006aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800689a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800689e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80068a2:	4622      	mov	r2, r4
 80068a4:	462b      	mov	r3, r5
 80068a6:	1891      	adds	r1, r2, r2
 80068a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80068aa:	415b      	adcs	r3, r3
 80068ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068b2:	4621      	mov	r1, r4
 80068b4:	eb12 0801 	adds.w	r8, r2, r1
 80068b8:	4629      	mov	r1, r5
 80068ba:	eb43 0901 	adc.w	r9, r3, r1
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068d2:	4690      	mov	r8, r2
 80068d4:	4699      	mov	r9, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	eb18 0303 	adds.w	r3, r8, r3
 80068dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068e0:	462b      	mov	r3, r5
 80068e2:	eb49 0303 	adc.w	r3, r9, r3
 80068e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068fe:	460b      	mov	r3, r1
 8006900:	18db      	adds	r3, r3, r3
 8006902:	653b      	str	r3, [r7, #80]	@ 0x50
 8006904:	4613      	mov	r3, r2
 8006906:	eb42 0303 	adc.w	r3, r2, r3
 800690a:	657b      	str	r3, [r7, #84]	@ 0x54
 800690c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006914:	f7f9 fcbc 	bl	8000290 <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4b61      	ldr	r3, [pc, #388]	@ (8006aa4 <UART_SetConfig+0x2d4>)
 800691e:	fba3 2302 	umull	r2, r3, r3, r2
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	011c      	lsls	r4, r3, #4
 8006926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006930:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	1891      	adds	r1, r2, r2
 800693e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006940:	415b      	adcs	r3, r3
 8006942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006948:	4641      	mov	r1, r8
 800694a:	eb12 0a01 	adds.w	sl, r2, r1
 800694e:	4649      	mov	r1, r9
 8006950:	eb43 0b01 	adc.w	fp, r3, r1
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006968:	4692      	mov	sl, r2
 800696a:	469b      	mov	fp, r3
 800696c:	4643      	mov	r3, r8
 800696e:	eb1a 0303 	adds.w	r3, sl, r3
 8006972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006976:	464b      	mov	r3, r9
 8006978:	eb4b 0303 	adc.w	r3, fp, r3
 800697c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800698c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006994:	460b      	mov	r3, r1
 8006996:	18db      	adds	r3, r3, r3
 8006998:	643b      	str	r3, [r7, #64]	@ 0x40
 800699a:	4613      	mov	r3, r2
 800699c:	eb42 0303 	adc.w	r3, r2, r3
 80069a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80069a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80069aa:	f7f9 fc71 	bl	8000290 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4611      	mov	r1, r2
 80069b4:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa4 <UART_SetConfig+0x2d4>)
 80069b6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2264      	movs	r2, #100	@ 0x64
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	1acb      	subs	r3, r1, r3
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069ca:	4b36      	ldr	r3, [pc, #216]	@ (8006aa4 <UART_SetConfig+0x2d4>)
 80069cc:	fba3 2302 	umull	r2, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069d8:	441c      	add	r4, r3
 80069da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069f4:	415b      	adcs	r3, r3
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069fc:	4641      	mov	r1, r8
 80069fe:	1851      	adds	r1, r2, r1
 8006a00:	6339      	str	r1, [r7, #48]	@ 0x30
 8006a02:	4649      	mov	r1, r9
 8006a04:	414b      	adcs	r3, r1
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006a14:	4659      	mov	r1, fp
 8006a16:	00cb      	lsls	r3, r1, #3
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1e:	4651      	mov	r1, sl
 8006a20:	00ca      	lsls	r2, r1, #3
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a30:	464b      	mov	r3, r9
 8006a32:	460a      	mov	r2, r1
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a50:	460b      	mov	r3, r1
 8006a52:	18db      	adds	r3, r3, r3
 8006a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a56:	4613      	mov	r3, r2
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a66:	f7f9 fc13 	bl	8000290 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa4 <UART_SetConfig+0x2d4>)
 8006a70:	fba3 1302 	umull	r1, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	2164      	movs	r1, #100	@ 0x64
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	3332      	adds	r3, #50	@ 0x32
 8006a82:	4a08      	ldr	r2, [pc, #32]	@ (8006aa4 <UART_SetConfig+0x2d4>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f003 0207 	and.w	r2, r3, #7
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4422      	add	r2, r4
 8006a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a98:	e106      	b.n	8006ca8 <UART_SetConfig+0x4d8>
 8006a9a:	bf00      	nop
 8006a9c:	40011000 	.word	0x40011000
 8006aa0:	40011400 	.word	0x40011400
 8006aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006aba:	4642      	mov	r2, r8
 8006abc:	464b      	mov	r3, r9
 8006abe:	1891      	adds	r1, r2, r2
 8006ac0:	6239      	str	r1, [r7, #32]
 8006ac2:	415b      	adcs	r3, r3
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aca:	4641      	mov	r1, r8
 8006acc:	1854      	adds	r4, r2, r1
 8006ace:	4649      	mov	r1, r9
 8006ad0:	eb43 0501 	adc.w	r5, r3, r1
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	00eb      	lsls	r3, r5, #3
 8006ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ae2:	00e2      	lsls	r2, r4, #3
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	4643      	mov	r3, r8
 8006aea:	18e3      	adds	r3, r4, r3
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006af0:	464b      	mov	r3, r9
 8006af2:	eb45 0303 	adc.w	r3, r5, r3
 8006af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006b16:	4629      	mov	r1, r5
 8006b18:	008b      	lsls	r3, r1, #2
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b20:	4621      	mov	r1, r4
 8006b22:	008a      	lsls	r2, r1, #2
 8006b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b28:	f7f9 fbb2 	bl	8000290 <__aeabi_uldivmod>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4b60      	ldr	r3, [pc, #384]	@ (8006cb4 <UART_SetConfig+0x4e4>)
 8006b32:	fba3 2302 	umull	r2, r3, r3, r2
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	011c      	lsls	r4, r3, #4
 8006b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	1891      	adds	r1, r2, r2
 8006b52:	61b9      	str	r1, [r7, #24]
 8006b54:	415b      	adcs	r3, r3
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	1851      	adds	r1, r2, r1
 8006b60:	6139      	str	r1, [r7, #16]
 8006b62:	4649      	mov	r1, r9
 8006b64:	414b      	adcs	r3, r1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b74:	4659      	mov	r1, fp
 8006b76:	00cb      	lsls	r3, r1, #3
 8006b78:	4651      	mov	r1, sl
 8006b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b7e:	4651      	mov	r1, sl
 8006b80:	00ca      	lsls	r2, r1, #3
 8006b82:	4610      	mov	r0, r2
 8006b84:	4619      	mov	r1, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	4642      	mov	r2, r8
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b90:	464b      	mov	r3, r9
 8006b92:	460a      	mov	r2, r1
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ba6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	008b      	lsls	r3, r1, #2
 8006bb8:	4641      	mov	r1, r8
 8006bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	008a      	lsls	r2, r1, #2
 8006bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006bc6:	f7f9 fb63 	bl	8000290 <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4b38      	ldr	r3, [pc, #224]	@ (8006cb4 <UART_SetConfig+0x4e4>)
 8006bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2264      	movs	r2, #100	@ 0x64
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	1acb      	subs	r3, r1, r3
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	3332      	adds	r3, #50	@ 0x32
 8006be4:	4a33      	ldr	r2, [pc, #204]	@ (8006cb4 <UART_SetConfig+0x4e4>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	095b      	lsrs	r3, r3, #5
 8006bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bf0:	441c      	add	r4, r3
 8006bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006c00:	4642      	mov	r2, r8
 8006c02:	464b      	mov	r3, r9
 8006c04:	1891      	adds	r1, r2, r2
 8006c06:	60b9      	str	r1, [r7, #8]
 8006c08:	415b      	adcs	r3, r3
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c10:	4641      	mov	r1, r8
 8006c12:	1851      	adds	r1, r2, r1
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	4649      	mov	r1, r9
 8006c18:	414b      	adcs	r3, r1
 8006c1a:	607b      	str	r3, [r7, #4]
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	f04f 0300 	mov.w	r3, #0
 8006c24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c28:	4659      	mov	r1, fp
 8006c2a:	00cb      	lsls	r3, r1, #3
 8006c2c:	4651      	mov	r1, sl
 8006c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c32:	4651      	mov	r1, sl
 8006c34:	00ca      	lsls	r2, r1, #3
 8006c36:	4610      	mov	r0, r2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c42:	464b      	mov	r3, r9
 8006c44:	460a      	mov	r2, r1
 8006c46:	eb42 0303 	adc.w	r3, r2, r3
 8006c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c56:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c64:	4649      	mov	r1, r9
 8006c66:	008b      	lsls	r3, r1, #2
 8006c68:	4641      	mov	r1, r8
 8006c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c6e:	4641      	mov	r1, r8
 8006c70:	008a      	lsls	r2, r1, #2
 8006c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c76:	f7f9 fb0b 	bl	8000290 <__aeabi_uldivmod>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <UART_SetConfig+0x4e4>)
 8006c80:	fba3 1302 	umull	r1, r3, r3, r2
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	2164      	movs	r1, #100	@ 0x64
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	3332      	adds	r3, #50	@ 0x32
 8006c92:	4a08      	ldr	r2, [pc, #32]	@ (8006cb4 <UART_SetConfig+0x4e4>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	f003 020f 	and.w	r2, r3, #15
 8006c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4422      	add	r2, r4
 8006ca6:	609a      	str	r2, [r3, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb4:	51eb851f 	.word	0x51eb851f

08006cb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006cbe:	4b87      	ldr	r3, [pc, #540]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006cc0:	22c0      	movs	r2, #192	@ 0xc0
 8006cc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006cc4:	4b85      	ldr	r3, [pc, #532]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006cc6:	22a8      	movs	r2, #168	@ 0xa8
 8006cc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8006cca:	4b84      	ldr	r3, [pc, #528]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 12;
 8006cd0:	4b82      	ldr	r3, [pc, #520]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006cd2:	220c      	movs	r2, #12
 8006cd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006cd6:	4b82      	ldr	r3, [pc, #520]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006cd8:	22ff      	movs	r2, #255	@ 0xff
 8006cda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006cdc:	4b80      	ldr	r3, [pc, #512]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006cde:	22ff      	movs	r2, #255	@ 0xff
 8006ce0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006ce4:	22ff      	movs	r2, #255	@ 0xff
 8006ce6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006cee:	4b7d      	ldr	r3, [pc, #500]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006cf0:	22c0      	movs	r2, #192	@ 0xc0
 8006cf2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006cf4:	4b7b      	ldr	r3, [pc, #492]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006cf6:	22a8      	movs	r2, #168	@ 0xa8
 8006cf8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006d00:	4b78      	ldr	r3, [pc, #480]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8006d06:	f000 fc77 	bl	80075f8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006d0a:	4b74      	ldr	r3, [pc, #464]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	061a      	lsls	r2, r3, #24
 8006d10:	4b72      	ldr	r3, [pc, #456]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	041b      	lsls	r3, r3, #16
 8006d16:	431a      	orrs	r2, r3
 8006d18:	4b70      	ldr	r3, [pc, #448]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d1a:	789b      	ldrb	r3, [r3, #2]
 8006d1c:	021b      	lsls	r3, r3, #8
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	4a6e      	ldr	r2, [pc, #440]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d22:	78d2      	ldrb	r2, [r2, #3]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	061a      	lsls	r2, r3, #24
 8006d28:	4b6c      	ldr	r3, [pc, #432]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	0619      	lsls	r1, r3, #24
 8006d2e:	4b6b      	ldr	r3, [pc, #428]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	4319      	orrs	r1, r3
 8006d36:	4b69      	ldr	r3, [pc, #420]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d38:	789b      	ldrb	r3, [r3, #2]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	4967      	ldr	r1, [pc, #412]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d40:	78c9      	ldrb	r1, [r1, #3]
 8006d42:	430b      	orrs	r3, r1
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	4b63      	ldr	r3, [pc, #396]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	0619      	lsls	r1, r3, #24
 8006d52:	4b62      	ldr	r3, [pc, #392]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	041b      	lsls	r3, r3, #16
 8006d58:	4319      	orrs	r1, r3
 8006d5a:	4b60      	ldr	r3, [pc, #384]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d5c:	789b      	ldrb	r3, [r3, #2]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	430b      	orrs	r3, r1
 8006d62:	495e      	ldr	r1, [pc, #376]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d64:	78c9      	ldrb	r1, [r1, #3]
 8006d66:	430b      	orrs	r3, r1
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	4b5a      	ldr	r3, [pc, #360]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	0619      	lsls	r1, r3, #24
 8006d76:	4b59      	ldr	r3, [pc, #356]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	041b      	lsls	r3, r3, #16
 8006d7c:	4319      	orrs	r1, r3
 8006d7e:	4b57      	ldr	r3, [pc, #348]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d80:	789b      	ldrb	r3, [r3, #2]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	430b      	orrs	r3, r1
 8006d86:	4955      	ldr	r1, [pc, #340]	@ (8006edc <MX_LWIP_Init+0x224>)
 8006d88:	78c9      	ldrb	r1, [r1, #3]
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	0e1b      	lsrs	r3, r3, #24
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	4a55      	ldr	r2, [pc, #340]	@ (8006ee8 <MX_LWIP_Init+0x230>)
 8006d92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006d94:	4b52      	ldr	r3, [pc, #328]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	061a      	lsls	r2, r3, #24
 8006d9a:	4b51      	ldr	r3, [pc, #324]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006d9c:	785b      	ldrb	r3, [r3, #1]
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	431a      	orrs	r2, r3
 8006da2:	4b4f      	ldr	r3, [pc, #316]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006da4:	789b      	ldrb	r3, [r3, #2]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	4313      	orrs	r3, r2
 8006daa:	4a4d      	ldr	r2, [pc, #308]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dac:	78d2      	ldrb	r2, [r2, #3]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	061a      	lsls	r2, r3, #24
 8006db2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	0619      	lsls	r1, r3, #24
 8006db8:	4b49      	ldr	r3, [pc, #292]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	041b      	lsls	r3, r3, #16
 8006dbe:	4319      	orrs	r1, r3
 8006dc0:	4b47      	ldr	r3, [pc, #284]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dc2:	789b      	ldrb	r3, [r3, #2]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	4945      	ldr	r1, [pc, #276]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dca:	78c9      	ldrb	r1, [r1, #3]
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	4b42      	ldr	r3, [pc, #264]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	0619      	lsls	r1, r3, #24
 8006ddc:	4b40      	ldr	r3, [pc, #256]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	041b      	lsls	r3, r3, #16
 8006de2:	4319      	orrs	r1, r3
 8006de4:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006de6:	789b      	ldrb	r3, [r3, #2]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	430b      	orrs	r3, r1
 8006dec:	493c      	ldr	r1, [pc, #240]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dee:	78c9      	ldrb	r1, [r1, #3]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	4b39      	ldr	r3, [pc, #228]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	0619      	lsls	r1, r3, #24
 8006e00:	4b37      	ldr	r3, [pc, #220]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	4319      	orrs	r1, r3
 8006e08:	4b35      	ldr	r3, [pc, #212]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006e0a:	789b      	ldrb	r3, [r3, #2]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	430b      	orrs	r3, r1
 8006e10:	4933      	ldr	r1, [pc, #204]	@ (8006ee0 <MX_LWIP_Init+0x228>)
 8006e12:	78c9      	ldrb	r1, [r1, #3]
 8006e14:	430b      	orrs	r3, r1
 8006e16:	0e1b      	lsrs	r3, r3, #24
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	4a34      	ldr	r2, [pc, #208]	@ (8006eec <MX_LWIP_Init+0x234>)
 8006e1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006e1e:	4b31      	ldr	r3, [pc, #196]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	061a      	lsls	r2, r3, #24
 8006e24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e26:	785b      	ldrb	r3, [r3, #1]
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e2e:	789b      	ldrb	r3, [r3, #2]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	4313      	orrs	r3, r2
 8006e34:	4a2b      	ldr	r2, [pc, #172]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e36:	78d2      	ldrb	r2, [r2, #3]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	061a      	lsls	r2, r3, #24
 8006e3c:	4b29      	ldr	r3, [pc, #164]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	0619      	lsls	r1, r3, #24
 8006e42:	4b28      	ldr	r3, [pc, #160]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	4319      	orrs	r1, r3
 8006e4a:	4b26      	ldr	r3, [pc, #152]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e4c:	789b      	ldrb	r3, [r3, #2]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	430b      	orrs	r3, r1
 8006e52:	4924      	ldr	r1, [pc, #144]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e54:	78c9      	ldrb	r1, [r1, #3]
 8006e56:	430b      	orrs	r3, r1
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	4b20      	ldr	r3, [pc, #128]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	0619      	lsls	r1, r3, #24
 8006e66:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	4319      	orrs	r1, r3
 8006e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e70:	789b      	ldrb	r3, [r3, #2]
 8006e72:	021b      	lsls	r3, r3, #8
 8006e74:	430b      	orrs	r3, r1
 8006e76:	491b      	ldr	r1, [pc, #108]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e78:	78c9      	ldrb	r1, [r1, #3]
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e82:	431a      	orrs	r2, r3
 8006e84:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	0619      	lsls	r1, r3, #24
 8006e8a:	4b16      	ldr	r3, [pc, #88]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	4319      	orrs	r1, r3
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e94:	789b      	ldrb	r3, [r3, #2]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	4912      	ldr	r1, [pc, #72]	@ (8006ee4 <MX_LWIP_Init+0x22c>)
 8006e9c:	78c9      	ldrb	r1, [r1, #3]
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	0e1b      	lsrs	r3, r3, #24
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	4a12      	ldr	r2, [pc, #72]	@ (8006ef0 <MX_LWIP_Init+0x238>)
 8006ea6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006ea8:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <MX_LWIP_Init+0x23c>)
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <MX_LWIP_Init+0x240>)
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef0 <MX_LWIP_Init+0x238>)
 8006eb6:	4a0d      	ldr	r2, [pc, #52]	@ (8006eec <MX_LWIP_Init+0x234>)
 8006eb8:	490b      	ldr	r1, [pc, #44]	@ (8006ee8 <MX_LWIP_Init+0x230>)
 8006eba:	4810      	ldr	r0, [pc, #64]	@ (8006efc <MX_LWIP_Init+0x244>)
 8006ebc:	f001 f888 	bl	8007fd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006ec0:	480e      	ldr	r0, [pc, #56]	@ (8006efc <MX_LWIP_Init+0x244>)
 8006ec2:	f001 fa37 	bl	8008334 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006ec6:	480d      	ldr	r0, [pc, #52]	@ (8006efc <MX_LWIP_Init+0x244>)
 8006ec8:	f001 fa44 	bl	8008354 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006ecc:	490c      	ldr	r1, [pc, #48]	@ (8006f00 <MX_LWIP_Init+0x248>)
 8006ece:	480b      	ldr	r0, [pc, #44]	@ (8006efc <MX_LWIP_Init+0x244>)
 8006ed0:	f001 fb42 	bl	8008558 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000790 	.word	0x20000790
 8006ee0:	20000794 	.word	0x20000794
 8006ee4:	20000798 	.word	0x20000798
 8006ee8:	20000784 	.word	0x20000784
 8006eec:	20000788 	.word	0x20000788
 8006ef0:	2000078c 	.word	0x2000078c
 8006ef4:	0801171d 	.word	0x0801171d
 8006ef8:	0800715d 	.word	0x0800715d
 8006efc:	20000750 	.word	0x20000750
 8006f00:	08006f05 	.word	0x08006f05

08006f04 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006f24:	4b44      	ldr	r3, [pc, #272]	@ (8007038 <low_level_init+0x120>)
 8006f26:	4a45      	ldr	r2, [pc, #276]	@ (800703c <low_level_init+0x124>)
 8006f28:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006f2e:	2380      	movs	r3, #128	@ 0x80
 8006f30:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006f32:	23e1      	movs	r3, #225	@ 0xe1
 8006f34:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006f36:	2300      	movs	r3, #0
 8006f38:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006f42:	4a3d      	ldr	r2, [pc, #244]	@ (8007038 <low_level_init+0x120>)
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007038 <low_level_init+0x120>)
 8006f4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006f50:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006f52:	4b39      	ldr	r3, [pc, #228]	@ (8007038 <low_level_init+0x120>)
 8006f54:	4a3a      	ldr	r2, [pc, #232]	@ (8007040 <low_level_init+0x128>)
 8006f56:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006f58:	4b37      	ldr	r3, [pc, #220]	@ (8007038 <low_level_init+0x120>)
 8006f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8007044 <low_level_init+0x12c>)
 8006f5c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006f5e:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <low_level_init+0x120>)
 8006f60:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006f64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006f66:	4834      	ldr	r0, [pc, #208]	@ (8007038 <low_level_init+0x120>)
 8006f68:	f7fc f808 	bl	8002f7c <HAL_ETH_Init>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006f70:	2238      	movs	r2, #56	@ 0x38
 8006f72:	2100      	movs	r1, #0
 8006f74:	4834      	ldr	r0, [pc, #208]	@ (8007048 <low_level_init+0x130>)
 8006f76:	f00a feff 	bl	8011d78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006f7a:	4b33      	ldr	r3, [pc, #204]	@ (8007048 <low_level_init+0x130>)
 8006f7c:	2221      	movs	r2, #33	@ 0x21
 8006f7e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006f80:	4b31      	ldr	r3, [pc, #196]	@ (8007048 <low_level_init+0x130>)
 8006f82:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006f86:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006f88:	4b2f      	ldr	r3, [pc, #188]	@ (8007048 <low_level_init+0x130>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006f8e:	482f      	ldr	r0, [pc, #188]	@ (800704c <low_level_init+0x134>)
 8006f90:	f000 fee6 	bl	8007d60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2206      	movs	r2, #6
 8006f98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006f9c:	4b26      	ldr	r3, [pc, #152]	@ (8007038 <low_level_init+0x120>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006fa8:	4b23      	ldr	r3, [pc, #140]	@ (8007038 <low_level_init+0x120>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	785a      	ldrb	r2, [r3, #1]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006fb4:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <low_level_init+0x120>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	789a      	ldrb	r2, [r3, #2]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007038 <low_level_init+0x120>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	78da      	ldrb	r2, [r3, #3]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007038 <low_level_init+0x120>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	791a      	ldrb	r2, [r3, #4]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006fd8:	4b17      	ldr	r3, [pc, #92]	@ (8007038 <low_level_init+0x120>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	795a      	ldrb	r2, [r3, #5]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006fea:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006ff2:	f043 030a 	orr.w	r3, r3, #10
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006ffe:	4914      	ldr	r1, [pc, #80]	@ (8007050 <low_level_init+0x138>)
 8007000:	4814      	ldr	r0, [pc, #80]	@ (8007054 <low_level_init+0x13c>)
 8007002:	f7fa fce8 	bl	80019d6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007006:	4813      	ldr	r0, [pc, #76]	@ (8007054 <low_level_init+0x13c>)
 8007008:	f7fa fd17 	bl	8001a3a <LAN8742_Init>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fa70 	bl	80084f8 <netif_set_link_down>
    netif_set_down(netif);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fa07 	bl	800842c <netif_set_down>
 800701e:	e008      	b.n	8007032 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f9fc 	bl	8007424 <ethernet_link_check_state>
 800702c:	e001      	b.n	8007032 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800702e:	f7fa fb51 	bl	80016d4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20005268 	.word	0x20005268
 800703c:	40028000 	.word	0x40028000
 8007040:	200051c8 	.word	0x200051c8
 8007044:	20005128 	.word	0x20005128
 8007048:	20005318 	.word	0x20005318
 800704c:	080153e4 	.word	0x080153e4
 8007050:	2000000c 	.word	0x2000000c
 8007054:	20005350 	.word	0x20005350

08007058 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b092      	sub	sp, #72	@ 0x48
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007070:	f107 030c 	add.w	r3, r7, #12
 8007074:	2230      	movs	r2, #48	@ 0x30
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f00a fe7d 	bl	8011d78 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800707e:	f107 030c 	add.w	r3, r7, #12
 8007082:	2230      	movs	r2, #48	@ 0x30
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f00a fe76 	bl	8011d78 <memset>

  for(q = p; q != NULL; q = q->next)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007090:	e045      	b.n	800711e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007094:	2b03      	cmp	r3, #3
 8007096:	d902      	bls.n	800709e <low_level_output+0x46>
      return ERR_IF;
 8007098:	f06f 030b 	mvn.w	r3, #11
 800709c:	e055      	b.n	800714a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800709e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a4:	4613      	mov	r3, r2
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	3348      	adds	r3, #72	@ 0x48
 80070ae:	443b      	add	r3, r7
 80070b0:	3b3c      	subs	r3, #60	@ 0x3c
 80070b2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80070b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b6:	895b      	ldrh	r3, [r3, #10]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070bc:	4613      	mov	r3, r2
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	3348      	adds	r3, #72	@ 0x48
 80070c6:	443b      	add	r3, r7
 80070c8:	3b38      	subs	r3, #56	@ 0x38
 80070ca:	6019      	str	r1, [r3, #0]

    if(i>0)
 80070cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80070d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070d4:	1e5a      	subs	r2, r3, #1
 80070d6:	f107 000c 	add.w	r0, r7, #12
 80070da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070dc:	460b      	mov	r3, r1
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	440b      	add	r3, r1
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	18c1      	adds	r1, r0, r3
 80070e6:	4613      	mov	r3, r2
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	3348      	adds	r3, #72	@ 0x48
 80070f0:	443b      	add	r3, r7
 80070f2:	3b34      	subs	r3, #52	@ 0x34
 80070f4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80070f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80070fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007100:	4613      	mov	r3, r2
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	3348      	adds	r3, #72	@ 0x48
 800710a:	443b      	add	r3, r7
 800710c:	3b34      	subs	r3, #52	@ 0x34
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007114:	3301      	adds	r3, #1
 8007116:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	643b      	str	r3, [r7, #64]	@ 0x40
 800711e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1b6      	bne.n	8007092 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	891b      	ldrh	r3, [r3, #8]
 8007128:	461a      	mov	r2, r3
 800712a:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <low_level_output+0xfc>)
 800712c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800712e:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <low_level_output+0xfc>)
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007136:	4a07      	ldr	r2, [pc, #28]	@ (8007154 <low_level_output+0xfc>)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800713c:	2214      	movs	r2, #20
 800713e:	4905      	ldr	r1, [pc, #20]	@ (8007154 <low_level_output+0xfc>)
 8007140:	4805      	ldr	r0, [pc, #20]	@ (8007158 <low_level_output+0x100>)
 8007142:	f7fc f86f 	bl	8003224 <HAL_ETH_Transmit>

  return errval;
 8007146:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800714a:	4618      	mov	r0, r3
 800714c:	3748      	adds	r7, #72	@ 0x48
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20005318 	.word	0x20005318
 8007158:	20005268 	.word	0x20005268

0800715c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <ethernetif_init+0x1c>
 800716a:	4b0e      	ldr	r3, [pc, #56]	@ (80071a4 <ethernetif_init+0x48>)
 800716c:	f240 126f 	movw	r2, #367	@ 0x16f
 8007170:	490d      	ldr	r1, [pc, #52]	@ (80071a8 <ethernetif_init+0x4c>)
 8007172:	480e      	ldr	r0, [pc, #56]	@ (80071ac <ethernetif_init+0x50>)
 8007174:	f00a fca8 	bl	8011ac8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2273      	movs	r2, #115	@ 0x73
 800717c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2274      	movs	r2, #116	@ 0x74
 8007184:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a09      	ldr	r2, [pc, #36]	@ (80071b0 <ethernetif_init+0x54>)
 800718c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a08      	ldr	r2, [pc, #32]	@ (80071b4 <ethernetif_init+0x58>)
 8007192:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff febf 	bl	8006f18 <low_level_init>

  return ERR_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	080129e4 	.word	0x080129e4
 80071a8:	08012a00 	.word	0x08012a00
 80071ac:	08012a10 	.word	0x08012a10
 80071b0:	0800fbd5 	.word	0x0800fbd5
 80071b4:	08007059 	.word	0x08007059

080071b8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80071c4:	68f9      	ldr	r1, [r7, #12]
 80071c6:	4807      	ldr	r0, [pc, #28]	@ (80071e4 <pbuf_free_custom+0x2c>)
 80071c8:	f000 feac 	bl	8007f24 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80071cc:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <pbuf_free_custom+0x30>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d102      	bne.n	80071da <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80071d4:	4b04      	ldr	r3, [pc, #16]	@ (80071e8 <pbuf_free_custom+0x30>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
  }
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	080153e4 	.word	0x080153e4
 80071e8:	20005124 	.word	0x20005124

080071ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80071f0:	f7fa fd5e 	bl	8001cb0 <HAL_GetTick>
 80071f4:	4603      	mov	r3, r0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08e      	sub	sp, #56	@ 0x38
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	605a      	str	r2, [r3, #4]
 800720e:	609a      	str	r2, [r3, #8]
 8007210:	60da      	str	r2, [r3, #12]
 8007212:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a55      	ldr	r2, [pc, #340]	@ (8007370 <HAL_ETH_MspInit+0x174>)
 800721a:	4293      	cmp	r3, r2
 800721c:	f040 80a4 	bne.w	8007368 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007220:	2300      	movs	r3, #0
 8007222:	623b      	str	r3, [r7, #32]
 8007224:	4b53      	ldr	r3, [pc, #332]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007228:	4a52      	ldr	r2, [pc, #328]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800722a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800722e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007230:	4b50      	ldr	r3, [pc, #320]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007238:	623b      	str	r3, [r7, #32]
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	2300      	movs	r3, #0
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	4b4c      	ldr	r3, [pc, #304]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	4a4b      	ldr	r2, [pc, #300]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007246:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800724a:	6313      	str	r3, [r2, #48]	@ 0x30
 800724c:	4b49      	ldr	r3, [pc, #292]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007250:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2300      	movs	r3, #0
 800725a:	61bb      	str	r3, [r7, #24]
 800725c:	4b45      	ldr	r3, [pc, #276]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	4a44      	ldr	r2, [pc, #272]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007266:	6313      	str	r3, [r2, #48]	@ 0x30
 8007268:	4b42      	ldr	r3, [pc, #264]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	4b3e      	ldr	r3, [pc, #248]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800727a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727c:	4a3d      	ldr	r2, [pc, #244]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800727e:	f043 0304 	orr.w	r3, r3, #4
 8007282:	6313      	str	r3, [r2, #48]	@ 0x30
 8007284:	4b3b      	ldr	r3, [pc, #236]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007290:	2300      	movs	r3, #0
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	4b37      	ldr	r3, [pc, #220]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007298:	4a36      	ldr	r2, [pc, #216]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	6313      	str	r3, [r2, #48]	@ 0x30
 80072a0:	4b34      	ldr	r3, [pc, #208]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	4b30      	ldr	r3, [pc, #192]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b4:	4a2f      	ldr	r2, [pc, #188]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072b6:	f043 0302 	orr.w	r3, r3, #2
 80072ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80072bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80072c8:	2300      	movs	r3, #0
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	4b29      	ldr	r3, [pc, #164]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d0:	4a28      	ldr	r2, [pc, #160]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80072d8:	4b26      	ldr	r3, [pc, #152]	@ (8007374 <HAL_ETH_MspInit+0x178>)
 80072da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80072e4:	2332      	movs	r3, #50	@ 0x32
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e8:	2302      	movs	r3, #2
 80072ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ec:	2300      	movs	r3, #0
 80072ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072f0:	2303      	movs	r3, #3
 80072f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072f4:	230b      	movs	r3, #11
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072fc:	4619      	mov	r1, r3
 80072fe:	481e      	ldr	r0, [pc, #120]	@ (8007378 <HAL_ETH_MspInit+0x17c>)
 8007300:	f7fc feb2 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007304:	2386      	movs	r3, #134	@ 0x86
 8007306:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007308:	2302      	movs	r3, #2
 800730a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	2300      	movs	r3, #0
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007310:	2303      	movs	r3, #3
 8007312:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007314:	230b      	movs	r3, #11
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800731c:	4619      	mov	r1, r3
 800731e:	4817      	ldr	r0, [pc, #92]	@ (800737c <HAL_ETH_MspInit+0x180>)
 8007320:	f7fc fea2 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007324:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800732a:	2302      	movs	r3, #2
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732e:	2300      	movs	r3, #0
 8007330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007332:	2303      	movs	r3, #3
 8007334:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007336:	230b      	movs	r3, #11
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800733a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800733e:	4619      	mov	r1, r3
 8007340:	480f      	ldr	r0, [pc, #60]	@ (8007380 <HAL_ETH_MspInit+0x184>)
 8007342:	f7fc fe91 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007346:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800734a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734c:	2302      	movs	r3, #2
 800734e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007350:	2300      	movs	r3, #0
 8007352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007354:	2303      	movs	r3, #3
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007358:	230b      	movs	r3, #11
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800735c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007360:	4619      	mov	r1, r3
 8007362:	4808      	ldr	r0, [pc, #32]	@ (8007384 <HAL_ETH_MspInit+0x188>)
 8007364:	f7fc fe80 	bl	8004068 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007368:	bf00      	nop
 800736a:	3738      	adds	r7, #56	@ 0x38
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40028000 	.word	0x40028000
 8007374:	40023800 	.word	0x40023800
 8007378:	40020800 	.word	0x40020800
 800737c:	40020000 	.word	0x40020000
 8007380:	40020400 	.word	0x40020400
 8007384:	40021800 	.word	0x40021800

08007388 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800738c:	4802      	ldr	r0, [pc, #8]	@ (8007398 <ETH_PHY_IO_Init+0x10>)
 800738e:	f7fc fa07 	bl	80037a0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20005268 	.word	0x20005268

0800739c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  return 0;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	4807      	ldr	r0, [pc, #28]	@ (80073dc <ETH_PHY_IO_ReadReg+0x30>)
 80073c0:	f7fc f848 	bl	8003454 <HAL_ETH_ReadPHYRegister>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	e000      	b.n	80073d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20005268 	.word	0x20005268

080073e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	4807      	ldr	r0, [pc, #28]	@ (8007410 <ETH_PHY_IO_WriteReg+0x30>)
 80073f4:	f7fc f879 	bl	80034ea <HAL_ETH_WritePHYRegister>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	e000      	b.n	8007406 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20005268 	.word	0x20005268

08007414 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007418:	f7fa fc4a 	bl	8001cb0 <HAL_GetTick>
 800741c:	4603      	mov	r3, r0
}
 800741e:	4618      	mov	r0, r3
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b0a0      	sub	sp, #128	@ 0x80
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800742c:	f107 030c 	add.w	r3, r7, #12
 8007430:	2264      	movs	r2, #100	@ 0x64
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f00a fc9f 	bl	8011d78 <memset>
  int32_t PHYLinkState = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007442:	2300      	movs	r3, #0
 8007444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007446:	2300      	movs	r3, #0
 8007448:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800744a:	483a      	ldr	r0, [pc, #232]	@ (8007534 <ethernet_link_check_state+0x110>)
 800744c:	f7fa fb42 	bl	8001ad4 <LAN8742_GetLinkState>
 8007450:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007458:	089b      	lsrs	r3, r3, #2
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <ethernet_link_check_state+0x5a>
 8007464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007466:	2b01      	cmp	r3, #1
 8007468:	dc09      	bgt.n	800747e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800746a:	4833      	ldr	r0, [pc, #204]	@ (8007538 <ethernet_link_check_state+0x114>)
 800746c:	f7fb fe81 	bl	8003172 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 ffdb 	bl	800842c <netif_set_down>
    netif_set_link_down(netif);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 f83e 	bl	80084f8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800747c:	e055      	b.n	800752a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d14e      	bne.n	800752a <ethernet_link_check_state+0x106>
 800748c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800748e:	2b01      	cmp	r3, #1
 8007490:	dd4b      	ble.n	800752a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007492:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007494:	3b02      	subs	r3, #2
 8007496:	2b03      	cmp	r3, #3
 8007498:	d82a      	bhi.n	80074f0 <ethernet_link_check_state+0xcc>
 800749a:	a201      	add	r2, pc, #4	@ (adr r2, 80074a0 <ethernet_link_check_state+0x7c>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074c3 	.word	0x080074c3
 80074a8:	080074d3 	.word	0x080074d3
 80074ac:	080074e3 	.word	0x080074e3
      duplex = ETH_FULLDUPLEX_MODE;
 80074b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80074b4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80074b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80074ba:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80074bc:	2301      	movs	r3, #1
 80074be:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80074c0:	e017      	b.n	80074f2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80074c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80074ca:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80074cc:	2301      	movs	r3, #1
 80074ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80074d0:	e00f      	b.n	80074f2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80074d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80074d6:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80074d8:	2300      	movs	r3, #0
 80074da:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80074dc:	2301      	movs	r3, #1
 80074de:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80074e0:	e007      	b.n	80074f2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80074e6:	2300      	movs	r3, #0
 80074e8:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80074ee:	e000      	b.n	80074f2 <ethernet_link_check_state+0xce>
      break;
 80074f0:	bf00      	nop
    if(linkchanged)
 80074f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d018      	beq.n	800752a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80074f8:	f107 030c 	add.w	r3, r7, #12
 80074fc:	4619      	mov	r1, r3
 80074fe:	480e      	ldr	r0, [pc, #56]	@ (8007538 <ethernet_link_check_state+0x114>)
 8007500:	f7fc f83c 	bl	800357c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007504:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007506:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8007508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800750a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800750c:	f107 030c 	add.w	r3, r7, #12
 8007510:	4619      	mov	r1, r3
 8007512:	4809      	ldr	r0, [pc, #36]	@ (8007538 <ethernet_link_check_state+0x114>)
 8007514:	f7fc f929 	bl	800376a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007518:	4807      	ldr	r0, [pc, #28]	@ (8007538 <ethernet_link_check_state+0x114>)
 800751a:	f7fb fdcb 	bl	80030b4 <HAL_ETH_Start>
      netif_set_up(netif);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 ff18 	bl	8008354 <netif_set_up>
      netif_set_link_up(netif);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 ffb3 	bl	8008490 <netif_set_link_up>
}
 800752a:	bf00      	nop
 800752c:	3780      	adds	r7, #128	@ 0x80
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20005350 	.word	0x20005350
 8007538:	20005268 	.word	0x20005268

0800753c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af02      	add	r7, sp, #8
 8007542:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007544:	4812      	ldr	r0, [pc, #72]	@ (8007590 <HAL_ETH_RxAllocateCallback+0x54>)
 8007546:	f000 fc7f 	bl	8007e48 <memp_malloc_pool>
 800754a:	60f8      	str	r0, [r7, #12]
  if (p)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d014      	beq.n	800757c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f103 0220 	add.w	r2, r3, #32
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4a0d      	ldr	r2, [pc, #52]	@ (8007594 <HAL_ETH_RxAllocateCallback+0x58>)
 8007560:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800756a:	9201      	str	r2, [sp, #4]
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2241      	movs	r2, #65	@ 0x41
 8007572:	2100      	movs	r1, #0
 8007574:	2000      	movs	r0, #0
 8007576:	f001 f995 	bl	80088a4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800757a:	e005      	b.n	8007588 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800757c:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <HAL_ETH_RxAllocateCallback+0x5c>)
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	080153e4 	.word	0x080153e4
 8007594:	080071b9 	.word	0x080071b9
 8007598:	20005124 	.word	0x20005124

0800759c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80075a6:	88fb      	ldrh	r3, [r7, #6]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	b21a      	sxth	r2, r3
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	b21b      	sxth	r3, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b21b      	sxth	r3, r3
 80075b8:	b29b      	uxth	r3, r3
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	061a      	lsls	r2, r3, #24
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80075da:	431a      	orrs	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	0a1b      	lsrs	r3, r3, #8
 80075e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	0e1b      	lsrs	r3, r3, #24
 80075ea:	4313      	orrs	r3, r2
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007602:	f000 f8d5 	bl	80077b0 <mem_init>
  memp_init();
 8007606:	f000 fbdb 	bl	8007dc0 <memp_init>
  pbuf_init();
  netif_init();
 800760a:	f000 fcd9 	bl	8007fc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800760e:	f007 fcdb 	bl	800efc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007612:	f001 fe21 	bl	8009258 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007616:	f007 fc8f 	bl	800ef38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800762e:	4b05      	ldr	r3, [pc, #20]	@ (8007644 <ptr_to_mem+0x20>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	4413      	add	r3, r2
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	200059dc 	.word	0x200059dc

08007648 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <mem_to_ptr+0x20>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	b29b      	uxth	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	200059dc 	.word	0x200059dc

0800766c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800766c:	b590      	push	{r4, r7, lr}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007674:	4b45      	ldr	r3, [pc, #276]	@ (800778c <plug_holes+0x120>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d206      	bcs.n	800768c <plug_holes+0x20>
 800767e:	4b44      	ldr	r3, [pc, #272]	@ (8007790 <plug_holes+0x124>)
 8007680:	f240 12df 	movw	r2, #479	@ 0x1df
 8007684:	4943      	ldr	r1, [pc, #268]	@ (8007794 <plug_holes+0x128>)
 8007686:	4844      	ldr	r0, [pc, #272]	@ (8007798 <plug_holes+0x12c>)
 8007688:	f00a fa1e 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800768c:	4b43      	ldr	r3, [pc, #268]	@ (800779c <plug_holes+0x130>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d306      	bcc.n	80076a4 <plug_holes+0x38>
 8007696:	4b3e      	ldr	r3, [pc, #248]	@ (8007790 <plug_holes+0x124>)
 8007698:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800769c:	4940      	ldr	r1, [pc, #256]	@ (80077a0 <plug_holes+0x134>)
 800769e:	483e      	ldr	r0, [pc, #248]	@ (8007798 <plug_holes+0x12c>)
 80076a0:	f00a fa12 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d006      	beq.n	80076ba <plug_holes+0x4e>
 80076ac:	4b38      	ldr	r3, [pc, #224]	@ (8007790 <plug_holes+0x124>)
 80076ae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80076b2:	493c      	ldr	r1, [pc, #240]	@ (80077a4 <plug_holes+0x138>)
 80076b4:	4838      	ldr	r0, [pc, #224]	@ (8007798 <plug_holes+0x12c>)
 80076b6:	f00a fa07 	bl	8011ac8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80076c2:	d906      	bls.n	80076d2 <plug_holes+0x66>
 80076c4:	4b32      	ldr	r3, [pc, #200]	@ (8007790 <plug_holes+0x124>)
 80076c6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80076ca:	4937      	ldr	r1, [pc, #220]	@ (80077a8 <plug_holes+0x13c>)
 80076cc:	4832      	ldr	r0, [pc, #200]	@ (8007798 <plug_holes+0x12c>)
 80076ce:	f00a f9fb 	bl	8011ac8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff ffa4 	bl	8007624 <ptr_to_mem>
 80076dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d024      	beq.n	8007730 <plug_holes+0xc4>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d120      	bne.n	8007730 <plug_holes+0xc4>
 80076ee:	4b2b      	ldr	r3, [pc, #172]	@ (800779c <plug_holes+0x130>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d01b      	beq.n	8007730 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80076f8:	4b2c      	ldr	r3, [pc, #176]	@ (80077ac <plug_holes+0x140>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d102      	bne.n	8007708 <plug_holes+0x9c>
      lfree = mem;
 8007702:	4a2a      	ldr	r2, [pc, #168]	@ (80077ac <plug_holes+0x140>)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007718:	d00a      	beq.n	8007730 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff ff80 	bl	8007624 <ptr_to_mem>
 8007724:	4604      	mov	r4, r0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff8e 	bl	8007648 <mem_to_ptr>
 800772c:	4603      	mov	r3, r0
 800772e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff ff75 	bl	8007624 <ptr_to_mem>
 800773a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d01f      	beq.n	8007784 <plug_holes+0x118>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d11b      	bne.n	8007784 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800774c:	4b17      	ldr	r3, [pc, #92]	@ (80077ac <plug_holes+0x140>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d102      	bne.n	800775c <plug_holes+0xf0>
      lfree = pmem;
 8007756:	4a15      	ldr	r2, [pc, #84]	@ (80077ac <plug_holes+0x140>)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	881a      	ldrh	r2, [r3, #0]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	881b      	ldrh	r3, [r3, #0]
 8007768:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800776c:	d00a      	beq.n	8007784 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ff56 	bl	8007624 <ptr_to_mem>
 8007778:	4604      	mov	r4, r0
 800777a:	68b8      	ldr	r0, [r7, #8]
 800777c:	f7ff ff64 	bl	8007648 <mem_to_ptr>
 8007780:	4603      	mov	r3, r0
 8007782:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007784:	bf00      	nop
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	bd90      	pop	{r4, r7, pc}
 800778c:	200059dc 	.word	0x200059dc
 8007790:	08012a38 	.word	0x08012a38
 8007794:	08012a68 	.word	0x08012a68
 8007798:	08012a80 	.word	0x08012a80
 800779c:	200059e0 	.word	0x200059e0
 80077a0:	08012aa8 	.word	0x08012aa8
 80077a4:	08012ac4 	.word	0x08012ac4
 80077a8:	08012ae0 	.word	0x08012ae0
 80077ac:	200059e4 	.word	0x200059e4

080077b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80077b6:	4b18      	ldr	r3, [pc, #96]	@ (8007818 <mem_init+0x68>)
 80077b8:	3303      	adds	r3, #3
 80077ba:	f023 0303 	bic.w	r3, r3, #3
 80077be:	461a      	mov	r2, r3
 80077c0:	4b16      	ldr	r3, [pc, #88]	@ (800781c <mem_init+0x6c>)
 80077c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80077c4:	4b15      	ldr	r3, [pc, #84]	@ (800781c <mem_init+0x6c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80077d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80077de:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80077e2:	f7ff ff1f 	bl	8007624 <ptr_to_mem>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007820 <mem_init+0x70>)
 80077ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80077ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <mem_init+0x70>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2201      	movs	r2, #1
 80077f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80077f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007820 <mem_init+0x70>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80077fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80077fe:	4b08      	ldr	r3, [pc, #32]	@ (8007820 <mem_init+0x70>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007806:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007808:	4b04      	ldr	r3, [pc, #16]	@ (800781c <mem_init+0x6c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a05      	ldr	r2, [pc, #20]	@ (8007824 <mem_init+0x74>)
 800780e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20005388 	.word	0x20005388
 800781c:	200059dc 	.word	0x200059dc
 8007820:	200059e0 	.word	0x200059e0
 8007824:	200059e4 	.word	0x200059e4

08007828 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff09 	bl	8007648 <mem_to_ptr>
 8007836:	4603      	mov	r3, r0
 8007838:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fef0 	bl	8007624 <ptr_to_mem>
 8007844:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff feea 	bl	8007624 <ptr_to_mem>
 8007850:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800785a:	d818      	bhi.n	800788e <mem_link_valid+0x66>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	885b      	ldrh	r3, [r3, #2]
 8007860:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007864:	d813      	bhi.n	800788e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800786a:	8afa      	ldrh	r2, [r7, #22]
 800786c:	429a      	cmp	r2, r3
 800786e:	d004      	beq.n	800787a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	8afa      	ldrh	r2, [r7, #22]
 8007876:	429a      	cmp	r2, r3
 8007878:	d109      	bne.n	800788e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800787a:	4b08      	ldr	r3, [pc, #32]	@ (800789c <mem_link_valid+0x74>)
 800787c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	429a      	cmp	r2, r3
 8007882:	d006      	beq.n	8007892 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	885b      	ldrh	r3, [r3, #2]
 8007888:	8afa      	ldrh	r2, [r7, #22]
 800788a:	429a      	cmp	r2, r3
 800788c:	d001      	beq.n	8007892 <mem_link_valid+0x6a>
    return 0;
 800788e:	2300      	movs	r3, #0
 8007890:	e000      	b.n	8007894 <mem_link_valid+0x6c>
  }
  return 1;
 8007892:	2301      	movs	r3, #1
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	200059e0 	.word	0x200059e0

080078a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d04c      	beq.n	8007948 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d007      	beq.n	80078c8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80078b8:	4b25      	ldr	r3, [pc, #148]	@ (8007950 <mem_free+0xb0>)
 80078ba:	f240 2273 	movw	r2, #627	@ 0x273
 80078be:	4925      	ldr	r1, [pc, #148]	@ (8007954 <mem_free+0xb4>)
 80078c0:	4825      	ldr	r0, [pc, #148]	@ (8007958 <mem_free+0xb8>)
 80078c2:	f00a f901 	bl	8011ac8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80078c6:	e040      	b.n	800794a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3b08      	subs	r3, #8
 80078cc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80078ce:	4b23      	ldr	r3, [pc, #140]	@ (800795c <mem_free+0xbc>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d306      	bcc.n	80078e6 <mem_free+0x46>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f103 020c 	add.w	r2, r3, #12
 80078de:	4b20      	ldr	r3, [pc, #128]	@ (8007960 <mem_free+0xc0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d907      	bls.n	80078f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80078e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007950 <mem_free+0xb0>)
 80078e8:	f240 227f 	movw	r2, #639	@ 0x27f
 80078ec:	491d      	ldr	r1, [pc, #116]	@ (8007964 <mem_free+0xc4>)
 80078ee:	481a      	ldr	r0, [pc, #104]	@ (8007958 <mem_free+0xb8>)
 80078f0:	f00a f8ea 	bl	8011ac8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80078f4:	e029      	b.n	800794a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d107      	bne.n	800790e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80078fe:	4b14      	ldr	r3, [pc, #80]	@ (8007950 <mem_free+0xb0>)
 8007900:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007904:	4918      	ldr	r1, [pc, #96]	@ (8007968 <mem_free+0xc8>)
 8007906:	4814      	ldr	r0, [pc, #80]	@ (8007958 <mem_free+0xb8>)
 8007908:	f00a f8de 	bl	8011ac8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800790c:	e01d      	b.n	800794a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff ff8a 	bl	8007828 <mem_link_valid>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d107      	bne.n	800792a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <mem_free+0xb0>)
 800791c:	f240 2295 	movw	r2, #661	@ 0x295
 8007920:	4912      	ldr	r1, [pc, #72]	@ (800796c <mem_free+0xcc>)
 8007922:	480d      	ldr	r0, [pc, #52]	@ (8007958 <mem_free+0xb8>)
 8007924:	f00a f8d0 	bl	8011ac8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007928:	e00f      	b.n	800794a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007930:	4b0f      	ldr	r3, [pc, #60]	@ (8007970 <mem_free+0xd0>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	429a      	cmp	r2, r3
 8007938:	d202      	bcs.n	8007940 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800793a:	4a0d      	ldr	r2, [pc, #52]	@ (8007970 <mem_free+0xd0>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff fe93 	bl	800766c <plug_holes>
 8007946:	e000      	b.n	800794a <mem_free+0xaa>
    return;
 8007948:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08012a38 	.word	0x08012a38
 8007954:	08012b0c 	.word	0x08012b0c
 8007958:	08012a80 	.word	0x08012a80
 800795c:	200059dc 	.word	0x200059dc
 8007960:	200059e0 	.word	0x200059e0
 8007964:	08012b30 	.word	0x08012b30
 8007968:	08012b4c 	.word	0x08012b4c
 800796c:	08012b74 	.word	0x08012b74
 8007970:	200059e4 	.word	0x200059e4

08007974 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007980:	887b      	ldrh	r3, [r7, #2]
 8007982:	3303      	adds	r3, #3
 8007984:	b29b      	uxth	r3, r3
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800798c:	8bfb      	ldrh	r3, [r7, #30]
 800798e:	2b0b      	cmp	r3, #11
 8007990:	d801      	bhi.n	8007996 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007992:	230c      	movs	r3, #12
 8007994:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007996:	8bfb      	ldrh	r3, [r7, #30]
 8007998:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800799c:	d803      	bhi.n	80079a6 <mem_trim+0x32>
 800799e:	8bfa      	ldrh	r2, [r7, #30]
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d201      	bcs.n	80079aa <mem_trim+0x36>
    return NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e0cc      	b.n	8007b44 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80079aa:	4b68      	ldr	r3, [pc, #416]	@ (8007b4c <mem_trim+0x1d8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d304      	bcc.n	80079be <mem_trim+0x4a>
 80079b4:	4b66      	ldr	r3, [pc, #408]	@ (8007b50 <mem_trim+0x1dc>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d306      	bcc.n	80079cc <mem_trim+0x58>
 80079be:	4b65      	ldr	r3, [pc, #404]	@ (8007b54 <mem_trim+0x1e0>)
 80079c0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80079c4:	4964      	ldr	r1, [pc, #400]	@ (8007b58 <mem_trim+0x1e4>)
 80079c6:	4865      	ldr	r0, [pc, #404]	@ (8007b5c <mem_trim+0x1e8>)
 80079c8:	f00a f87e 	bl	8011ac8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80079cc:	4b5f      	ldr	r3, [pc, #380]	@ (8007b4c <mem_trim+0x1d8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d304      	bcc.n	80079e0 <mem_trim+0x6c>
 80079d6:	4b5e      	ldr	r3, [pc, #376]	@ (8007b50 <mem_trim+0x1dc>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d301      	bcc.n	80079e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	e0af      	b.n	8007b44 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3b08      	subs	r3, #8
 80079e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80079ea:	69b8      	ldr	r0, [r7, #24]
 80079ec:	f7ff fe2c 	bl	8007648 <mem_to_ptr>
 80079f0:	4603      	mov	r3, r0
 80079f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	881a      	ldrh	r2, [r3, #0]
 80079f8:	8afb      	ldrh	r3, [r7, #22]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b08      	subs	r3, #8
 8007a00:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007a02:	8bfa      	ldrh	r2, [r7, #30]
 8007a04:	8abb      	ldrh	r3, [r7, #20]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d906      	bls.n	8007a18 <mem_trim+0xa4>
 8007a0a:	4b52      	ldr	r3, [pc, #328]	@ (8007b54 <mem_trim+0x1e0>)
 8007a0c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007a10:	4953      	ldr	r1, [pc, #332]	@ (8007b60 <mem_trim+0x1ec>)
 8007a12:	4852      	ldr	r0, [pc, #328]	@ (8007b5c <mem_trim+0x1e8>)
 8007a14:	f00a f858 	bl	8011ac8 <iprintf>
  if (newsize > size) {
 8007a18:	8bfa      	ldrh	r2, [r7, #30]
 8007a1a:	8abb      	ldrh	r3, [r7, #20]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d901      	bls.n	8007a24 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e08f      	b.n	8007b44 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007a24:	8bfa      	ldrh	r2, [r7, #30]
 8007a26:	8abb      	ldrh	r3, [r7, #20]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d101      	bne.n	8007a30 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	e089      	b.n	8007b44 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fdf5 	bl	8007624 <ptr_to_mem>
 8007a3a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	791b      	ldrb	r3, [r3, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d13f      	bne.n	8007ac4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007a4c:	d106      	bne.n	8007a5c <mem_trim+0xe8>
 8007a4e:	4b41      	ldr	r3, [pc, #260]	@ (8007b54 <mem_trim+0x1e0>)
 8007a50:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007a54:	4943      	ldr	r1, [pc, #268]	@ (8007b64 <mem_trim+0x1f0>)
 8007a56:	4841      	ldr	r0, [pc, #260]	@ (8007b5c <mem_trim+0x1e8>)
 8007a58:	f00a f836 	bl	8011ac8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007a62:	8afa      	ldrh	r2, [r7, #22]
 8007a64:	8bfb      	ldrh	r3, [r7, #30]
 8007a66:	4413      	add	r3, r2
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b68 <mem_trim+0x1f4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d106      	bne.n	8007a86 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8007a78:	89fb      	ldrh	r3, [r7, #14]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fdd2 	bl	8007624 <ptr_to_mem>
 8007a80:	4603      	mov	r3, r0
 8007a82:	4a39      	ldr	r2, [pc, #228]	@ (8007b68 <mem_trim+0x1f4>)
 8007a84:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007a86:	89fb      	ldrh	r3, [r7, #14]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fdcb 	bl	8007624 <ptr_to_mem>
 8007a8e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2200      	movs	r2, #0
 8007a94:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	89ba      	ldrh	r2, [r7, #12]
 8007a9a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	8afa      	ldrh	r2, [r7, #22]
 8007aa0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	89fa      	ldrh	r2, [r7, #14]
 8007aa6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007ab0:	d047      	beq.n	8007b42 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	881b      	ldrh	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff fdb4 	bl	8007624 <ptr_to_mem>
 8007abc:	4602      	mov	r2, r0
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	8053      	strh	r3, [r2, #2]
 8007ac2:	e03e      	b.n	8007b42 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007ac4:	8bfb      	ldrh	r3, [r7, #30]
 8007ac6:	f103 0214 	add.w	r2, r3, #20
 8007aca:	8abb      	ldrh	r3, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d838      	bhi.n	8007b42 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007ad0:	8afa      	ldrh	r2, [r7, #22]
 8007ad2:	8bfb      	ldrh	r3, [r7, #30]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	3308      	adds	r3, #8
 8007ada:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007ae4:	d106      	bne.n	8007af4 <mem_trim+0x180>
 8007ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b54 <mem_trim+0x1e0>)
 8007ae8:	f240 3216 	movw	r2, #790	@ 0x316
 8007aec:	491d      	ldr	r1, [pc, #116]	@ (8007b64 <mem_trim+0x1f0>)
 8007aee:	481b      	ldr	r0, [pc, #108]	@ (8007b5c <mem_trim+0x1e8>)
 8007af0:	f009 ffea 	bl	8011ac8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007af4:	89fb      	ldrh	r3, [r7, #14]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fd94 	bl	8007624 <ptr_to_mem>
 8007afc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007afe:	4b1a      	ldr	r3, [pc, #104]	@ (8007b68 <mem_trim+0x1f4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d202      	bcs.n	8007b0e <mem_trim+0x19a>
      lfree = mem2;
 8007b08:	4a17      	ldr	r2, [pc, #92]	@ (8007b68 <mem_trim+0x1f4>)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2200      	movs	r2, #0
 8007b12:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	881a      	ldrh	r2, [r3, #0]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	8afa      	ldrh	r2, [r7, #22]
 8007b20:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	89fa      	ldrh	r2, [r7, #14]
 8007b26:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007b30:	d007      	beq.n	8007b42 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff fd74 	bl	8007624 <ptr_to_mem>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	89fb      	ldrh	r3, [r7, #14]
 8007b40:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007b42:	687b      	ldr	r3, [r7, #4]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3720      	adds	r7, #32
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	200059dc 	.word	0x200059dc
 8007b50:	200059e0 	.word	0x200059e0
 8007b54:	08012a38 	.word	0x08012a38
 8007b58:	08012ba8 	.word	0x08012ba8
 8007b5c:	08012a80 	.word	0x08012a80
 8007b60:	08012bc0 	.word	0x08012bc0
 8007b64:	08012be0 	.word	0x08012be0
 8007b68:	200059e4 	.word	0x200059e4

08007b6c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <mem_malloc+0x14>
    return NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e0d9      	b.n	8007d34 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	3303      	adds	r3, #3
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	f023 0303 	bic.w	r3, r3, #3
 8007b8a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007b8c:	8bbb      	ldrh	r3, [r7, #28]
 8007b8e:	2b0b      	cmp	r3, #11
 8007b90:	d801      	bhi.n	8007b96 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007b92:	230c      	movs	r3, #12
 8007b94:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007b96:	8bbb      	ldrh	r3, [r7, #28]
 8007b98:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007b9c:	d803      	bhi.n	8007ba6 <mem_malloc+0x3a>
 8007b9e:	8bba      	ldrh	r2, [r7, #28]
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d201      	bcs.n	8007baa <mem_malloc+0x3e>
    return NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e0c4      	b.n	8007d34 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007baa:	4b64      	ldr	r3, [pc, #400]	@ (8007d3c <mem_malloc+0x1d0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff fd4a 	bl	8007648 <mem_to_ptr>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	83fb      	strh	r3, [r7, #30]
 8007bb8:	e0b4      	b.n	8007d24 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007bba:	8bfb      	ldrh	r3, [r7, #30]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fd31 	bl	8007624 <ptr_to_mem>
 8007bc2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	791b      	ldrb	r3, [r3, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f040 80a4 	bne.w	8007d16 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	8bfb      	ldrh	r3, [r7, #30]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f1a3 0208 	sub.w	r2, r3, #8
 8007bdc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007bde:	429a      	cmp	r2, r3
 8007be0:	f0c0 8099 	bcc.w	8007d16 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	8bfb      	ldrh	r3, [r7, #30]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f1a3 0208 	sub.w	r2, r3, #8
 8007bf2:	8bbb      	ldrh	r3, [r7, #28]
 8007bf4:	3314      	adds	r3, #20
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d333      	bcc.n	8007c62 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007bfa:	8bfa      	ldrh	r2, [r7, #30]
 8007bfc:	8bbb      	ldrh	r3, [r7, #28]
 8007bfe:	4413      	add	r3, r2
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3308      	adds	r3, #8
 8007c04:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007c06:	8a7b      	ldrh	r3, [r7, #18]
 8007c08:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007c0c:	d106      	bne.n	8007c1c <mem_malloc+0xb0>
 8007c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8007d40 <mem_malloc+0x1d4>)
 8007c10:	f240 3287 	movw	r2, #903	@ 0x387
 8007c14:	494b      	ldr	r1, [pc, #300]	@ (8007d44 <mem_malloc+0x1d8>)
 8007c16:	484c      	ldr	r0, [pc, #304]	@ (8007d48 <mem_malloc+0x1dc>)
 8007c18:	f009 ff56 	bl	8011ac8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007c1c:	8a7b      	ldrh	r3, [r7, #18]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fd00 	bl	8007624 <ptr_to_mem>
 8007c24:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	881a      	ldrh	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8bfa      	ldrh	r2, [r7, #30]
 8007c38:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	8a7a      	ldrh	r2, [r7, #18]
 8007c3e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2201      	movs	r2, #1
 8007c44:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007c4e:	d00b      	beq.n	8007c68 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7ff fce5 	bl	8007624 <ptr_to_mem>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	8a7b      	ldrh	r3, [r7, #18]
 8007c5e:	8053      	strh	r3, [r2, #2]
 8007c60:	e002      	b.n	8007c68 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2201      	movs	r2, #1
 8007c66:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007c68:	4b34      	ldr	r3, [pc, #208]	@ (8007d3c <mem_malloc+0x1d0>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d127      	bne.n	8007cc2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8007c72:	4b32      	ldr	r3, [pc, #200]	@ (8007d3c <mem_malloc+0x1d0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007c78:	e005      	b.n	8007c86 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fcd0 	bl	8007624 <ptr_to_mem>
 8007c84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	791b      	ldrb	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d004      	beq.n	8007c98 <mem_malloc+0x12c>
 8007c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d4c <mem_malloc+0x1e0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d1f0      	bne.n	8007c7a <mem_malloc+0x10e>
          }
          lfree = cur;
 8007c98:	4a28      	ldr	r2, [pc, #160]	@ (8007d3c <mem_malloc+0x1d0>)
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007c9e:	4b27      	ldr	r3, [pc, #156]	@ (8007d3c <mem_malloc+0x1d0>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8007d4c <mem_malloc+0x1e0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d00b      	beq.n	8007cc2 <mem_malloc+0x156>
 8007caa:	4b24      	ldr	r3, [pc, #144]	@ (8007d3c <mem_malloc+0x1d0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	791b      	ldrb	r3, [r3, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d006      	beq.n	8007cc2 <mem_malloc+0x156>
 8007cb4:	4b22      	ldr	r3, [pc, #136]	@ (8007d40 <mem_malloc+0x1d4>)
 8007cb6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007cba:	4925      	ldr	r1, [pc, #148]	@ (8007d50 <mem_malloc+0x1e4>)
 8007cbc:	4822      	ldr	r0, [pc, #136]	@ (8007d48 <mem_malloc+0x1dc>)
 8007cbe:	f009 ff03 	bl	8011ac8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007cc2:	8bba      	ldrh	r2, [r7, #28]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3308      	adds	r3, #8
 8007cca:	4a20      	ldr	r2, [pc, #128]	@ (8007d4c <mem_malloc+0x1e0>)
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d906      	bls.n	8007ce0 <mem_malloc+0x174>
 8007cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d40 <mem_malloc+0x1d4>)
 8007cd4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007cd8:	491e      	ldr	r1, [pc, #120]	@ (8007d54 <mem_malloc+0x1e8>)
 8007cda:	481b      	ldr	r0, [pc, #108]	@ (8007d48 <mem_malloc+0x1dc>)
 8007cdc:	f009 fef4 	bl	8011ac8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d006      	beq.n	8007cf8 <mem_malloc+0x18c>
 8007cea:	4b15      	ldr	r3, [pc, #84]	@ (8007d40 <mem_malloc+0x1d4>)
 8007cec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007cf0:	4919      	ldr	r1, [pc, #100]	@ (8007d58 <mem_malloc+0x1ec>)
 8007cf2:	4815      	ldr	r0, [pc, #84]	@ (8007d48 <mem_malloc+0x1dc>)
 8007cf4:	f009 fee8 	bl	8011ac8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d006      	beq.n	8007d10 <mem_malloc+0x1a4>
 8007d02:	4b0f      	ldr	r3, [pc, #60]	@ (8007d40 <mem_malloc+0x1d4>)
 8007d04:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007d08:	4914      	ldr	r1, [pc, #80]	@ (8007d5c <mem_malloc+0x1f0>)
 8007d0a:	480f      	ldr	r0, [pc, #60]	@ (8007d48 <mem_malloc+0x1dc>)
 8007d0c:	f009 fedc 	bl	8011ac8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3308      	adds	r3, #8
 8007d14:	e00e      	b.n	8007d34 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007d16:	8bfb      	ldrh	r3, [r7, #30]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7ff fc83 	bl	8007624 <ptr_to_mem>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d24:	8bfa      	ldrh	r2, [r7, #30]
 8007d26:	8bbb      	ldrh	r3, [r7, #28]
 8007d28:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	f4ff af44 	bcc.w	8007bba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200059e4 	.word	0x200059e4
 8007d40:	08012a38 	.word	0x08012a38
 8007d44:	08012be0 	.word	0x08012be0
 8007d48:	08012a80 	.word	0x08012a80
 8007d4c:	200059e0 	.word	0x200059e0
 8007d50:	08012bf4 	.word	0x08012bf4
 8007d54:	08012c10 	.word	0x08012c10
 8007d58:	08012c40 	.word	0x08012c40
 8007d5c:	08012c70 	.word	0x08012c70

08007d60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	3303      	adds	r3, #3
 8007d76:	f023 0303 	bic.w	r3, r3, #3
 8007d7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e011      	b.n	8007da6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	885b      	ldrh	r3, [r3, #2]
 8007daa:	461a      	mov	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4293      	cmp	r3, r2
 8007db0:	dbe7      	blt.n	8007d82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007db2:	bf00      	nop
 8007db4:	bf00      	nop
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	80fb      	strh	r3, [r7, #6]
 8007dca:	e009      	b.n	8007de0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	4a08      	ldr	r2, [pc, #32]	@ (8007df0 <memp_init+0x30>)
 8007dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff ffc3 	bl	8007d60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	80fb      	strh	r3, [r7, #6]
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d9f2      	bls.n	8007dcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	0801545c 	.word	0x0801545c

08007df4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d012      	beq.n	8007e30 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	6812      	ldr	r2, [r2, #0]
 8007e12:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <do_memp_malloc_pool+0x38>
 8007e1e:	4b07      	ldr	r3, [pc, #28]	@ (8007e3c <do_memp_malloc_pool+0x48>)
 8007e20:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007e24:	4906      	ldr	r1, [pc, #24]	@ (8007e40 <do_memp_malloc_pool+0x4c>)
 8007e26:	4807      	ldr	r0, [pc, #28]	@ (8007e44 <do_memp_malloc_pool+0x50>)
 8007e28:	f009 fe4e 	bl	8011ac8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	e000      	b.n	8007e32 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	08012c94 	.word	0x08012c94
 8007e40:	08012cc4 	.word	0x08012cc4
 8007e44:	08012ce8 	.word	0x08012ce8

08007e48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <memp_malloc_pool+0x1c>
 8007e56:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <memp_malloc_pool+0x38>)
 8007e58:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007e5c:	4909      	ldr	r1, [pc, #36]	@ (8007e84 <memp_malloc_pool+0x3c>)
 8007e5e:	480a      	ldr	r0, [pc, #40]	@ (8007e88 <memp_malloc_pool+0x40>)
 8007e60:	f009 fe32 	bl	8011ac8 <iprintf>
  if (desc == NULL) {
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <memp_malloc_pool+0x26>
    return NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e003      	b.n	8007e76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7ff ffc0 	bl	8007df4 <do_memp_malloc_pool>
 8007e74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	08012c94 	.word	0x08012c94
 8007e84:	08012d10 	.word	0x08012d10
 8007e88:	08012ce8 	.word	0x08012ce8

08007e8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d908      	bls.n	8007eae <memp_malloc+0x22>
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <memp_malloc+0x3c>)
 8007e9e:	f240 1257 	movw	r2, #343	@ 0x157
 8007ea2:	490a      	ldr	r1, [pc, #40]	@ (8007ecc <memp_malloc+0x40>)
 8007ea4:	480a      	ldr	r0, [pc, #40]	@ (8007ed0 <memp_malloc+0x44>)
 8007ea6:	f009 fe0f 	bl	8011ac8 <iprintf>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e008      	b.n	8007ec0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	4a08      	ldr	r2, [pc, #32]	@ (8007ed4 <memp_malloc+0x48>)
 8007eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff ff9c 	bl	8007df4 <do_memp_malloc_pool>
 8007ebc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	08012c94 	.word	0x08012c94
 8007ecc:	08012d24 	.word	0x08012d24
 8007ed0:	08012ce8 	.word	0x08012ce8
 8007ed4:	0801545c 	.word	0x0801545c

08007ed8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <do_memp_free_pool+0x22>
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <do_memp_free_pool+0x40>)
 8007eee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007ef2:	490a      	ldr	r1, [pc, #40]	@ (8007f1c <do_memp_free_pool+0x44>)
 8007ef4:	480a      	ldr	r0, [pc, #40]	@ (8007f20 <do_memp_free_pool+0x48>)
 8007ef6:	f009 fde7 	bl	8011ac8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	08012c94 	.word	0x08012c94
 8007f1c:	08012d44 	.word	0x08012d44
 8007f20:	08012ce8 	.word	0x08012ce8

08007f24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d106      	bne.n	8007f42 <memp_free_pool+0x1e>
 8007f34:	4b0a      	ldr	r3, [pc, #40]	@ (8007f60 <memp_free_pool+0x3c>)
 8007f36:	f240 1295 	movw	r2, #405	@ 0x195
 8007f3a:	490a      	ldr	r1, [pc, #40]	@ (8007f64 <memp_free_pool+0x40>)
 8007f3c:	480a      	ldr	r0, [pc, #40]	@ (8007f68 <memp_free_pool+0x44>)
 8007f3e:	f009 fdc3 	bl	8011ac8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <memp_free_pool+0x34>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d004      	beq.n	8007f58 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff ffc1 	bl	8007ed8 <do_memp_free_pool>
 8007f56:	e000      	b.n	8007f5a <memp_free_pool+0x36>
    return;
 8007f58:	bf00      	nop
}
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	08012c94 	.word	0x08012c94
 8007f64:	08012d10 	.word	0x08012d10
 8007f68:	08012ce8 	.word	0x08012ce8

08007f6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d907      	bls.n	8007f8e <memp_free+0x22>
 8007f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <memp_free+0x44>)
 8007f80:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007f84:	490b      	ldr	r1, [pc, #44]	@ (8007fb4 <memp_free+0x48>)
 8007f86:	480c      	ldr	r0, [pc, #48]	@ (8007fb8 <memp_free+0x4c>)
 8007f88:	f009 fd9e 	bl	8011ac8 <iprintf>
 8007f8c:	e00c      	b.n	8007fa8 <memp_free+0x3c>

  if (mem == NULL) {
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	4a09      	ldr	r2, [pc, #36]	@ (8007fbc <memp_free+0x50>)
 8007f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff ff9a 	bl	8007ed8 <do_memp_free_pool>
 8007fa4:	e000      	b.n	8007fa8 <memp_free+0x3c>
    return;
 8007fa6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	08012c94 	.word	0x08012c94
 8007fb4:	08012d64 	.word	0x08012d64
 8007fb8:	08012ce8 	.word	0x08012ce8
 8007fbc:	0801545c 	.word	0x0801545c

08007fc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d108      	bne.n	8007ff6 <netif_add+0x26>
 8007fe4:	4b57      	ldr	r3, [pc, #348]	@ (8008144 <netif_add+0x174>)
 8007fe6:	f240 1227 	movw	r2, #295	@ 0x127
 8007fea:	4957      	ldr	r1, [pc, #348]	@ (8008148 <netif_add+0x178>)
 8007fec:	4857      	ldr	r0, [pc, #348]	@ (800814c <netif_add+0x17c>)
 8007fee:	f009 fd6b 	bl	8011ac8 <iprintf>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e0a2      	b.n	800813c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <netif_add+0x3e>
 8007ffc:	4b51      	ldr	r3, [pc, #324]	@ (8008144 <netif_add+0x174>)
 8007ffe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008002:	4953      	ldr	r1, [pc, #332]	@ (8008150 <netif_add+0x180>)
 8008004:	4851      	ldr	r0, [pc, #324]	@ (800814c <netif_add+0x17c>)
 8008006:	f009 fd5f 	bl	8011ac8 <iprintf>
 800800a:	2300      	movs	r3, #0
 800800c:	e096      	b.n	800813c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008014:	4b4f      	ldr	r3, [pc, #316]	@ (8008154 <netif_add+0x184>)
 8008016:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800801e:	4b4d      	ldr	r3, [pc, #308]	@ (8008154 <netif_add+0x184>)
 8008020:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008028:	4b4a      	ldr	r3, [pc, #296]	@ (8008154 <netif_add+0x184>)
 800802a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	4a45      	ldr	r2, [pc, #276]	@ (8008158 <netif_add+0x188>)
 8008042:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a3a      	ldr	r2, [r7, #32]
 800805c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800805e:	4b3f      	ldr	r3, [pc, #252]	@ (800815c <netif_add+0x18c>)
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800806c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f913 	bl	80082a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	4798      	blx	r3
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <netif_add+0xba>
    return NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	e058      	b.n	800813c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008090:	2bff      	cmp	r3, #255	@ 0xff
 8008092:	d103      	bne.n	800809c <netif_add+0xcc>
        netif->num = 0;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80080a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008160 <netif_add+0x190>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e02b      	b.n	8008100 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d106      	bne.n	80080be <netif_add+0xee>
 80080b0:	4b24      	ldr	r3, [pc, #144]	@ (8008144 <netif_add+0x174>)
 80080b2:	f240 128b 	movw	r2, #395	@ 0x18b
 80080b6:	492b      	ldr	r1, [pc, #172]	@ (8008164 <netif_add+0x194>)
 80080b8:	4824      	ldr	r0, [pc, #144]	@ (800814c <netif_add+0x17c>)
 80080ba:	f009 fd05 	bl	8011ac8 <iprintf>
        num_netifs++;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3301      	adds	r3, #1
 80080c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2bff      	cmp	r3, #255	@ 0xff
 80080c8:	dd06      	ble.n	80080d8 <netif_add+0x108>
 80080ca:	4b1e      	ldr	r3, [pc, #120]	@ (8008144 <netif_add+0x174>)
 80080cc:	f240 128d 	movw	r2, #397	@ 0x18d
 80080d0:	4925      	ldr	r1, [pc, #148]	@ (8008168 <netif_add+0x198>)
 80080d2:	481e      	ldr	r0, [pc, #120]	@ (800814c <netif_add+0x17c>)
 80080d4:	f009 fcf8 	bl	8011ac8 <iprintf>
        if (netif2->num == netif->num) {
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d108      	bne.n	80080fa <netif_add+0x12a>
          netif->num++;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080ee:	3301      	adds	r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80080f8:	e005      	b.n	8008106 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1d0      	bne.n	80080a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1be      	bne.n	800808a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008112:	2bfe      	cmp	r3, #254	@ 0xfe
 8008114:	d103      	bne.n	800811e <netif_add+0x14e>
    netif_num = 0;
 8008116:	4b11      	ldr	r3, [pc, #68]	@ (800815c <netif_add+0x18c>)
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e006      	b.n	800812c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008124:	3301      	adds	r3, #1
 8008126:	b2da      	uxtb	r2, r3
 8008128:	4b0c      	ldr	r3, [pc, #48]	@ (800815c <netif_add+0x18c>)
 800812a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800812c:	4b0c      	ldr	r3, [pc, #48]	@ (8008160 <netif_add+0x190>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008134:	4a0a      	ldr	r2, [pc, #40]	@ (8008160 <netif_add+0x190>)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800813a:	68fb      	ldr	r3, [r7, #12]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	08012d80 	.word	0x08012d80
 8008148:	08012e14 	.word	0x08012e14
 800814c:	08012dd0 	.word	0x08012dd0
 8008150:	08012e30 	.word	0x08012e30
 8008154:	080154c0 	.word	0x080154c0
 8008158:	0800857b 	.word	0x0800857b
 800815c:	200088dc 	.word	0x200088dc
 8008160:	200088d4 	.word	0x200088d4
 8008164:	08012e54 	.word	0x08012e54
 8008168:	08012e68 	.word	0x08012e68

0800816c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f002 fbb7 	bl	800a8ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f007 f8ab 	bl	800f2dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <netif_do_set_ipaddr+0x20>
 80081a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008218 <netif_do_set_ipaddr+0x88>)
 80081a4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80081a8:	491c      	ldr	r1, [pc, #112]	@ (800821c <netif_do_set_ipaddr+0x8c>)
 80081aa:	481d      	ldr	r0, [pc, #116]	@ (8008220 <netif_do_set_ipaddr+0x90>)
 80081ac:	f009 fc8c 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d106      	bne.n	80081c4 <netif_do_set_ipaddr+0x34>
 80081b6:	4b18      	ldr	r3, [pc, #96]	@ (8008218 <netif_do_set_ipaddr+0x88>)
 80081b8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80081bc:	4917      	ldr	r1, [pc, #92]	@ (800821c <netif_do_set_ipaddr+0x8c>)
 80081be:	4818      	ldr	r0, [pc, #96]	@ (8008220 <netif_do_set_ipaddr+0x90>)
 80081c0:	f009 fc82 	bl	8011ac8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3304      	adds	r3, #4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d01c      	beq.n	800820c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	3304      	adds	r3, #4
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80081e2:	f107 0314 	add.w	r3, r7, #20
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff ffbf 	bl	800816c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <netif_do_set_ipaddr+0x6a>
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	e000      	b.n	80081fc <netif_do_set_ipaddr+0x6c>
 80081fa:	2300      	movs	r3, #0
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008200:	2101      	movs	r1, #1
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f8d2 	bl	80083ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	08012d80 	.word	0x08012d80
 800821c:	08012e98 	.word	0x08012e98
 8008220:	08012dd0 	.word	0x08012dd0

08008224 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3308      	adds	r3, #8
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d00a      	beq.n	8008254 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <netif_do_set_netmask+0x26>
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	e000      	b.n	800824c <netif_do_set_netmask+0x28>
 800824a:	2300      	movs	r3, #0
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	330c      	adds	r3, #12
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d00a      	beq.n	8008292 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <netif_do_set_gw+0x26>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	e000      	b.n	800828a <netif_do_set_gw+0x28>
 8008288:	2300      	movs	r3, #0
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b088      	sub	sp, #32
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80082bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008330 <netif_set_addr+0x90>)
 80082be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80082c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008330 <netif_set_addr+0x90>)
 80082c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80082d0:	4b17      	ldr	r3, [pc, #92]	@ (8008330 <netif_set_addr+0x90>)
 80082d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <netif_set_addr+0x42>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <netif_set_addr+0x46>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <netif_set_addr+0x48>
 80082e6:	2300      	movs	r3, #0
 80082e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d006      	beq.n	80082fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80082f0:	f107 0310 	add.w	r3, r7, #16
 80082f4:	461a      	mov	r2, r3
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff ff49 	bl	8008190 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80082fe:	69fa      	ldr	r2, [r7, #28]
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff ff8e 	bl	8008224 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7ff ffa8 	bl	8008262 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008318:	f107 0310 	add.w	r3, r7, #16
 800831c:	461a      	mov	r2, r3
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f7ff ff35 	bl	8008190 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008326:	bf00      	nop
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	080154c0 	.word	0x080154c0

08008334 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800833c:	4a04      	ldr	r2, [pc, #16]	@ (8008350 <netif_set_default+0x1c>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008342:	bf00      	nop
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	200088d8 	.word	0x200088d8

08008354 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d107      	bne.n	8008372 <netif_set_up+0x1e>
 8008362:	4b0f      	ldr	r3, [pc, #60]	@ (80083a0 <netif_set_up+0x4c>)
 8008364:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8008368:	490e      	ldr	r1, [pc, #56]	@ (80083a4 <netif_set_up+0x50>)
 800836a:	480f      	ldr	r0, [pc, #60]	@ (80083a8 <netif_set_up+0x54>)
 800836c:	f009 fbac 	bl	8011ac8 <iprintf>
 8008370:	e013      	b.n	800839a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10c      	bne.n	800839a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	b2da      	uxtb	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008392:	2103      	movs	r1, #3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f809 	bl	80083ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	08012d80 	.word	0x08012d80
 80083a4:	08012f08 	.word	0x08012f08
 80083a8:	08012dd0 	.word	0x08012dd0

080083ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <netif_issue_reports+0x20>
 80083be:	4b18      	ldr	r3, [pc, #96]	@ (8008420 <netif_issue_reports+0x74>)
 80083c0:	f240 326d 	movw	r2, #877	@ 0x36d
 80083c4:	4917      	ldr	r1, [pc, #92]	@ (8008424 <netif_issue_reports+0x78>)
 80083c6:	4818      	ldr	r0, [pc, #96]	@ (8008428 <netif_issue_reports+0x7c>)
 80083c8:	f009 fb7e 	bl	8011ac8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01e      	beq.n	8008418 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80083e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d017      	beq.n	8008418 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d013      	beq.n	800841a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3304      	adds	r3, #4
 80083f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f007 fecd 	bl	80101b0 <etharp_request>
 8008416:	e000      	b.n	800841a <netif_issue_reports+0x6e>
    return;
 8008418:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	08012d80 	.word	0x08012d80
 8008424:	08012f24 	.word	0x08012f24
 8008428:	08012dd0 	.word	0x08012dd0

0800842c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d107      	bne.n	800844a <netif_set_down+0x1e>
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <netif_set_down+0x58>)
 800843c:	f240 329b 	movw	r2, #923	@ 0x39b
 8008440:	4911      	ldr	r1, [pc, #68]	@ (8008488 <netif_set_down+0x5c>)
 8008442:	4812      	ldr	r0, [pc, #72]	@ (800848c <netif_set_down+0x60>)
 8008444:	f009 fb40 	bl	8011ac8 <iprintf>
 8008448:	e019      	b.n	800847e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d012      	beq.n	800847e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f007 fa57 	bl	800f92c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	08012d80 	.word	0x08012d80
 8008488:	08012f48 	.word	0x08012f48
 800848c:	08012dd0 	.word	0x08012dd0

08008490 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d107      	bne.n	80084ae <netif_set_link_up+0x1e>
 800849e:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <netif_set_link_up+0x5c>)
 80084a0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80084a4:	4912      	ldr	r1, [pc, #72]	@ (80084f0 <netif_set_link_up+0x60>)
 80084a6:	4813      	ldr	r0, [pc, #76]	@ (80084f4 <netif_set_link_up+0x64>)
 80084a8:	f009 fb0e 	bl	8011ac8 <iprintf>
 80084ac:	e01b      	b.n	80084e6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d114      	bne.n	80084e6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80084c2:	f043 0304 	orr.w	r3, r3, #4
 80084c6:	b2da      	uxtb	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80084ce:	2103      	movs	r1, #3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ff6b 	bl	80083ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <netif_set_link_up+0x56>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	08012d80 	.word	0x08012d80
 80084f0:	08012f68 	.word	0x08012f68
 80084f4:	08012dd0 	.word	0x08012dd0

080084f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d107      	bne.n	8008516 <netif_set_link_down+0x1e>
 8008506:	4b11      	ldr	r3, [pc, #68]	@ (800854c <netif_set_link_down+0x54>)
 8008508:	f240 4206 	movw	r2, #1030	@ 0x406
 800850c:	4910      	ldr	r1, [pc, #64]	@ (8008550 <netif_set_link_down+0x58>)
 800850e:	4811      	ldr	r0, [pc, #68]	@ (8008554 <netif_set_link_down+0x5c>)
 8008510:	f009 fada 	bl	8011ac8 <iprintf>
 8008514:	e017      	b.n	8008546 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800852a:	f023 0304 	bic.w	r3, r3, #4
 800852e:	b2da      	uxtb	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <netif_set_link_down+0x4e>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	08012d80 	.word	0x08012d80
 8008550:	08012f8c 	.word	0x08012f8c
 8008554:	08012dd0 	.word	0x08012dd0

08008558 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	61da      	str	r2, [r3, #28]
  }
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008586:	f06f 030b 	mvn.w	r3, #11
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d013      	beq.n	80085d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80085a8:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <netif_get_by_index+0x48>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	e00c      	b.n	80085ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80085b6:	3301      	adds	r3, #1
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	79fa      	ldrb	r2, [r7, #7]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d101      	bne.n	80085c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	e006      	b.n	80085d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1ef      	bne.n	80085b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	200088d4 	.word	0x200088d4

080085e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80085e8:	4b03      	ldr	r3, [pc, #12]	@ (80085f8 <pbuf_pool_is_empty+0x14>)
 80085ea:	2201      	movs	r2, #1
 80085ec:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80085ee:	bf00      	nop
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	200088dd 	.word	0x200088dd

080085fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4611      	mov	r1, r2
 8008608:	461a      	mov	r2, r3
 800860a:	460b      	mov	r3, r1
 800860c:	80fb      	strh	r3, [r7, #6]
 800860e:	4613      	mov	r3, r2
 8008610:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	88fa      	ldrh	r2, [r7, #6]
 8008622:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	88ba      	ldrh	r2, [r7, #4]
 8008628:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800862a:	8b3b      	ldrh	r3, [r7, #24]
 800862c:	b2da      	uxtb	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	7f3a      	ldrb	r2, [r7, #28]
 8008636:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	73da      	strb	r2, [r3, #15]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08c      	sub	sp, #48	@ 0x30
 8008654:	af02      	add	r7, sp, #8
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
 800865a:	460b      	mov	r3, r1
 800865c:	80bb      	strh	r3, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008666:	887b      	ldrh	r3, [r7, #2]
 8008668:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800866c:	d07f      	beq.n	800876e <pbuf_alloc+0x11e>
 800866e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008672:	f300 80c8 	bgt.w	8008806 <pbuf_alloc+0x1b6>
 8008676:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800867a:	d010      	beq.n	800869e <pbuf_alloc+0x4e>
 800867c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008680:	f300 80c1 	bgt.w	8008806 <pbuf_alloc+0x1b6>
 8008684:	2b01      	cmp	r3, #1
 8008686:	d002      	beq.n	800868e <pbuf_alloc+0x3e>
 8008688:	2b41      	cmp	r3, #65	@ 0x41
 800868a:	f040 80bc 	bne.w	8008806 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800868e:	887a      	ldrh	r2, [r7, #2]
 8008690:	88bb      	ldrh	r3, [r7, #4]
 8008692:	4619      	mov	r1, r3
 8008694:	2000      	movs	r0, #0
 8008696:	f000 f8d1 	bl	800883c <pbuf_alloc_reference>
 800869a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800869c:	e0bd      	b.n	800881a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80086a6:	88bb      	ldrh	r3, [r7, #4]
 80086a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80086aa:	2008      	movs	r0, #8
 80086ac:	f7ff fbee 	bl	8007e8c <memp_malloc>
 80086b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d109      	bne.n	80086cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80086b8:	f7ff ff94 	bl	80085e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80086c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086c4:	f000 faa8 	bl	8008c18 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	e0a7      	b.n	800881c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80086cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086ce:	3303      	adds	r3, #3
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80086dc:	b29b      	uxth	r3, r3
 80086de:	8b7a      	ldrh	r2, [r7, #26]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	bf28      	it	cs
 80086e4:	4613      	movcs	r3, r2
 80086e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80086e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80086ea:	3310      	adds	r3, #16
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	3303      	adds	r3, #3
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	4618      	mov	r0, r3
 80086f8:	89f9      	ldrh	r1, [r7, #14]
 80086fa:	8b7a      	ldrh	r2, [r7, #26]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9301      	str	r3, [sp, #4]
 8008700:	887b      	ldrh	r3, [r7, #2]
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	460b      	mov	r3, r1
 8008706:	4601      	mov	r1, r0
 8008708:	6938      	ldr	r0, [r7, #16]
 800870a:	f7ff ff77 	bl	80085fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d006      	beq.n	8008728 <pbuf_alloc+0xd8>
 800871a:	4b42      	ldr	r3, [pc, #264]	@ (8008824 <pbuf_alloc+0x1d4>)
 800871c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008720:	4941      	ldr	r1, [pc, #260]	@ (8008828 <pbuf_alloc+0x1d8>)
 8008722:	4842      	ldr	r0, [pc, #264]	@ (800882c <pbuf_alloc+0x1dc>)
 8008724:	f009 f9d0 	bl	8011ac8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008728:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800872a:	3303      	adds	r3, #3
 800872c:	f023 0303 	bic.w	r3, r3, #3
 8008730:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8008734:	d106      	bne.n	8008744 <pbuf_alloc+0xf4>
 8008736:	4b3b      	ldr	r3, [pc, #236]	@ (8008824 <pbuf_alloc+0x1d4>)
 8008738:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800873c:	493c      	ldr	r1, [pc, #240]	@ (8008830 <pbuf_alloc+0x1e0>)
 800873e:	483b      	ldr	r0, [pc, #236]	@ (800882c <pbuf_alloc+0x1dc>)
 8008740:	f009 f9c2 	bl	8011ac8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
 800874e:	e002      	b.n	8008756 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800875a:	8b7a      	ldrh	r2, [r7, #26]
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8008766:	8b7b      	ldrh	r3, [r7, #26]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d19e      	bne.n	80086aa <pbuf_alloc+0x5a>
      break;
 800876c:	e055      	b.n	800881a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800876e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008770:	3303      	adds	r3, #3
 8008772:	b29b      	uxth	r3, r3
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	b29a      	uxth	r2, r3
 800877a:	88bb      	ldrh	r3, [r7, #4]
 800877c:	3303      	adds	r3, #3
 800877e:	b29b      	uxth	r3, r3
 8008780:	f023 0303 	bic.w	r3, r3, #3
 8008784:	b29b      	uxth	r3, r3
 8008786:	4413      	add	r3, r2
 8008788:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800878a:	8b3b      	ldrh	r3, [r7, #24]
 800878c:	3310      	adds	r3, #16
 800878e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008790:	8b3a      	ldrh	r2, [r7, #24]
 8008792:	88bb      	ldrh	r3, [r7, #4]
 8008794:	3303      	adds	r3, #3
 8008796:	f023 0303 	bic.w	r3, r3, #3
 800879a:	429a      	cmp	r2, r3
 800879c:	d306      	bcc.n	80087ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800879e:	8afa      	ldrh	r2, [r7, #22]
 80087a0:	88bb      	ldrh	r3, [r7, #4]
 80087a2:	3303      	adds	r3, #3
 80087a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d201      	bcs.n	80087b0 <pbuf_alloc+0x160>
        return NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e035      	b.n	800881c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80087b0:	8afb      	ldrh	r3, [r7, #22]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff f9da 	bl	8007b6c <mem_malloc>
 80087b8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <pbuf_alloc+0x174>
        return NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e02b      	b.n	800881c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80087c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80087c6:	3310      	adds	r3, #16
 80087c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087ca:	4413      	add	r3, r2
 80087cc:	3303      	adds	r3, #3
 80087ce:	f023 0303 	bic.w	r3, r3, #3
 80087d2:	4618      	mov	r0, r3
 80087d4:	88b9      	ldrh	r1, [r7, #4]
 80087d6:	88ba      	ldrh	r2, [r7, #4]
 80087d8:	2300      	movs	r3, #0
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	887b      	ldrh	r3, [r7, #2]
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	460b      	mov	r3, r1
 80087e2:	4601      	mov	r1, r0
 80087e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087e6:	f7ff ff09 	bl	80085fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d010      	beq.n	8008818 <pbuf_alloc+0x1c8>
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <pbuf_alloc+0x1d4>)
 80087f8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80087fc:	490d      	ldr	r1, [pc, #52]	@ (8008834 <pbuf_alloc+0x1e4>)
 80087fe:	480b      	ldr	r0, [pc, #44]	@ (800882c <pbuf_alloc+0x1dc>)
 8008800:	f009 f962 	bl	8011ac8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008804:	e008      	b.n	8008818 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008806:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <pbuf_alloc+0x1d4>)
 8008808:	f240 1227 	movw	r2, #295	@ 0x127
 800880c:	490a      	ldr	r1, [pc, #40]	@ (8008838 <pbuf_alloc+0x1e8>)
 800880e:	4807      	ldr	r0, [pc, #28]	@ (800882c <pbuf_alloc+0x1dc>)
 8008810:	f009 f95a 	bl	8011ac8 <iprintf>
      return NULL;
 8008814:	2300      	movs	r3, #0
 8008816:	e001      	b.n	800881c <pbuf_alloc+0x1cc>
      break;
 8008818:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800881c:	4618      	mov	r0, r3
 800881e:	3728      	adds	r7, #40	@ 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	08012fb0 	.word	0x08012fb0
 8008828:	08012fe0 	.word	0x08012fe0
 800882c:	08013010 	.word	0x08013010
 8008830:	08013038 	.word	0x08013038
 8008834:	0801306c 	.word	0x0801306c
 8008838:	08013098 	.word	0x08013098

0800883c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af02      	add	r7, sp, #8
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
 8008848:	4613      	mov	r3, r2
 800884a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800884c:	883b      	ldrh	r3, [r7, #0]
 800884e:	2b41      	cmp	r3, #65	@ 0x41
 8008850:	d009      	beq.n	8008866 <pbuf_alloc_reference+0x2a>
 8008852:	883b      	ldrh	r3, [r7, #0]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d006      	beq.n	8008866 <pbuf_alloc_reference+0x2a>
 8008858:	4b0f      	ldr	r3, [pc, #60]	@ (8008898 <pbuf_alloc_reference+0x5c>)
 800885a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800885e:	490f      	ldr	r1, [pc, #60]	@ (800889c <pbuf_alloc_reference+0x60>)
 8008860:	480f      	ldr	r0, [pc, #60]	@ (80088a0 <pbuf_alloc_reference+0x64>)
 8008862:	f009 f931 	bl	8011ac8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008866:	2007      	movs	r0, #7
 8008868:	f7ff fb10 	bl	8007e8c <memp_malloc>
 800886c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008874:	2300      	movs	r3, #0
 8008876:	e00b      	b.n	8008890 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008878:	8879      	ldrh	r1, [r7, #2]
 800887a:	887a      	ldrh	r2, [r7, #2]
 800887c:	2300      	movs	r3, #0
 800887e:	9301      	str	r3, [sp, #4]
 8008880:	883b      	ldrh	r3, [r7, #0]
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	460b      	mov	r3, r1
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff feb7 	bl	80085fc <pbuf_init_alloced_pbuf>
  return p;
 800888e:	68fb      	ldr	r3, [r7, #12]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	08012fb0 	.word	0x08012fb0
 800889c:	080130b4 	.word	0x080130b4
 80088a0:	08013010 	.word	0x08013010

080088a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af02      	add	r7, sp, #8
 80088aa:	607b      	str	r3, [r7, #4]
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]
 80088b0:	460b      	mov	r3, r1
 80088b2:	81bb      	strh	r3, [r7, #12]
 80088b4:	4613      	mov	r3, r2
 80088b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80088bc:	8a7b      	ldrh	r3, [r7, #18]
 80088be:	3303      	adds	r3, #3
 80088c0:	f023 0203 	bic.w	r2, r3, #3
 80088c4:	89bb      	ldrh	r3, [r7, #12]
 80088c6:	441a      	add	r2, r3
 80088c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d901      	bls.n	80088d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e018      	b.n	8008904 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80088d8:	8a7b      	ldrh	r3, [r7, #18]
 80088da:	3303      	adds	r3, #3
 80088dc:	f023 0303 	bic.w	r3, r3, #3
 80088e0:	6a3a      	ldr	r2, [r7, #32]
 80088e2:	4413      	add	r3, r2
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	e001      	b.n	80088ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	89b9      	ldrh	r1, [r7, #12]
 80088f0:	89ba      	ldrh	r2, [r7, #12]
 80088f2:	2302      	movs	r3, #2
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	897b      	ldrh	r3, [r7, #10]
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	460b      	mov	r3, r1
 80088fc:	6979      	ldr	r1, [r7, #20]
 80088fe:	f7ff fe7d 	bl	80085fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008902:	687b      	ldr	r3, [r7, #4]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <pbuf_realloc+0x20>
 800891e:	4b3a      	ldr	r3, [pc, #232]	@ (8008a08 <pbuf_realloc+0xfc>)
 8008920:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008924:	4939      	ldr	r1, [pc, #228]	@ (8008a0c <pbuf_realloc+0x100>)
 8008926:	483a      	ldr	r0, [pc, #232]	@ (8008a10 <pbuf_realloc+0x104>)
 8008928:	f009 f8ce 	bl	8011ac8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	891b      	ldrh	r3, [r3, #8]
 8008930:	887a      	ldrh	r2, [r7, #2]
 8008932:	429a      	cmp	r2, r3
 8008934:	d263      	bcs.n	80089fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	891a      	ldrh	r2, [r3, #8]
 800893a:	887b      	ldrh	r3, [r7, #2]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008940:	887b      	ldrh	r3, [r7, #2]
 8008942:	817b      	strh	r3, [r7, #10]
  q = p;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008948:	e018      	b.n	800897c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	895b      	ldrh	r3, [r3, #10]
 800894e:	897a      	ldrh	r2, [r7, #10]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	891a      	ldrh	r2, [r3, #8]
 8008958:	893b      	ldrh	r3, [r7, #8]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	b29a      	uxth	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <pbuf_realloc+0x70>
 800896e:	4b26      	ldr	r3, [pc, #152]	@ (8008a08 <pbuf_realloc+0xfc>)
 8008970:	f240 12af 	movw	r2, #431	@ 0x1af
 8008974:	4927      	ldr	r1, [pc, #156]	@ (8008a14 <pbuf_realloc+0x108>)
 8008976:	4826      	ldr	r0, [pc, #152]	@ (8008a10 <pbuf_realloc+0x104>)
 8008978:	f009 f8a6 	bl	8011ac8 <iprintf>
  while (rem_len > q->len) {
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	895b      	ldrh	r3, [r3, #10]
 8008980:	897a      	ldrh	r2, [r7, #10]
 8008982:	429a      	cmp	r2, r3
 8008984:	d8e1      	bhi.n	800894a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	7b1b      	ldrb	r3, [r3, #12]
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	2b00      	cmp	r3, #0
 8008990:	d121      	bne.n	80089d6 <pbuf_realloc+0xca>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	895b      	ldrh	r3, [r3, #10]
 8008996:	897a      	ldrh	r2, [r7, #10]
 8008998:	429a      	cmp	r2, r3
 800899a:	d01c      	beq.n	80089d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	7b5b      	ldrb	r3, [r3, #13]
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d116      	bne.n	80089d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	897b      	ldrh	r3, [r7, #10]
 80089b4:	4413      	add	r3, r2
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4619      	mov	r1, r3
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7fe ffda 	bl	8007974 <mem_trim>
 80089c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <pbuf_realloc+0xca>
 80089c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008a08 <pbuf_realloc+0xfc>)
 80089ca:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80089ce:	4912      	ldr	r1, [pc, #72]	@ (8008a18 <pbuf_realloc+0x10c>)
 80089d0:	480f      	ldr	r0, [pc, #60]	@ (8008a10 <pbuf_realloc+0x104>)
 80089d2:	f009 f879 	bl	8011ac8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	897a      	ldrh	r2, [r7, #10]
 80089da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	895a      	ldrh	r2, [r3, #10]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d004      	beq.n	80089f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 f911 	bl	8008c18 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e000      	b.n	8008a00 <pbuf_realloc+0xf4>
    return;
 80089fe:	bf00      	nop

}
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	08012fb0 	.word	0x08012fb0
 8008a0c:	080130c8 	.word	0x080130c8
 8008a10:	08013010 	.word	0x08013010
 8008a14:	080130e0 	.word	0x080130e0
 8008a18:	080130f8 	.word	0x080130f8

08008a1c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d106      	bne.n	8008a3e <pbuf_add_header_impl+0x22>
 8008a30:	4b2b      	ldr	r3, [pc, #172]	@ (8008ae0 <pbuf_add_header_impl+0xc4>)
 8008a32:	f240 12df 	movw	r2, #479	@ 0x1df
 8008a36:	492b      	ldr	r1, [pc, #172]	@ (8008ae4 <pbuf_add_header_impl+0xc8>)
 8008a38:	482b      	ldr	r0, [pc, #172]	@ (8008ae8 <pbuf_add_header_impl+0xcc>)
 8008a3a:	f009 f845 	bl	8011ac8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <pbuf_add_header_impl+0x30>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4a:	d301      	bcc.n	8008a50 <pbuf_add_header_impl+0x34>
    return 1;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e043      	b.n	8008ad8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <pbuf_add_header_impl+0x3e>
    return 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	e03e      	b.n	8008ad8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	891a      	ldrh	r2, [r3, #8]
 8008a62:	8a7b      	ldrh	r3, [r7, #18]
 8008a64:	4413      	add	r3, r2
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8a7a      	ldrh	r2, [r7, #18]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d901      	bls.n	8008a72 <pbuf_add_header_impl+0x56>
    return 1;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e032      	b.n	8008ad8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	7b1b      	ldrb	r3, [r3, #12]
 8008a76:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008a78:	8a3b      	ldrh	r3, [r7, #16]
 8008a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	425b      	negs	r3, r3
 8008a8a:	4413      	add	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3310      	adds	r3, #16
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d20d      	bcs.n	8008ab4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e01d      	b.n	8008ad8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008a9c:	79fb      	ldrb	r3, [r7, #7]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d006      	beq.n	8008ab0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	425b      	negs	r3, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]
 8008aae:	e001      	b.n	8008ab4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e011      	b.n	8008ad8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	895a      	ldrh	r2, [r3, #10]
 8008abe:	8a7b      	ldrh	r3, [r7, #18]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	891a      	ldrh	r2, [r3, #8]
 8008acc:	8a7b      	ldrh	r3, [r7, #18]
 8008ace:	4413      	add	r3, r2
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	811a      	strh	r2, [r3, #8]


  return 0;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08012fb0 	.word	0x08012fb0
 8008ae4:	08013114 	.word	0x08013114
 8008ae8:	08013010 	.word	0x08013010

08008aec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008af6:	2200      	movs	r2, #0
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff ff8e 	bl	8008a1c <pbuf_add_header_impl>
 8008b00:	4603      	mov	r3, r0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <pbuf_remove_header+0x1e>
 8008b1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ba0 <pbuf_remove_header+0x94>)
 8008b1e:	f240 224b 	movw	r2, #587	@ 0x24b
 8008b22:	4920      	ldr	r1, [pc, #128]	@ (8008ba4 <pbuf_remove_header+0x98>)
 8008b24:	4820      	ldr	r0, [pc, #128]	@ (8008ba8 <pbuf_remove_header+0x9c>)
 8008b26:	f008 ffcf 	bl	8011ac8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <pbuf_remove_header+0x2c>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b36:	d301      	bcc.n	8008b3c <pbuf_remove_header+0x30>
    return 1;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e02c      	b.n	8008b96 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <pbuf_remove_header+0x3a>
    return 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	e027      	b.n	8008b96 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	895b      	ldrh	r3, [r3, #10]
 8008b4e:	89fa      	ldrh	r2, [r7, #14]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d908      	bls.n	8008b66 <pbuf_remove_header+0x5a>
 8008b54:	4b12      	ldr	r3, [pc, #72]	@ (8008ba0 <pbuf_remove_header+0x94>)
 8008b56:	f240 2255 	movw	r2, #597	@ 0x255
 8008b5a:	4914      	ldr	r1, [pc, #80]	@ (8008bac <pbuf_remove_header+0xa0>)
 8008b5c:	4812      	ldr	r0, [pc, #72]	@ (8008ba8 <pbuf_remove_header+0x9c>)
 8008b5e:	f008 ffb3 	bl	8011ac8 <iprintf>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e017      	b.n	8008b96 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	441a      	add	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	895a      	ldrh	r2, [r3, #10]
 8008b7c:	89fb      	ldrh	r3, [r7, #14]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	891a      	ldrh	r2, [r3, #8]
 8008b8a:	89fb      	ldrh	r3, [r7, #14]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	08012fb0 	.word	0x08012fb0
 8008ba4:	08013114 	.word	0x08013114
 8008ba8:	08013010 	.word	0x08013010
 8008bac:	08013120 	.word	0x08013120

08008bb0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	da08      	bge.n	8008bda <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008bc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bcc:	425b      	negs	r3, r3
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff ff9b 	bl	8008b0c <pbuf_remove_header>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	e007      	b.n	8008bea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008bde:	787a      	ldrb	r2, [r7, #1]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff ff1a 	bl	8008a1c <pbuf_add_header_impl>
 8008be8:	4603      	mov	r3, r0
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008bfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c02:	2201      	movs	r2, #1
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff ffd2 	bl	8008bb0 <pbuf_header_impl>
 8008c0c:	4603      	mov	r3, r0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d106      	bne.n	8008c3a <pbuf_free+0x22>
 8008c2c:	4b38      	ldr	r3, [pc, #224]	@ (8008d10 <pbuf_free+0xf8>)
 8008c2e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008c32:	4938      	ldr	r1, [pc, #224]	@ (8008d14 <pbuf_free+0xfc>)
 8008c34:	4838      	ldr	r0, [pc, #224]	@ (8008d18 <pbuf_free+0x100>)
 8008c36:	f008 ff47 	bl	8011ac8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e063      	b.n	8008d06 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008c42:	e05c      	b.n	8008cfe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7b9b      	ldrb	r3, [r3, #14]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <pbuf_free+0x42>
 8008c4c:	4b30      	ldr	r3, [pc, #192]	@ (8008d10 <pbuf_free+0xf8>)
 8008c4e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008c52:	4932      	ldr	r1, [pc, #200]	@ (8008d1c <pbuf_free+0x104>)
 8008c54:	4830      	ldr	r0, [pc, #192]	@ (8008d18 <pbuf_free+0x100>)
 8008c56:	f008 ff37 	bl	8011ac8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7b9b      	ldrb	r3, [r3, #14]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	739a      	strb	r2, [r3, #14]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7b9b      	ldrb	r3, [r3, #14]
 8008c6a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008c6c:	7dbb      	ldrb	r3, [r7, #22]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d143      	bne.n	8008cfa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	7b1b      	ldrb	r3, [r3, #12]
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	7b5b      	ldrb	r3, [r3, #13]
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d011      	beq.n	8008cb2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <pbuf_free+0x90>
 8008c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8008d10 <pbuf_free+0xf8>)
 8008c9c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008ca0:	491f      	ldr	r1, [pc, #124]	@ (8008d20 <pbuf_free+0x108>)
 8008ca2:	481d      	ldr	r0, [pc, #116]	@ (8008d18 <pbuf_free+0x100>)
 8008ca4:	f008 ff10 	bl	8011ac8 <iprintf>
        pc->custom_free_function(p);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
 8008cb0:	e01d      	b.n	8008cee <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d104      	bne.n	8008cc2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	2008      	movs	r0, #8
 8008cbc:	f7ff f956 	bl	8007f6c <memp_free>
 8008cc0:	e015      	b.n	8008cee <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d104      	bne.n	8008cd2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	2007      	movs	r0, #7
 8008ccc:	f7ff f94e 	bl	8007f6c <memp_free>
 8008cd0:	e00d      	b.n	8008cee <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <pbuf_free+0xc8>
          mem_free(p);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7fe fde1 	bl	80078a0 <mem_free>
 8008cde:	e006      	b.n	8008cee <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d10 <pbuf_free+0xf8>)
 8008ce2:	f240 320f 	movw	r2, #783	@ 0x30f
 8008ce6:	490f      	ldr	r1, [pc, #60]	@ (8008d24 <pbuf_free+0x10c>)
 8008ce8:	480b      	ldr	r0, [pc, #44]	@ (8008d18 <pbuf_free+0x100>)
 8008cea:	f008 feed 	bl	8011ac8 <iprintf>
        }
      }
      count++;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	e001      	b.n	8008cfe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d19f      	bne.n	8008c44 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	08012fb0 	.word	0x08012fb0
 8008d14:	08013114 	.word	0x08013114
 8008d18:	08013010 	.word	0x08013010
 8008d1c:	08013140 	.word	0x08013140
 8008d20:	08013158 	.word	0x08013158
 8008d24:	0801317c 	.word	0x0801317c

08008d28 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008d34:	e005      	b.n	8008d42 <pbuf_clen+0x1a>
    ++len;
 8008d36:	89fb      	ldrh	r3, [r7, #14]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1f6      	bne.n	8008d36 <pbuf_clen+0xe>
  }
  return len;
 8008d48:	89fb      	ldrh	r3, [r7, #14]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
	...

08008d58 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d010      	beq.n	8008d88 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7b9b      	ldrb	r3, [r3, #14]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	7b9b      	ldrb	r3, [r3, #14]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d106      	bne.n	8008d88 <pbuf_ref+0x30>
 8008d7a:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <pbuf_ref+0x38>)
 8008d7c:	f240 3242 	movw	r2, #834	@ 0x342
 8008d80:	4904      	ldr	r1, [pc, #16]	@ (8008d94 <pbuf_ref+0x3c>)
 8008d82:	4805      	ldr	r0, [pc, #20]	@ (8008d98 <pbuf_ref+0x40>)
 8008d84:	f008 fea0 	bl	8011ac8 <iprintf>
  }
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08012fb0 	.word	0x08012fb0
 8008d94:	08013190 	.word	0x08013190
 8008d98:	08013010 	.word	0x08013010

08008d9c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <pbuf_cat+0x16>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d107      	bne.n	8008dc2 <pbuf_cat+0x26>
 8008db2:	4b20      	ldr	r3, [pc, #128]	@ (8008e34 <pbuf_cat+0x98>)
 8008db4:	f240 3259 	movw	r2, #857	@ 0x359
 8008db8:	491f      	ldr	r1, [pc, #124]	@ (8008e38 <pbuf_cat+0x9c>)
 8008dba:	4820      	ldr	r0, [pc, #128]	@ (8008e3c <pbuf_cat+0xa0>)
 8008dbc:	f008 fe84 	bl	8011ac8 <iprintf>
 8008dc0:	e034      	b.n	8008e2c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e00a      	b.n	8008dde <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	891a      	ldrh	r2, [r3, #8]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	891b      	ldrh	r3, [r3, #8]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	891a      	ldrh	r2, [r3, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	895b      	ldrh	r3, [r3, #10]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d006      	beq.n	8008e00 <pbuf_cat+0x64>
 8008df2:	4b10      	ldr	r3, [pc, #64]	@ (8008e34 <pbuf_cat+0x98>)
 8008df4:	f240 3262 	movw	r2, #866	@ 0x362
 8008df8:	4911      	ldr	r1, [pc, #68]	@ (8008e40 <pbuf_cat+0xa4>)
 8008dfa:	4810      	ldr	r0, [pc, #64]	@ (8008e3c <pbuf_cat+0xa0>)
 8008dfc:	f008 fe64 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d006      	beq.n	8008e16 <pbuf_cat+0x7a>
 8008e08:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <pbuf_cat+0x98>)
 8008e0a:	f240 3263 	movw	r2, #867	@ 0x363
 8008e0e:	490d      	ldr	r1, [pc, #52]	@ (8008e44 <pbuf_cat+0xa8>)
 8008e10:	480a      	ldr	r0, [pc, #40]	@ (8008e3c <pbuf_cat+0xa0>)
 8008e12:	f008 fe59 	bl	8011ac8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	891a      	ldrh	r2, [r3, #8]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	891b      	ldrh	r3, [r3, #8]
 8008e1e:	4413      	add	r3, r2
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	08012fb0 	.word	0x08012fb0
 8008e38:	080131a4 	.word	0x080131a4
 8008e3c:	08013010 	.word	0x08013010
 8008e40:	080131dc 	.word	0x080131dc
 8008e44:	0801320c 	.word	0x0801320c

08008e48 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	2300      	movs	r3, #0
 8008e58:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d008      	beq.n	8008e72 <pbuf_copy+0x2a>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <pbuf_copy+0x2a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	891a      	ldrh	r2, [r3, #8]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	891b      	ldrh	r3, [r3, #8]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d209      	bcs.n	8008e86 <pbuf_copy+0x3e>
 8008e72:	4b57      	ldr	r3, [pc, #348]	@ (8008fd0 <pbuf_copy+0x188>)
 8008e74:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008e78:	4956      	ldr	r1, [pc, #344]	@ (8008fd4 <pbuf_copy+0x18c>)
 8008e7a:	4857      	ldr	r0, [pc, #348]	@ (8008fd8 <pbuf_copy+0x190>)
 8008e7c:	f008 fe24 	bl	8011ac8 <iprintf>
 8008e80:	f06f 030f 	mvn.w	r3, #15
 8008e84:	e09f      	b.n	8008fc6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	895b      	ldrh	r3, [r3, #10]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	1ad2      	subs	r2, r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	895b      	ldrh	r3, [r3, #10]
 8008e94:	4619      	mov	r1, r3
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	1acb      	subs	r3, r1, r3
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d306      	bcc.n	8008eac <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	895b      	ldrh	r3, [r3, #10]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	e005      	b.n	8008eb8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	895b      	ldrh	r3, [r3, #10]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	18d0      	adds	r0, r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	f008 ffc9 	bl	8011e62 <memcpy>
    offset_to += len;
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	895b      	ldrh	r3, [r3, #10]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d906      	bls.n	8008efa <pbuf_copy+0xb2>
 8008eec:	4b38      	ldr	r3, [pc, #224]	@ (8008fd0 <pbuf_copy+0x188>)
 8008eee:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8008ef2:	493a      	ldr	r1, [pc, #232]	@ (8008fdc <pbuf_copy+0x194>)
 8008ef4:	4838      	ldr	r0, [pc, #224]	@ (8008fd8 <pbuf_copy+0x190>)
 8008ef6:	f008 fde7 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	895b      	ldrh	r3, [r3, #10]
 8008efe:	461a      	mov	r2, r3
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d906      	bls.n	8008f14 <pbuf_copy+0xcc>
 8008f06:	4b32      	ldr	r3, [pc, #200]	@ (8008fd0 <pbuf_copy+0x188>)
 8008f08:	f240 32da 	movw	r2, #986	@ 0x3da
 8008f0c:	4934      	ldr	r1, [pc, #208]	@ (8008fe0 <pbuf_copy+0x198>)
 8008f0e:	4832      	ldr	r0, [pc, #200]	@ (8008fd8 <pbuf_copy+0x190>)
 8008f10:	f008 fdda 	bl	8011ac8 <iprintf>
    if (offset_from >= p_from->len) {
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	895b      	ldrh	r3, [r3, #10]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d304      	bcc.n	8008f2a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	895b      	ldrh	r3, [r3, #10]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d114      	bne.n	8008f60 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10c      	bne.n	8008f60 <pbuf_copy+0x118>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <pbuf_copy+0x118>
 8008f4c:	4b20      	ldr	r3, [pc, #128]	@ (8008fd0 <pbuf_copy+0x188>)
 8008f4e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008f52:	4924      	ldr	r1, [pc, #144]	@ (8008fe4 <pbuf_copy+0x19c>)
 8008f54:	4820      	ldr	r0, [pc, #128]	@ (8008fd8 <pbuf_copy+0x190>)
 8008f56:	f008 fdb7 	bl	8011ac8 <iprintf>
 8008f5a:	f06f 030f 	mvn.w	r3, #15
 8008f5e:	e032      	b.n	8008fc6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d013      	beq.n	8008f8e <pbuf_copy+0x146>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	895a      	ldrh	r2, [r3, #10]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	891b      	ldrh	r3, [r3, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d10d      	bne.n	8008f8e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d009      	beq.n	8008f8e <pbuf_copy+0x146>
 8008f7a:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <pbuf_copy+0x188>)
 8008f7c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008f80:	4919      	ldr	r1, [pc, #100]	@ (8008fe8 <pbuf_copy+0x1a0>)
 8008f82:	4815      	ldr	r0, [pc, #84]	@ (8008fd8 <pbuf_copy+0x190>)
 8008f84:	f008 fda0 	bl	8011ac8 <iprintf>
 8008f88:	f06f 0305 	mvn.w	r3, #5
 8008f8c:	e01b      	b.n	8008fc6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d013      	beq.n	8008fbc <pbuf_copy+0x174>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	895a      	ldrh	r2, [r3, #10]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	891b      	ldrh	r3, [r3, #8]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d10d      	bne.n	8008fbc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d009      	beq.n	8008fbc <pbuf_copy+0x174>
 8008fa8:	4b09      	ldr	r3, [pc, #36]	@ (8008fd0 <pbuf_copy+0x188>)
 8008faa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008fae:	490e      	ldr	r1, [pc, #56]	@ (8008fe8 <pbuf_copy+0x1a0>)
 8008fb0:	4809      	ldr	r0, [pc, #36]	@ (8008fd8 <pbuf_copy+0x190>)
 8008fb2:	f008 fd89 	bl	8011ac8 <iprintf>
 8008fb6:	f06f 0305 	mvn.w	r3, #5
 8008fba:	e004      	b.n	8008fc6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f47f af61 	bne.w	8008e86 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	08012fb0 	.word	0x08012fb0
 8008fd4:	08013258 	.word	0x08013258
 8008fd8:	08013010 	.word	0x08013010
 8008fdc:	08013288 	.word	0x08013288
 8008fe0:	080132a0 	.word	0x080132a0
 8008fe4:	080132bc 	.word	0x080132bc
 8008fe8:	080132cc 	.word	0x080132cc

08008fec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	80fb      	strh	r3, [r7, #6]
 8008ffe:	4613      	mov	r3, r2
 8009000:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d108      	bne.n	8009022 <pbuf_copy_partial+0x36>
 8009010:	4b2b      	ldr	r3, [pc, #172]	@ (80090c0 <pbuf_copy_partial+0xd4>)
 8009012:	f240 420a 	movw	r2, #1034	@ 0x40a
 8009016:	492b      	ldr	r1, [pc, #172]	@ (80090c4 <pbuf_copy_partial+0xd8>)
 8009018:	482b      	ldr	r0, [pc, #172]	@ (80090c8 <pbuf_copy_partial+0xdc>)
 800901a:	f008 fd55 	bl	8011ac8 <iprintf>
 800901e:	2300      	movs	r3, #0
 8009020:	e04a      	b.n	80090b8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d108      	bne.n	800903a <pbuf_copy_partial+0x4e>
 8009028:	4b25      	ldr	r3, [pc, #148]	@ (80090c0 <pbuf_copy_partial+0xd4>)
 800902a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800902e:	4927      	ldr	r1, [pc, #156]	@ (80090cc <pbuf_copy_partial+0xe0>)
 8009030:	4825      	ldr	r0, [pc, #148]	@ (80090c8 <pbuf_copy_partial+0xdc>)
 8009032:	f008 fd49 	bl	8011ac8 <iprintf>
 8009036:	2300      	movs	r3, #0
 8009038:	e03e      	b.n	80090b8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	e034      	b.n	80090aa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009040:	88bb      	ldrh	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <pbuf_copy_partial+0x70>
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	895b      	ldrh	r3, [r3, #10]
 800904a:	88ba      	ldrh	r2, [r7, #4]
 800904c:	429a      	cmp	r2, r3
 800904e:	d305      	bcc.n	800905c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	895b      	ldrh	r3, [r3, #10]
 8009054:	88ba      	ldrh	r2, [r7, #4]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	80bb      	strh	r3, [r7, #4]
 800905a:	e023      	b.n	80090a4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	895a      	ldrh	r2, [r3, #10]
 8009060:	88bb      	ldrh	r3, [r7, #4]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009066:	8b3a      	ldrh	r2, [r7, #24]
 8009068:	88fb      	ldrh	r3, [r7, #6]
 800906a:	429a      	cmp	r2, r3
 800906c:	d901      	bls.n	8009072 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800906e:	88fb      	ldrh	r3, [r7, #6]
 8009070:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009072:	8b7b      	ldrh	r3, [r7, #26]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	18d0      	adds	r0, r2, r3
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	88bb      	ldrh	r3, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	8b3a      	ldrh	r2, [r7, #24]
 8009082:	4619      	mov	r1, r3
 8009084:	f008 feed 	bl	8011e62 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009088:	8afa      	ldrh	r2, [r7, #22]
 800908a:	8b3b      	ldrh	r3, [r7, #24]
 800908c:	4413      	add	r3, r2
 800908e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009090:	8b7a      	ldrh	r2, [r7, #26]
 8009092:	8b3b      	ldrh	r3, [r7, #24]
 8009094:	4413      	add	r3, r2
 8009096:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009098:	88fa      	ldrh	r2, [r7, #6]
 800909a:	8b3b      	ldrh	r3, [r7, #24]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80090a0:	2300      	movs	r3, #0
 80090a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	88fb      	ldrh	r3, [r7, #6]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <pbuf_copy_partial+0xca>
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1c4      	bne.n	8009040 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80090b6:	8afb      	ldrh	r3, [r7, #22]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	08012fb0 	.word	0x08012fb0
 80090c4:	080132f8 	.word	0x080132f8
 80090c8:	08013010 	.word	0x08013010
 80090cc:	08013318 	.word	0x08013318

080090d0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80090de:	88fb      	ldrh	r3, [r7, #6]
 80090e0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d109      	bne.n	8009100 <pbuf_take+0x30>
 80090ec:	4b3a      	ldr	r3, [pc, #232]	@ (80091d8 <pbuf_take+0x108>)
 80090ee:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 80090f2:	493a      	ldr	r1, [pc, #232]	@ (80091dc <pbuf_take+0x10c>)
 80090f4:	483a      	ldr	r0, [pc, #232]	@ (80091e0 <pbuf_take+0x110>)
 80090f6:	f008 fce7 	bl	8011ac8 <iprintf>
 80090fa:	f06f 030f 	mvn.w	r3, #15
 80090fe:	e067      	b.n	80091d0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d109      	bne.n	800911a <pbuf_take+0x4a>
 8009106:	4b34      	ldr	r3, [pc, #208]	@ (80091d8 <pbuf_take+0x108>)
 8009108:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800910c:	4935      	ldr	r1, [pc, #212]	@ (80091e4 <pbuf_take+0x114>)
 800910e:	4834      	ldr	r0, [pc, #208]	@ (80091e0 <pbuf_take+0x110>)
 8009110:	f008 fcda 	bl	8011ac8 <iprintf>
 8009114:	f06f 030f 	mvn.w	r3, #15
 8009118:	e05a      	b.n	80091d0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	891b      	ldrh	r3, [r3, #8]
 800911e:	88fa      	ldrh	r2, [r7, #6]
 8009120:	429a      	cmp	r2, r3
 8009122:	d909      	bls.n	8009138 <pbuf_take+0x68>
 8009124:	4b2c      	ldr	r3, [pc, #176]	@ (80091d8 <pbuf_take+0x108>)
 8009126:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800912a:	492f      	ldr	r1, [pc, #188]	@ (80091e8 <pbuf_take+0x118>)
 800912c:	482c      	ldr	r0, [pc, #176]	@ (80091e0 <pbuf_take+0x110>)
 800912e:	f008 fccb 	bl	8011ac8 <iprintf>
 8009132:	f04f 33ff 	mov.w	r3, #4294967295
 8009136:	e04b      	b.n	80091d0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <pbuf_take+0x7e>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d004      	beq.n	800914e <pbuf_take+0x7e>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	891b      	ldrh	r3, [r3, #8]
 8009148:	88fa      	ldrh	r2, [r7, #6]
 800914a:	429a      	cmp	r2, r3
 800914c:	d902      	bls.n	8009154 <pbuf_take+0x84>
    return ERR_ARG;
 800914e:	f06f 030f 	mvn.w	r3, #15
 8009152:	e03d      	b.n	80091d0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e028      	b.n	80091ac <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <pbuf_take+0x9e>
 8009160:	4b1d      	ldr	r3, [pc, #116]	@ (80091d8 <pbuf_take+0x108>)
 8009162:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8009166:	4921      	ldr	r1, [pc, #132]	@ (80091ec <pbuf_take+0x11c>)
 8009168:	481d      	ldr	r0, [pc, #116]	@ (80091e0 <pbuf_take+0x110>)
 800916a:	f008 fcad 	bl	8011ac8 <iprintf>
    buf_copy_len = total_copy_len;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	895b      	ldrh	r3, [r3, #10]
 8009176:	461a      	mov	r2, r3
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	4293      	cmp	r3, r2
 800917c:	d902      	bls.n	8009184 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	895b      	ldrh	r3, [r3, #10]
 8009182:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	6858      	ldr	r0, [r3, #4]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	4413      	add	r3, r2
 800918e:	69ba      	ldr	r2, [r7, #24]
 8009190:	4619      	mov	r1, r3
 8009192:	f008 fe66 	bl	8011e62 <memcpy>
    total_copy_len -= buf_copy_len;
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	4413      	add	r3, r2
 80091a4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1d3      	bne.n	800915a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <pbuf_take+0xf0>
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d006      	beq.n	80091ce <pbuf_take+0xfe>
 80091c0:	4b05      	ldr	r3, [pc, #20]	@ (80091d8 <pbuf_take+0x108>)
 80091c2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80091c6:	490a      	ldr	r1, [pc, #40]	@ (80091f0 <pbuf_take+0x120>)
 80091c8:	4805      	ldr	r0, [pc, #20]	@ (80091e0 <pbuf_take+0x110>)
 80091ca:	f008 fc7d 	bl	8011ac8 <iprintf>
  return ERR_OK;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3720      	adds	r7, #32
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	08012fb0 	.word	0x08012fb0
 80091dc:	08013388 	.word	0x08013388
 80091e0:	08013010 	.word	0x08013010
 80091e4:	080133a0 	.word	0x080133a0
 80091e8:	080133bc 	.word	0x080133bc
 80091ec:	080133dc 	.word	0x080133dc
 80091f0:	080133f4 	.word	0x080133f4

080091f4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	603a      	str	r2, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
 8009200:	460b      	mov	r3, r1
 8009202:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	8919      	ldrh	r1, [r3, #8]
 8009208:	88ba      	ldrh	r2, [r7, #4]
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fa1f 	bl	8008650 <pbuf_alloc>
 8009212:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d101      	bne.n	800921e <pbuf_clone+0x2a>
    return NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	e011      	b.n	8009242 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f7ff fe11 	bl	8008e48 <pbuf_copy>
 8009226:	4603      	mov	r3, r0
 8009228:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800922a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <pbuf_clone+0x4c>
 8009232:	4b06      	ldr	r3, [pc, #24]	@ (800924c <pbuf_clone+0x58>)
 8009234:	f240 5224 	movw	r2, #1316	@ 0x524
 8009238:	4905      	ldr	r1, [pc, #20]	@ (8009250 <pbuf_clone+0x5c>)
 800923a:	4806      	ldr	r0, [pc, #24]	@ (8009254 <pbuf_clone+0x60>)
 800923c:	f008 fc44 	bl	8011ac8 <iprintf>
  return q;
 8009240:	68fb      	ldr	r3, [r7, #12]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	08012fb0 	.word	0x08012fb0
 8009250:	08013424 	.word	0x08013424
 8009254:	08013010 	.word	0x08013010

08009258 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800925c:	f008 fb34 	bl	80118c8 <rand>
 8009260:	4603      	mov	r3, r0
 8009262:	b29b      	uxth	r3, r3
 8009264:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009268:	b29b      	uxth	r3, r3
 800926a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800926e:	b29a      	uxth	r2, r3
 8009270:	4b01      	ldr	r3, [pc, #4]	@ (8009278 <tcp_init+0x20>)
 8009272:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009274:	bf00      	nop
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000020 	.word	0x20000020

0800927c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7d1b      	ldrb	r3, [r3, #20]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d105      	bne.n	8009298 <tcp_free+0x1c>
 800928c:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <tcp_free+0x2c>)
 800928e:	22d4      	movs	r2, #212	@ 0xd4
 8009290:	4906      	ldr	r1, [pc, #24]	@ (80092ac <tcp_free+0x30>)
 8009292:	4807      	ldr	r0, [pc, #28]	@ (80092b0 <tcp_free+0x34>)
 8009294:	f008 fc18 	bl	8011ac8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	2001      	movs	r0, #1
 800929c:	f7fe fe66 	bl	8007f6c <memp_free>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	080134b0 	.word	0x080134b0
 80092ac:	080134e0 	.word	0x080134e0
 80092b0:	080134f4 	.word	0x080134f4

080092b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	7d1b      	ldrb	r3, [r3, #20]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d105      	bne.n	80092d0 <tcp_free_listen+0x1c>
 80092c4:	4b06      	ldr	r3, [pc, #24]	@ (80092e0 <tcp_free_listen+0x2c>)
 80092c6:	22df      	movs	r2, #223	@ 0xdf
 80092c8:	4906      	ldr	r1, [pc, #24]	@ (80092e4 <tcp_free_listen+0x30>)
 80092ca:	4807      	ldr	r0, [pc, #28]	@ (80092e8 <tcp_free_listen+0x34>)
 80092cc:	f008 fbfc 	bl	8011ac8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80092d0:	6879      	ldr	r1, [r7, #4]
 80092d2:	2002      	movs	r0, #2
 80092d4:	f7fe fe4a 	bl	8007f6c <memp_free>
}
 80092d8:	bf00      	nop
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	080134b0 	.word	0x080134b0
 80092e4:	0801351c 	.word	0x0801351c
 80092e8:	080134f4 	.word	0x080134f4

080092ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80092f0:	f000 fea4 	bl	800a03c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80092f4:	4b07      	ldr	r3, [pc, #28]	@ (8009314 <tcp_tmr+0x28>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <tcp_tmr+0x28>)
 80092fe:	701a      	strb	r2, [r3, #0]
 8009300:	4b04      	ldr	r3, [pc, #16]	@ (8009314 <tcp_tmr+0x28>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800930c:	f000 fb54 	bl	80099b8 <tcp_slowtmr>
  }
}
 8009310:	bf00      	nop
 8009312:	bd80      	pop	{r7, pc}
 8009314:	200088f5 	.word	0x200088f5

08009318 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d105      	bne.n	8009334 <tcp_remove_listener+0x1c>
 8009328:	4b0d      	ldr	r3, [pc, #52]	@ (8009360 <tcp_remove_listener+0x48>)
 800932a:	22ff      	movs	r2, #255	@ 0xff
 800932c:	490d      	ldr	r1, [pc, #52]	@ (8009364 <tcp_remove_listener+0x4c>)
 800932e:	480e      	ldr	r0, [pc, #56]	@ (8009368 <tcp_remove_listener+0x50>)
 8009330:	f008 fbca 	bl	8011ac8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e00a      	b.n	8009350 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d102      	bne.n	800934a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f1      	bne.n	800933a <tcp_remove_listener+0x22>
    }
  }
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	080134b0 	.word	0x080134b0
 8009364:	08013538 	.word	0x08013538
 8009368:	080134f4 	.word	0x080134f4

0800936c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d106      	bne.n	8009388 <tcp_listen_closed+0x1c>
 800937a:	4b14      	ldr	r3, [pc, #80]	@ (80093cc <tcp_listen_closed+0x60>)
 800937c:	f240 1211 	movw	r2, #273	@ 0x111
 8009380:	4913      	ldr	r1, [pc, #76]	@ (80093d0 <tcp_listen_closed+0x64>)
 8009382:	4814      	ldr	r0, [pc, #80]	@ (80093d4 <tcp_listen_closed+0x68>)
 8009384:	f008 fba0 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7d1b      	ldrb	r3, [r3, #20]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d006      	beq.n	800939e <tcp_listen_closed+0x32>
 8009390:	4b0e      	ldr	r3, [pc, #56]	@ (80093cc <tcp_listen_closed+0x60>)
 8009392:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8009396:	4910      	ldr	r1, [pc, #64]	@ (80093d8 <tcp_listen_closed+0x6c>)
 8009398:	480e      	ldr	r0, [pc, #56]	@ (80093d4 <tcp_listen_closed+0x68>)
 800939a:	f008 fb95 	bl	8011ac8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800939e:	2301      	movs	r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e00b      	b.n	80093bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80093a4:	4a0d      	ldr	r2, [pc, #52]	@ (80093dc <tcp_listen_closed+0x70>)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff ffb1 	bl	8009318 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	3301      	adds	r3, #1
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d9f0      	bls.n	80093a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80093c2:	bf00      	nop
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	080134b0 	.word	0x080134b0
 80093d0:	08013560 	.word	0x08013560
 80093d4:	080134f4 	.word	0x080134f4
 80093d8:	0801356c 	.word	0x0801356c
 80093dc:	08015498 	.word	0x08015498

080093e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80093e0:	b5b0      	push	{r4, r5, r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d106      	bne.n	8009400 <tcp_close_shutdown+0x20>
 80093f2:	4b63      	ldr	r3, [pc, #396]	@ (8009580 <tcp_close_shutdown+0x1a0>)
 80093f4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80093f8:	4962      	ldr	r1, [pc, #392]	@ (8009584 <tcp_close_shutdown+0x1a4>)
 80093fa:	4863      	ldr	r0, [pc, #396]	@ (8009588 <tcp_close_shutdown+0x1a8>)
 80093fc:	f008 fb64 	bl	8011ac8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d066      	beq.n	80094d4 <tcp_close_shutdown+0xf4>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7d1b      	ldrb	r3, [r3, #20]
 800940a:	2b04      	cmp	r3, #4
 800940c:	d003      	beq.n	8009416 <tcp_close_shutdown+0x36>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7d1b      	ldrb	r3, [r3, #20]
 8009412:	2b07      	cmp	r3, #7
 8009414:	d15e      	bne.n	80094d4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800941a:	2b00      	cmp	r3, #0
 800941c:	d104      	bne.n	8009428 <tcp_close_shutdown+0x48>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009422:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009426:	d055      	beq.n	80094d4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	8b5b      	ldrh	r3, [r3, #26]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <tcp_close_shutdown+0x62>
 8009434:	4b52      	ldr	r3, [pc, #328]	@ (8009580 <tcp_close_shutdown+0x1a0>)
 8009436:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800943a:	4954      	ldr	r1, [pc, #336]	@ (800958c <tcp_close_shutdown+0x1ac>)
 800943c:	4852      	ldr	r0, [pc, #328]	@ (8009588 <tcp_close_shutdown+0x1a8>)
 800943e:	f008 fb43 	bl	8011ac8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800944a:	687d      	ldr	r5, [r7, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	3304      	adds	r3, #4
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	8ad2      	ldrh	r2, [r2, #22]
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	8b09      	ldrh	r1, [r1, #24]
 8009458:	9102      	str	r1, [sp, #8]
 800945a:	9201      	str	r2, [sp, #4]
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	462b      	mov	r3, r5
 8009460:	4622      	mov	r2, r4
 8009462:	4601      	mov	r1, r0
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f005 fae5 	bl	800ea34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 f8c8 	bl	800a600 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009470:	4b47      	ldr	r3, [pc, #284]	@ (8009590 <tcp_close_shutdown+0x1b0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d105      	bne.n	8009486 <tcp_close_shutdown+0xa6>
 800947a:	4b45      	ldr	r3, [pc, #276]	@ (8009590 <tcp_close_shutdown+0x1b0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	4a43      	ldr	r2, [pc, #268]	@ (8009590 <tcp_close_shutdown+0x1b0>)
 8009482:	6013      	str	r3, [r2, #0]
 8009484:	e013      	b.n	80094ae <tcp_close_shutdown+0xce>
 8009486:	4b42      	ldr	r3, [pc, #264]	@ (8009590 <tcp_close_shutdown+0x1b0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	e00c      	b.n	80094a8 <tcp_close_shutdown+0xc8>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	429a      	cmp	r2, r3
 8009496:	d104      	bne.n	80094a2 <tcp_close_shutdown+0xc2>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68da      	ldr	r2, [r3, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	60da      	str	r2, [r3, #12]
 80094a0:	e005      	b.n	80094ae <tcp_close_shutdown+0xce>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1ef      	bne.n	800948e <tcp_close_shutdown+0xae>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	4b37      	ldr	r3, [pc, #220]	@ (8009594 <tcp_close_shutdown+0x1b4>)
 80094b6:	2201      	movs	r2, #1
 80094b8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80094ba:	4b37      	ldr	r3, [pc, #220]	@ (8009598 <tcp_close_shutdown+0x1b8>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d102      	bne.n	80094ca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80094c4:	f003 fd5c 	bl	800cf80 <tcp_trigger_input_pcb_close>
 80094c8:	e002      	b.n	80094d0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff fed6 	bl	800927c <tcp_free>
      }
      return ERR_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	e050      	b.n	8009576 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7d1b      	ldrb	r3, [r3, #20]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d03b      	beq.n	8009554 <tcp_close_shutdown+0x174>
 80094dc:	2b02      	cmp	r3, #2
 80094de:	dc44      	bgt.n	800956a <tcp_close_shutdown+0x18a>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <tcp_close_shutdown+0x10a>
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d02a      	beq.n	800953e <tcp_close_shutdown+0x15e>
 80094e8:	e03f      	b.n	800956a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8adb      	ldrh	r3, [r3, #22]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d021      	beq.n	8009536 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80094f2:	4b2a      	ldr	r3, [pc, #168]	@ (800959c <tcp_close_shutdown+0x1bc>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d105      	bne.n	8009508 <tcp_close_shutdown+0x128>
 80094fc:	4b27      	ldr	r3, [pc, #156]	@ (800959c <tcp_close_shutdown+0x1bc>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	4a26      	ldr	r2, [pc, #152]	@ (800959c <tcp_close_shutdown+0x1bc>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	e013      	b.n	8009530 <tcp_close_shutdown+0x150>
 8009508:	4b24      	ldr	r3, [pc, #144]	@ (800959c <tcp_close_shutdown+0x1bc>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60bb      	str	r3, [r7, #8]
 800950e:	e00c      	b.n	800952a <tcp_close_shutdown+0x14a>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	429a      	cmp	r2, r3
 8009518:	d104      	bne.n	8009524 <tcp_close_shutdown+0x144>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	60da      	str	r2, [r3, #12]
 8009522:	e005      	b.n	8009530 <tcp_close_shutdown+0x150>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	60bb      	str	r3, [r7, #8]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1ef      	bne.n	8009510 <tcp_close_shutdown+0x130>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7ff fea0 	bl	800927c <tcp_free>
      break;
 800953c:	e01a      	b.n	8009574 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7ff ff14 	bl	800936c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009544:	6879      	ldr	r1, [r7, #4]
 8009546:	4816      	ldr	r0, [pc, #88]	@ (80095a0 <tcp_close_shutdown+0x1c0>)
 8009548:	f001 f8aa 	bl	800a6a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff feb1 	bl	80092b4 <tcp_free_listen>
      break;
 8009552:	e00f      	b.n	8009574 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	480e      	ldr	r0, [pc, #56]	@ (8009590 <tcp_close_shutdown+0x1b0>)
 8009558:	f001 f8a2 	bl	800a6a0 <tcp_pcb_remove>
 800955c:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <tcp_close_shutdown+0x1b4>)
 800955e:	2201      	movs	r2, #1
 8009560:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fe8a 	bl	800927c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009568:	e004      	b.n	8009574 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f81a 	bl	80095a4 <tcp_close_shutdown_fin>
 8009570:	4603      	mov	r3, r0
 8009572:	e000      	b.n	8009576 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bdb0      	pop	{r4, r5, r7, pc}
 800957e:	bf00      	nop
 8009580:	080134b0 	.word	0x080134b0
 8009584:	08013584 	.word	0x08013584
 8009588:	080134f4 	.word	0x080134f4
 800958c:	080135a4 	.word	0x080135a4
 8009590:	200088ec 	.word	0x200088ec
 8009594:	200088f4 	.word	0x200088f4
 8009598:	2000892c 	.word	0x2000892c
 800959c:	200088e4 	.word	0x200088e4
 80095a0:	200088e8 	.word	0x200088e8

080095a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d106      	bne.n	80095c0 <tcp_close_shutdown_fin+0x1c>
 80095b2:	4b2e      	ldr	r3, [pc, #184]	@ (800966c <tcp_close_shutdown_fin+0xc8>)
 80095b4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80095b8:	492d      	ldr	r1, [pc, #180]	@ (8009670 <tcp_close_shutdown_fin+0xcc>)
 80095ba:	482e      	ldr	r0, [pc, #184]	@ (8009674 <tcp_close_shutdown_fin+0xd0>)
 80095bc:	f008 fa84 	bl	8011ac8 <iprintf>

  switch (pcb->state) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	7d1b      	ldrb	r3, [r3, #20]
 80095c4:	2b07      	cmp	r3, #7
 80095c6:	d020      	beq.n	800960a <tcp_close_shutdown_fin+0x66>
 80095c8:	2b07      	cmp	r3, #7
 80095ca:	dc2b      	bgt.n	8009624 <tcp_close_shutdown_fin+0x80>
 80095cc:	2b03      	cmp	r3, #3
 80095ce:	d002      	beq.n	80095d6 <tcp_close_shutdown_fin+0x32>
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d00d      	beq.n	80095f0 <tcp_close_shutdown_fin+0x4c>
 80095d4:	e026      	b.n	8009624 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f004 fb3a 	bl	800dc50 <tcp_send_fin>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80095e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d11f      	bne.n	8009628 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2205      	movs	r2, #5
 80095ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 80095ee:	e01b      	b.n	8009628 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f004 fb2d 	bl	800dc50 <tcp_send_fin>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80095fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d114      	bne.n	800962c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2205      	movs	r2, #5
 8009606:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009608:	e010      	b.n	800962c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f004 fb20 	bl	800dc50 <tcp_send_fin>
 8009610:	4603      	mov	r3, r0
 8009612:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2209      	movs	r2, #9
 8009620:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009622:	e005      	b.n	8009630 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e01c      	b.n	8009662 <tcp_close_shutdown_fin+0xbe>
      break;
 8009628:	bf00      	nop
 800962a:	e002      	b.n	8009632 <tcp_close_shutdown_fin+0x8e>
      break;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <tcp_close_shutdown_fin+0x8e>
      break;
 8009630:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d103      	bne.n	8009642 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f004 fc46 	bl	800decc <tcp_output>
 8009640:	e00d      	b.n	800965e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d108      	bne.n	800965e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	8b5b      	ldrh	r3, [r3, #26]
 8009650:	f043 0308 	orr.w	r3, r3, #8
 8009654:	b29a      	uxth	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	e001      	b.n	8009662 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800965e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	080134b0 	.word	0x080134b0
 8009670:	08013560 	.word	0x08013560
 8009674:	080134f4 	.word	0x080134f4

08009678 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <tcp_close+0x22>
 8009686:	4b0f      	ldr	r3, [pc, #60]	@ (80096c4 <tcp_close+0x4c>)
 8009688:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800968c:	490e      	ldr	r1, [pc, #56]	@ (80096c8 <tcp_close+0x50>)
 800968e:	480f      	ldr	r0, [pc, #60]	@ (80096cc <tcp_close+0x54>)
 8009690:	f008 fa1a 	bl	8011ac8 <iprintf>
 8009694:	f06f 030f 	mvn.w	r3, #15
 8009698:	e00f      	b.n	80096ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	7d1b      	ldrb	r3, [r3, #20]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d006      	beq.n	80096b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8b5b      	ldrh	r3, [r3, #26]
 80096a6:	f043 0310 	orr.w	r3, r3, #16
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80096b0:	2101      	movs	r1, #1
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fe94 	bl	80093e0 <tcp_close_shutdown>
 80096b8:	4603      	mov	r3, r0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	080134b0 	.word	0x080134b0
 80096c8:	080135c0 	.word	0x080135c0
 80096cc:	080134f4 	.word	0x080134f4

080096d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08e      	sub	sp, #56	@ 0x38
 80096d4:	af04      	add	r7, sp, #16
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d107      	bne.n	80096f0 <tcp_abandon+0x20>
 80096e0:	4b52      	ldr	r3, [pc, #328]	@ (800982c <tcp_abandon+0x15c>)
 80096e2:	f240 223d 	movw	r2, #573	@ 0x23d
 80096e6:	4952      	ldr	r1, [pc, #328]	@ (8009830 <tcp_abandon+0x160>)
 80096e8:	4852      	ldr	r0, [pc, #328]	@ (8009834 <tcp_abandon+0x164>)
 80096ea:	f008 f9ed 	bl	8011ac8 <iprintf>
 80096ee:	e099      	b.n	8009824 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	7d1b      	ldrb	r3, [r3, #20]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d106      	bne.n	8009706 <tcp_abandon+0x36>
 80096f8:	4b4c      	ldr	r3, [pc, #304]	@ (800982c <tcp_abandon+0x15c>)
 80096fa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80096fe:	494e      	ldr	r1, [pc, #312]	@ (8009838 <tcp_abandon+0x168>)
 8009700:	484c      	ldr	r0, [pc, #304]	@ (8009834 <tcp_abandon+0x164>)
 8009702:	f008 f9e1 	bl	8011ac8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7d1b      	ldrb	r3, [r3, #20]
 800970a:	2b0a      	cmp	r3, #10
 800970c:	d107      	bne.n	800971e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	484a      	ldr	r0, [pc, #296]	@ (800983c <tcp_abandon+0x16c>)
 8009712:	f000 ffc5 	bl	800a6a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff fdb0 	bl	800927c <tcp_free>
 800971c:	e082      	b.n	8009824 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800972a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009738:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7d1b      	ldrb	r3, [r3, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d126      	bne.n	8009796 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	8adb      	ldrh	r3, [r3, #22]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d02e      	beq.n	80097ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009750:	4b3b      	ldr	r3, [pc, #236]	@ (8009840 <tcp_abandon+0x170>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d105      	bne.n	8009766 <tcp_abandon+0x96>
 800975a:	4b39      	ldr	r3, [pc, #228]	@ (8009840 <tcp_abandon+0x170>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	4a37      	ldr	r2, [pc, #220]	@ (8009840 <tcp_abandon+0x170>)
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	e013      	b.n	800978e <tcp_abandon+0xbe>
 8009766:	4b36      	ldr	r3, [pc, #216]	@ (8009840 <tcp_abandon+0x170>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	e00c      	b.n	8009788 <tcp_abandon+0xb8>
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	429a      	cmp	r2, r3
 8009776:	d104      	bne.n	8009782 <tcp_abandon+0xb2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	60da      	str	r2, [r3, #12]
 8009780:	e005      	b.n	800978e <tcp_abandon+0xbe>
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	61fb      	str	r3, [r7, #28]
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1ef      	bne.n	800976e <tcp_abandon+0x9e>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	60da      	str	r2, [r3, #12]
 8009794:	e00b      	b.n	80097ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	8adb      	ldrh	r3, [r3, #22]
 800979e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	4828      	ldr	r0, [pc, #160]	@ (8009844 <tcp_abandon+0x174>)
 80097a4:	f000 ff7c 	bl	800a6a0 <tcp_pcb_remove>
 80097a8:	4b27      	ldr	r3, [pc, #156]	@ (8009848 <tcp_abandon+0x178>)
 80097aa:	2201      	movs	r2, #1
 80097ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fd1e 	bl	800a1fc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fd15 	bl	800a1fc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fd0c 	bl	800a1fc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80097ea:	6879      	ldr	r1, [r7, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3304      	adds	r3, #4
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	8b12      	ldrh	r2, [r2, #24]
 80097f4:	9202      	str	r2, [sp, #8]
 80097f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80097f8:	9201      	str	r2, [sp, #4]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	460b      	mov	r3, r1
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	69b9      	ldr	r1, [r7, #24]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f005 f916 	bl	800ea34 <tcp_rst>
    }
    last_state = pcb->state;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	7d1b      	ldrb	r3, [r3, #20]
 800980c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff fd34 	bl	800927c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d004      	beq.n	8009824 <tcp_abandon+0x154>
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f06f 010c 	mvn.w	r1, #12
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	4798      	blx	r3
  }
}
 8009824:	3728      	adds	r7, #40	@ 0x28
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	080134b0 	.word	0x080134b0
 8009830:	080135f4 	.word	0x080135f4
 8009834:	080134f4 	.word	0x080134f4
 8009838:	08013610 	.word	0x08013610
 800983c:	200088f0 	.word	0x200088f0
 8009840:	200088e4 	.word	0x200088e4
 8009844:	200088ec 	.word	0x200088ec
 8009848:	200088f4 	.word	0x200088f4

0800984c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009854:	2101      	movs	r1, #1
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ff3a 	bl	80096d0 <tcp_abandon>
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d106      	bne.n	8009880 <tcp_update_rcv_ann_wnd+0x1c>
 8009872:	4b25      	ldr	r3, [pc, #148]	@ (8009908 <tcp_update_rcv_ann_wnd+0xa4>)
 8009874:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009878:	4924      	ldr	r1, [pc, #144]	@ (800990c <tcp_update_rcv_ann_wnd+0xa8>)
 800987a:	4825      	ldr	r0, [pc, #148]	@ (8009910 <tcp_update_rcv_ann_wnd+0xac>)
 800987c:	f008 f924 	bl	8011ac8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009888:	4413      	add	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009894:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009898:	bf28      	it	cs
 800989a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800989e:	b292      	uxth	r2, r2
 80098a0:	4413      	add	r3, r2
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	db08      	blt.n	80098bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	e020      	b.n	80098fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	1ad3      	subs	r3, r2, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	dd03      	ble.n	80098d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80098d0:	e014      	b.n	80098fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e4:	d306      	bcc.n	80098f4 <tcp_update_rcv_ann_wnd+0x90>
 80098e6:	4b08      	ldr	r3, [pc, #32]	@ (8009908 <tcp_update_rcv_ann_wnd+0xa4>)
 80098e8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80098ec:	4909      	ldr	r1, [pc, #36]	@ (8009914 <tcp_update_rcv_ann_wnd+0xb0>)
 80098ee:	4808      	ldr	r0, [pc, #32]	@ (8009910 <tcp_update_rcv_ann_wnd+0xac>)
 80098f0:	f008 f8ea 	bl	8011ac8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80098fc:	2300      	movs	r3, #0
  }
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	080134b0 	.word	0x080134b0
 800990c:	0801370c 	.word	0x0801370c
 8009910:	080134f4 	.word	0x080134f4
 8009914:	08013730 	.word	0x08013730

08009918 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	460b      	mov	r3, r1
 8009922:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d107      	bne.n	800993a <tcp_recved+0x22>
 800992a:	4b1f      	ldr	r3, [pc, #124]	@ (80099a8 <tcp_recved+0x90>)
 800992c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009930:	491e      	ldr	r1, [pc, #120]	@ (80099ac <tcp_recved+0x94>)
 8009932:	481f      	ldr	r0, [pc, #124]	@ (80099b0 <tcp_recved+0x98>)
 8009934:	f008 f8c8 	bl	8011ac8 <iprintf>
 8009938:	e032      	b.n	80099a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7d1b      	ldrb	r3, [r3, #20]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d106      	bne.n	8009950 <tcp_recved+0x38>
 8009942:	4b19      	ldr	r3, [pc, #100]	@ (80099a8 <tcp_recved+0x90>)
 8009944:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009948:	491a      	ldr	r1, [pc, #104]	@ (80099b4 <tcp_recved+0x9c>)
 800994a:	4819      	ldr	r0, [pc, #100]	@ (80099b0 <tcp_recved+0x98>)
 800994c:	f008 f8bc 	bl	8011ac8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009954:	887b      	ldrh	r3, [r7, #2]
 8009956:	4413      	add	r3, r2
 8009958:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800995a:	89fb      	ldrh	r3, [r7, #14]
 800995c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009960:	d804      	bhi.n	800996c <tcp_recved+0x54>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009966:	89fa      	ldrh	r2, [r7, #14]
 8009968:	429a      	cmp	r2, r3
 800996a:	d204      	bcs.n	8009976 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009972:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009974:	e002      	b.n	800997c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	89fa      	ldrh	r2, [r7, #14]
 800997a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff ff71 	bl	8009864 <tcp_update_rcv_ann_wnd>
 8009982:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800998a:	d309      	bcc.n	80099a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8b5b      	ldrh	r3, [r3, #26]
 8009990:	f043 0302 	orr.w	r3, r3, #2
 8009994:	b29a      	uxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f004 fa96 	bl	800decc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	080134b0 	.word	0x080134b0
 80099ac:	0801374c 	.word	0x0801374c
 80099b0:	080134f4 	.word	0x080134f4
 80099b4:	08013764 	.word	0x08013764

080099b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80099b8:	b5b0      	push	{r4, r5, r7, lr}
 80099ba:	b090      	sub	sp, #64	@ 0x40
 80099bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80099c4:	4b95      	ldr	r3, [pc, #596]	@ (8009c1c <tcp_slowtmr+0x264>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	4a94      	ldr	r2, [pc, #592]	@ (8009c1c <tcp_slowtmr+0x264>)
 80099cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80099ce:	4b94      	ldr	r3, [pc, #592]	@ (8009c20 <tcp_slowtmr+0x268>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	4b92      	ldr	r3, [pc, #584]	@ (8009c20 <tcp_slowtmr+0x268>)
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e000      	b.n	80099de <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80099dc:	bf00      	nop
  prev = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80099e2:	4b90      	ldr	r3, [pc, #576]	@ (8009c24 <tcp_slowtmr+0x26c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80099e8:	e29f      	b.n	8009f2a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	7d1b      	ldrb	r3, [r3, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <tcp_slowtmr+0x48>
 80099f2:	4b8d      	ldr	r3, [pc, #564]	@ (8009c28 <tcp_slowtmr+0x270>)
 80099f4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80099f8:	498c      	ldr	r1, [pc, #560]	@ (8009c2c <tcp_slowtmr+0x274>)
 80099fa:	488d      	ldr	r0, [pc, #564]	@ (8009c30 <tcp_slowtmr+0x278>)
 80099fc:	f008 f864 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	7d1b      	ldrb	r3, [r3, #20]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d106      	bne.n	8009a16 <tcp_slowtmr+0x5e>
 8009a08:	4b87      	ldr	r3, [pc, #540]	@ (8009c28 <tcp_slowtmr+0x270>)
 8009a0a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009a0e:	4989      	ldr	r1, [pc, #548]	@ (8009c34 <tcp_slowtmr+0x27c>)
 8009a10:	4887      	ldr	r0, [pc, #540]	@ (8009c30 <tcp_slowtmr+0x278>)
 8009a12:	f008 f859 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a18:	7d1b      	ldrb	r3, [r3, #20]
 8009a1a:	2b0a      	cmp	r3, #10
 8009a1c:	d106      	bne.n	8009a2c <tcp_slowtmr+0x74>
 8009a1e:	4b82      	ldr	r3, [pc, #520]	@ (8009c28 <tcp_slowtmr+0x270>)
 8009a20:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009a24:	4984      	ldr	r1, [pc, #528]	@ (8009c38 <tcp_slowtmr+0x280>)
 8009a26:	4882      	ldr	r0, [pc, #520]	@ (8009c30 <tcp_slowtmr+0x278>)
 8009a28:	f008 f84e 	bl	8011ac8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2e:	7f9a      	ldrb	r2, [r3, #30]
 8009a30:	4b7b      	ldr	r3, [pc, #492]	@ (8009c20 <tcp_slowtmr+0x268>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d105      	bne.n	8009a44 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009a42:	e272      	b.n	8009f2a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8009a44:	4b76      	ldr	r3, [pc, #472]	@ (8009c20 <tcp_slowtmr+0x268>)
 8009a46:	781a      	ldrb	r2, [r3, #0]
 8009a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5a:	7d1b      	ldrb	r3, [r3, #20]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d10a      	bne.n	8009a76 <tcp_slowtmr+0xbe>
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d905      	bls.n	8009a76 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a74:	e11e      	b.n	8009cb4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a7c:	2b0b      	cmp	r3, #11
 8009a7e:	d905      	bls.n	8009a8c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a84:	3301      	adds	r3, #1
 8009a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009a8a:	e113      	b.n	8009cb4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d075      	beq.n	8009b82 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d006      	beq.n	8009aac <tcp_slowtmr+0xf4>
 8009a9e:	4b62      	ldr	r3, [pc, #392]	@ (8009c28 <tcp_slowtmr+0x270>)
 8009aa0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009aa4:	4965      	ldr	r1, [pc, #404]	@ (8009c3c <tcp_slowtmr+0x284>)
 8009aa6:	4862      	ldr	r0, [pc, #392]	@ (8009c30 <tcp_slowtmr+0x278>)
 8009aa8:	f008 f80e 	bl	8011ac8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <tcp_slowtmr+0x10a>
 8009ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8009c28 <tcp_slowtmr+0x270>)
 8009ab6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009aba:	4961      	ldr	r1, [pc, #388]	@ (8009c40 <tcp_slowtmr+0x288>)
 8009abc:	485c      	ldr	r0, [pc, #368]	@ (8009c30 <tcp_slowtmr+0x278>)
 8009abe:	f008 f803 	bl	8011ac8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009ac8:	2b0b      	cmp	r3, #11
 8009aca:	d905      	bls.n	8009ad8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ad6:	e0ed      	b.n	8009cb4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ada:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4a58      	ldr	r2, [pc, #352]	@ (8009c44 <tcp_slowtmr+0x28c>)
 8009ae2:	5cd3      	ldrb	r3, [r2, r3]
 8009ae4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009aec:	7c7a      	ldrb	r2, [r7, #17]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d907      	bls.n	8009b02 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009af8:	3301      	adds	r3, #1
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009afe:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009b08:	7c7a      	ldrb	r2, [r7, #17]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	f200 80d2 	bhi.w	8009cb4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009b10:	2301      	movs	r3, #1
 8009b12:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d108      	bne.n	8009b30 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009b1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b20:	f005 f87c 	bl	800ec1c <tcp_zero_window_probe>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d014      	beq.n	8009b54 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	623b      	str	r3, [r7, #32]
 8009b2e:	e011      	b.n	8009b54 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b36:	4619      	mov	r1, r3
 8009b38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b3a:	f003 ff41 	bl	800d9c0 <tcp_split_unsent_seg>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d107      	bne.n	8009b54 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009b44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b46:	f004 f9c1 	bl	800decc <tcp_output>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 80ac 	beq.w	8009cb4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009b6a:	2b06      	cmp	r3, #6
 8009b6c:	f200 80a2 	bhi.w	8009cb4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b72:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009b76:	3301      	adds	r3, #1
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8009b80:	e098      	b.n	8009cb4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db0f      	blt.n	8009bac <tcp_slowtmr+0x1f4>
 8009b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009b92:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d008      	beq.n	8009bac <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	b21a      	sxth	r2, r3
 8009ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009baa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8009bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	db7b      	blt.n	8009cb4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009bbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009bbe:	f004 fc79 	bl	800e4b4 <tcp_rexmit_rto_prepare>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d007      	beq.n	8009bd8 <tcp_slowtmr+0x220>
 8009bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d171      	bne.n	8009cb4 <tcp_slowtmr+0x2fc>
 8009bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d06d      	beq.n	8009cb4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	7d1b      	ldrb	r3, [r3, #20]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d03a      	beq.n	8009c56 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009be6:	2b0c      	cmp	r3, #12
 8009be8:	bf28      	it	cs
 8009bea:	230c      	movcs	r3, #12
 8009bec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009bf4:	10db      	asrs	r3, r3, #3
 8009bf6:	b21b      	sxth	r3, r3
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009c00:	4413      	add	r3, r2
 8009c02:	7efa      	ldrb	r2, [r7, #27]
 8009c04:	4910      	ldr	r1, [pc, #64]	@ (8009c48 <tcp_slowtmr+0x290>)
 8009c06:	5c8a      	ldrb	r2, [r1, r2]
 8009c08:	4093      	lsls	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009c12:	4293      	cmp	r3, r2
 8009c14:	dc1a      	bgt.n	8009c4c <tcp_slowtmr+0x294>
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	b21a      	sxth	r2, r3
 8009c1a:	e019      	b.n	8009c50 <tcp_slowtmr+0x298>
 8009c1c:	200088e0 	.word	0x200088e0
 8009c20:	200088f6 	.word	0x200088f6
 8009c24:	200088ec 	.word	0x200088ec
 8009c28:	080134b0 	.word	0x080134b0
 8009c2c:	080137f4 	.word	0x080137f4
 8009c30:	080134f4 	.word	0x080134f4
 8009c34:	08013820 	.word	0x08013820
 8009c38:	0801384c 	.word	0x0801384c
 8009c3c:	0801387c 	.word	0x0801387c
 8009c40:	080138b0 	.word	0x080138b0
 8009c44:	08015490 	.word	0x08015490
 8009c48:	08015480 	.word	0x08015480
 8009c4c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8009c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c58:	2200      	movs	r2, #0
 8009c5a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	bf28      	it	cs
 8009c6c:	4613      	movcs	r3, r2
 8009c6e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009c70:	8a7b      	ldrh	r3, [r7, #18]
 8009c72:	085b      	lsrs	r3, r3, #1
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d206      	bcs.n	8009c9c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009c92:	005b      	lsls	r3, r3, #1
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c98:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8009ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8009ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009cae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cb0:	f004 fc70 	bl	800e594 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	7d1b      	ldrb	r3, [r3, #20]
 8009cb8:	2b06      	cmp	r3, #6
 8009cba:	d111      	bne.n	8009ce0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbe:	8b5b      	ldrh	r3, [r3, #26]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cc8:	4b9d      	ldr	r3, [pc, #628]	@ (8009f40 <tcp_slowtmr+0x588>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cce:	6a1b      	ldr	r3, [r3, #32]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	2b28      	cmp	r3, #40	@ 0x28
 8009cd4:	d904      	bls.n	8009ce0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8009cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cda:	3301      	adds	r3, #1
 8009cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce2:	7a5b      	ldrb	r3, [r3, #9]
 8009ce4:	f003 0308 	and.w	r3, r3, #8
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d04c      	beq.n	8009d86 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8009cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d003      	beq.n	8009cfc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009cf8:	2b07      	cmp	r3, #7
 8009cfa:	d144      	bne.n	8009d86 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cfc:	4b90      	ldr	r3, [pc, #576]	@ (8009f40 <tcp_slowtmr+0x588>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d0c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8009d10:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8009d14:	498b      	ldr	r1, [pc, #556]	@ (8009f44 <tcp_slowtmr+0x58c>)
 8009d16:	fba1 1303 	umull	r1, r3, r1, r3
 8009d1a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d90a      	bls.n	8009d36 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8009d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d24:	3301      	adds	r3, #1
 8009d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009d34:	e027      	b.n	8009d86 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d36:	4b82      	ldr	r3, [pc, #520]	@ (8009f40 <tcp_slowtmr+0x588>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d42:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	4b7e      	ldr	r3, [pc, #504]	@ (8009f48 <tcp_slowtmr+0x590>)
 8009d50:	fb00 f303 	mul.w	r3, r0, r3
 8009d54:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009d56:	497b      	ldr	r1, [pc, #492]	@ (8009f44 <tcp_slowtmr+0x58c>)
 8009d58:	fba1 1303 	umull	r1, r3, r1, r3
 8009d5c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d911      	bls.n	8009d86 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8009d62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009d64:	f004 ff1a 	bl	800eb9c <tcp_keepalive>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009d6e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d107      	bne.n	8009d86 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8009d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d78:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d011      	beq.n	8009db2 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8009f40 <tcp_slowtmr+0x588>)
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	1ad2      	subs	r2, r2, r3
 8009d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009d9e:	4619      	mov	r1, r3
 8009da0:	460b      	mov	r3, r1
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	440b      	add	r3, r1
 8009da6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d302      	bcc.n	8009db2 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8009dac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009dae:	f000 fddb 	bl	800a968 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db4:	7d1b      	ldrb	r3, [r3, #20]
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d10b      	bne.n	8009dd2 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009dba:	4b61      	ldr	r3, [pc, #388]	@ (8009f40 <tcp_slowtmr+0x588>)
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b28      	cmp	r3, #40	@ 0x28
 8009dc6:	d904      	bls.n	8009dd2 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8009dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dcc:	3301      	adds	r3, #1
 8009dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd4:	7d1b      	ldrb	r3, [r3, #20]
 8009dd6:	2b09      	cmp	r3, #9
 8009dd8:	d10b      	bne.n	8009df2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009dda:	4b59      	ldr	r3, [pc, #356]	@ (8009f40 <tcp_slowtmr+0x588>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	2bf0      	cmp	r3, #240	@ 0xf0
 8009de6:	d904      	bls.n	8009df2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8009de8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dec:	3301      	adds	r3, #1
 8009dee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009df2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d060      	beq.n	8009ebc <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8009dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e00:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009e02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e04:	f000 fbfc 	bl	800a600 <tcp_pcb_purge>
      if (prev != NULL) {
 8009e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d010      	beq.n	8009e30 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009f4c <tcp_slowtmr+0x594>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d106      	bne.n	8009e26 <tcp_slowtmr+0x46e>
 8009e18:	4b4d      	ldr	r3, [pc, #308]	@ (8009f50 <tcp_slowtmr+0x598>)
 8009e1a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009e1e:	494d      	ldr	r1, [pc, #308]	@ (8009f54 <tcp_slowtmr+0x59c>)
 8009e20:	484d      	ldr	r0, [pc, #308]	@ (8009f58 <tcp_slowtmr+0x5a0>)
 8009e22:	f007 fe51 	bl	8011ac8 <iprintf>
        prev->next = pcb->next;
 8009e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2c:	60da      	str	r2, [r3, #12]
 8009e2e:	e00f      	b.n	8009e50 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009e30:	4b46      	ldr	r3, [pc, #280]	@ (8009f4c <tcp_slowtmr+0x594>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d006      	beq.n	8009e48 <tcp_slowtmr+0x490>
 8009e3a:	4b45      	ldr	r3, [pc, #276]	@ (8009f50 <tcp_slowtmr+0x598>)
 8009e3c:	f240 5271 	movw	r2, #1393	@ 0x571
 8009e40:	4946      	ldr	r1, [pc, #280]	@ (8009f5c <tcp_slowtmr+0x5a4>)
 8009e42:	4845      	ldr	r0, [pc, #276]	@ (8009f58 <tcp_slowtmr+0x5a0>)
 8009e44:	f007 fe40 	bl	8011ac8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f4c <tcp_slowtmr+0x594>)
 8009e4e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009e50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d013      	beq.n	8009e80 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009e60:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e64:	3304      	adds	r3, #4
 8009e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e68:	8ad2      	ldrh	r2, [r2, #22]
 8009e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e6c:	8b09      	ldrh	r1, [r1, #24]
 8009e6e:	9102      	str	r1, [sp, #8]
 8009e70:	9201      	str	r2, [sp, #4]
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	462b      	mov	r3, r5
 8009e76:	4622      	mov	r2, r4
 8009e78:	4601      	mov	r1, r0
 8009e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009e7c:	f004 fdda 	bl	800ea34 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	7d1b      	ldrb	r3, [r3, #20]
 8009e8a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009e96:	6838      	ldr	r0, [r7, #0]
 8009e98:	f7ff f9f0 	bl	800927c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009e9c:	4b30      	ldr	r3, [pc, #192]	@ (8009f60 <tcp_slowtmr+0x5a8>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d004      	beq.n	8009eb2 <tcp_slowtmr+0x4fa>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f06f 010c 	mvn.w	r1, #12
 8009eae:	68b8      	ldr	r0, [r7, #8]
 8009eb0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8009f60 <tcp_slowtmr+0x5a8>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d037      	beq.n	8009f2a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8009eba:	e590      	b.n	80099de <tcp_slowtmr+0x26>
      prev = pcb;
 8009ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	7f1b      	ldrb	r3, [r3, #28]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed4:	7f1a      	ldrb	r2, [r3, #28]
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	7f5b      	ldrb	r3, [r3, #29]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d325      	bcc.n	8009f2a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8009ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8009f60 <tcp_slowtmr+0x5a8>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <tcp_slowtmr+0x554>
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009efc:	6912      	ldr	r2, [r2, #16]
 8009efe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009f0a:	e002      	b.n	8009f12 <tcp_slowtmr+0x55a>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009f12:	4b13      	ldr	r3, [pc, #76]	@ (8009f60 <tcp_slowtmr+0x5a8>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f47f ad60 	bne.w	80099dc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009f1c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <tcp_slowtmr+0x572>
          tcp_output(prev);
 8009f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f26:	f003 ffd1 	bl	800decc <tcp_output>
  while (pcb != NULL) {
 8009f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f47f ad5c 	bne.w	80099ea <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <tcp_slowtmr+0x5ac>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009f3c:	e067      	b.n	800a00e <tcp_slowtmr+0x656>
 8009f3e:	bf00      	nop
 8009f40:	200088e0 	.word	0x200088e0
 8009f44:	10624dd3 	.word	0x10624dd3
 8009f48:	000124f8 	.word	0x000124f8
 8009f4c:	200088ec 	.word	0x200088ec
 8009f50:	080134b0 	.word	0x080134b0
 8009f54:	080138e8 	.word	0x080138e8
 8009f58:	080134f4 	.word	0x080134f4
 8009f5c:	08013914 	.word	0x08013914
 8009f60:	200088f4 	.word	0x200088f4
 8009f64:	200088f0 	.word	0x200088f0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6a:	7d1b      	ldrb	r3, [r3, #20]
 8009f6c:	2b0a      	cmp	r3, #10
 8009f6e:	d006      	beq.n	8009f7e <tcp_slowtmr+0x5c6>
 8009f70:	4b2b      	ldr	r3, [pc, #172]	@ (800a020 <tcp_slowtmr+0x668>)
 8009f72:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009f76:	492b      	ldr	r1, [pc, #172]	@ (800a024 <tcp_slowtmr+0x66c>)
 8009f78:	482b      	ldr	r0, [pc, #172]	@ (800a028 <tcp_slowtmr+0x670>)
 8009f7a:	f007 fda5 	bl	8011ac8 <iprintf>
    pcb_remove = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f84:	4b29      	ldr	r3, [pc, #164]	@ (800a02c <tcp_slowtmr+0x674>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8a:	6a1b      	ldr	r3, [r3, #32]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2bf0      	cmp	r3, #240	@ 0xf0
 8009f90:	d904      	bls.n	8009f9c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009f92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f96:	3301      	adds	r3, #1
 8009f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d02f      	beq.n	800a004 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009fa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fa6:	f000 fb2b 	bl	800a600 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d010      	beq.n	8009fd2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009fb0:	4b1f      	ldr	r3, [pc, #124]	@ (800a030 <tcp_slowtmr+0x678>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d106      	bne.n	8009fc8 <tcp_slowtmr+0x610>
 8009fba:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <tcp_slowtmr+0x668>)
 8009fbc:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009fc0:	491c      	ldr	r1, [pc, #112]	@ (800a034 <tcp_slowtmr+0x67c>)
 8009fc2:	4819      	ldr	r0, [pc, #100]	@ (800a028 <tcp_slowtmr+0x670>)
 8009fc4:	f007 fd80 	bl	8011ac8 <iprintf>
        prev->next = pcb->next;
 8009fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fce:	60da      	str	r2, [r3, #12]
 8009fd0:	e00f      	b.n	8009ff2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009fd2:	4b17      	ldr	r3, [pc, #92]	@ (800a030 <tcp_slowtmr+0x678>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d006      	beq.n	8009fea <tcp_slowtmr+0x632>
 8009fdc:	4b10      	ldr	r3, [pc, #64]	@ (800a020 <tcp_slowtmr+0x668>)
 8009fde:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009fe2:	4915      	ldr	r1, [pc, #84]	@ (800a038 <tcp_slowtmr+0x680>)
 8009fe4:	4810      	ldr	r0, [pc, #64]	@ (800a028 <tcp_slowtmr+0x670>)
 8009fe6:	f007 fd6f 	bl	8011ac8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	4a10      	ldr	r2, [pc, #64]	@ (800a030 <tcp_slowtmr+0x678>)
 8009ff0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009ffc:	69f8      	ldr	r0, [r7, #28]
 8009ffe:	f7ff f93d 	bl	800927c <tcp_free>
 800a002:	e004      	b.n	800a00e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800a004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a006:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1a9      	bne.n	8009f68 <tcp_slowtmr+0x5b0>
    }
  }
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	3730      	adds	r7, #48	@ 0x30
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bdb0      	pop	{r4, r5, r7, pc}
 800a01e:	bf00      	nop
 800a020:	080134b0 	.word	0x080134b0
 800a024:	08013940 	.word	0x08013940
 800a028:	080134f4 	.word	0x080134f4
 800a02c:	200088e0 	.word	0x200088e0
 800a030:	200088f0 	.word	0x200088f0
 800a034:	08013970 	.word	0x08013970
 800a038:	08013998 	.word	0x08013998

0800a03c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a042:	4b2d      	ldr	r3, [pc, #180]	@ (800a0f8 <tcp_fasttmr+0xbc>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	3301      	adds	r3, #1
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	4b2b      	ldr	r3, [pc, #172]	@ (800a0f8 <tcp_fasttmr+0xbc>)
 800a04c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a04e:	4b2b      	ldr	r3, [pc, #172]	@ (800a0fc <tcp_fasttmr+0xc0>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a054:	e048      	b.n	800a0e8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7f9a      	ldrb	r2, [r3, #30]
 800a05a:	4b27      	ldr	r3, [pc, #156]	@ (800a0f8 <tcp_fasttmr+0xbc>)
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d03f      	beq.n	800a0e2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a062:	4b25      	ldr	r3, [pc, #148]	@ (800a0f8 <tcp_fasttmr+0xbc>)
 800a064:	781a      	ldrb	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	8b5b      	ldrh	r3, [r3, #26]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d010      	beq.n	800a098 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	8b5b      	ldrh	r3, [r3, #26]
 800a07a:	f043 0302 	orr.w	r3, r3, #2
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f003 ff21 	bl	800decc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	8b5b      	ldrh	r3, [r3, #26]
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	8b5b      	ldrh	r3, [r3, #26]
 800a09c:	f003 0308 	and.w	r3, r3, #8
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d009      	beq.n	800a0b8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8b5b      	ldrh	r3, [r3, #26]
 800a0a8:	f023 0308 	bic.w	r3, r3, #8
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff fa76 	bl	80095a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <tcp_fasttmr+0xc4>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f819 	bl	800a104 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a100 <tcp_fasttmr+0xc4>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d000      	beq.n	800a0dc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a0da:	e7b8      	b.n	800a04e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	607b      	str	r3, [r7, #4]
 800a0e0:	e002      	b.n	800a0e8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1b3      	bne.n	800a056 <tcp_fasttmr+0x1a>
    }
  }
}
 800a0ee:	bf00      	nop
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	200088f6 	.word	0x200088f6
 800a0fc:	200088ec 	.word	0x200088ec
 800a100:	200088f4 	.word	0x200088f4

0800a104 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a104:	b590      	push	{r4, r7, lr}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d109      	bne.n	800a126 <tcp_process_refused_data+0x22>
 800a112:	4b37      	ldr	r3, [pc, #220]	@ (800a1f0 <tcp_process_refused_data+0xec>)
 800a114:	f240 6209 	movw	r2, #1545	@ 0x609
 800a118:	4936      	ldr	r1, [pc, #216]	@ (800a1f4 <tcp_process_refused_data+0xf0>)
 800a11a:	4837      	ldr	r0, [pc, #220]	@ (800a1f8 <tcp_process_refused_data+0xf4>)
 800a11c:	f007 fcd4 	bl	8011ac8 <iprintf>
 800a120:	f06f 030f 	mvn.w	r3, #15
 800a124:	e060      	b.n	800a1e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a12a:	7b5b      	ldrb	r3, [r3, #13]
 800a12c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a132:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <tcp_process_refused_data+0x58>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6918      	ldr	r0, [r3, #16]
 800a14e:	2300      	movs	r3, #0
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	47a0      	blx	r4
 800a156:	4603      	mov	r3, r0
 800a158:	73fb      	strb	r3, [r7, #15]
 800a15a:	e007      	b.n	800a16c <tcp_process_refused_data+0x68>
 800a15c:	2300      	movs	r3, #0
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	6879      	ldr	r1, [r7, #4]
 800a162:	2000      	movs	r0, #0
 800a164:	f000 f8a4 	bl	800a2b0 <tcp_recv_null>
 800a168:	4603      	mov	r3, r0
 800a16a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d12a      	bne.n	800a1ca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a174:	7bbb      	ldrb	r3, [r7, #14]
 800a176:	f003 0320 	and.w	r3, r3, #32
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d033      	beq.n	800a1e6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a182:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a186:	d005      	beq.n	800a194 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a18c:	3301      	adds	r3, #1
 800a18e:	b29a      	uxth	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <tcp_process_refused_data+0xb2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6918      	ldr	r0, [r3, #16]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	47a0      	blx	r4
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]
 800a1b4:	e001      	b.n	800a1ba <tcp_process_refused_data+0xb6>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1be:	f113 0f0d 	cmn.w	r3, #13
 800a1c2:	d110      	bne.n	800a1e6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a1c4:	f06f 030c 	mvn.w	r3, #12
 800a1c8:	e00e      	b.n	800a1e8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ce:	f113 0f0d 	cmn.w	r3, #13
 800a1d2:	d102      	bne.n	800a1da <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a1d4:	f06f 030c 	mvn.w	r3, #12
 800a1d8:	e006      	b.n	800a1e8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800a1e0:	f06f 0304 	mvn.w	r3, #4
 800a1e4:	e000      	b.n	800a1e8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd90      	pop	{r4, r7, pc}
 800a1f0:	080134b0 	.word	0x080134b0
 800a1f4:	080139c0 	.word	0x080139c0
 800a1f8:	080134f4 	.word	0x080134f4

0800a1fc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a204:	e007      	b.n	800a216 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f80a 	bl	800a226 <tcp_seg_free>
    seg = next;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f4      	bne.n	800a206 <tcp_segs_free+0xa>
  }
}
 800a21c:	bf00      	nop
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00c      	beq.n	800a24e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fce9 	bl	8008c18 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a246:	6879      	ldr	r1, [r7, #4]
 800a248:	2003      	movs	r0, #3
 800a24a:	f7fd fe8f 	bl	8007f6c <memp_free>
  }
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <tcp_seg_copy+0x1c>
 800a266:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <tcp_seg_copy+0x4c>)
 800a268:	f240 6282 	movw	r2, #1666	@ 0x682
 800a26c:	490e      	ldr	r1, [pc, #56]	@ (800a2a8 <tcp_seg_copy+0x50>)
 800a26e:	480f      	ldr	r0, [pc, #60]	@ (800a2ac <tcp_seg_copy+0x54>)
 800a270:	f007 fc2a 	bl	8011ac8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a274:	2003      	movs	r0, #3
 800a276:	f7fd fe09 	bl	8007e8c <memp_malloc>
 800a27a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d101      	bne.n	800a286 <tcp_seg_copy+0x2e>
    return NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	e00a      	b.n	800a29c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a286:	2210      	movs	r2, #16
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f007 fde9 	bl	8011e62 <memcpy>
  pbuf_ref(cseg->p);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fd5f 	bl	8008d58 <pbuf_ref>
  return cseg;
 800a29a:	68fb      	ldr	r3, [r7, #12]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	080134b0 	.word	0x080134b0
 800a2a8:	08013a04 	.word	0x08013a04
 800a2ac:	080134f4 	.word	0x080134f4

0800a2b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
 800a2bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d109      	bne.n	800a2d8 <tcp_recv_null+0x28>
 800a2c4:	4b12      	ldr	r3, [pc, #72]	@ (800a310 <tcp_recv_null+0x60>)
 800a2c6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a2ca:	4912      	ldr	r1, [pc, #72]	@ (800a314 <tcp_recv_null+0x64>)
 800a2cc:	4812      	ldr	r0, [pc, #72]	@ (800a318 <tcp_recv_null+0x68>)
 800a2ce:	f007 fbfb 	bl	8011ac8 <iprintf>
 800a2d2:	f06f 030f 	mvn.w	r3, #15
 800a2d6:	e016      	b.n	800a306 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	891b      	ldrh	r3, [r3, #8]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	68b8      	ldr	r0, [r7, #8]
 800a2e6:	f7ff fb17 	bl	8009918 <tcp_recved>
    pbuf_free(p);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7fe fc94 	bl	8008c18 <pbuf_free>
 800a2f0:	e008      	b.n	800a304 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a2f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d104      	bne.n	800a304 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a2fa:	68b8      	ldr	r0, [r7, #8]
 800a2fc:	f7ff f9bc 	bl	8009678 <tcp_close>
 800a300:	4603      	mov	r3, r0
 800a302:	e000      	b.n	800a306 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	080134b0 	.word	0x080134b0
 800a314:	08013a20 	.word	0x08013a20
 800a318:	080134f4 	.word	0x080134f4

0800a31c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	db01      	blt.n	800a332 <tcp_kill_prio+0x16>
 800a32e:	79fb      	ldrb	r3, [r7, #7]
 800a330:	e000      	b.n	800a334 <tcp_kill_prio+0x18>
 800a332:	237f      	movs	r3, #127	@ 0x7f
 800a334:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d034      	beq.n	800a3a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3b01      	subs	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a346:	2300      	movs	r3, #0
 800a348:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a34a:	4b19      	ldr	r3, [pc, #100]	@ (800a3b0 <tcp_kill_prio+0x94>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	617b      	str	r3, [r7, #20]
 800a350:	e01f      	b.n	800a392 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	7d5b      	ldrb	r3, [r3, #21]
 800a356:	7afa      	ldrb	r2, [r7, #11]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d80c      	bhi.n	800a376 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a360:	7afa      	ldrb	r2, [r7, #11]
 800a362:	429a      	cmp	r2, r3
 800a364:	d112      	bne.n	800a38c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a366:	4b13      	ldr	r3, [pc, #76]	@ (800a3b4 <tcp_kill_prio+0x98>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	429a      	cmp	r2, r3
 800a374:	d80a      	bhi.n	800a38c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a376:	4b0f      	ldr	r3, [pc, #60]	@ (800a3b4 <tcp_kill_prio+0x98>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	7d5b      	ldrb	r3, [r3, #21]
 800a38a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	617b      	str	r3, [r7, #20]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1dc      	bne.n	800a352 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d004      	beq.n	800a3a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a39e:	6938      	ldr	r0, [r7, #16]
 800a3a0:	f7ff fa54 	bl	800984c <tcp_abort>
 800a3a4:	e000      	b.n	800a3a8 <tcp_kill_prio+0x8c>
    return;
 800a3a6:	bf00      	nop
  }
}
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	200088ec 	.word	0x200088ec
 800a3b4:	200088e0 	.word	0x200088e0

0800a3b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d009      	beq.n	800a3dc <tcp_kill_state+0x24>
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b09      	cmp	r3, #9
 800a3cc:	d006      	beq.n	800a3dc <tcp_kill_state+0x24>
 800a3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a438 <tcp_kill_state+0x80>)
 800a3d0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a3d4:	4919      	ldr	r1, [pc, #100]	@ (800a43c <tcp_kill_state+0x84>)
 800a3d6:	481a      	ldr	r0, [pc, #104]	@ (800a440 <tcp_kill_state+0x88>)
 800a3d8:	f007 fb76 	bl	8011ac8 <iprintf>

  inactivity = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e4:	4b17      	ldr	r3, [pc, #92]	@ (800a444 <tcp_kill_state+0x8c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	617b      	str	r3, [r7, #20]
 800a3ea:	e017      	b.n	800a41c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	7d1b      	ldrb	r3, [r3, #20]
 800a3f0:	79fa      	ldrb	r2, [r7, #7]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d10f      	bne.n	800a416 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a3f6:	4b14      	ldr	r3, [pc, #80]	@ (800a448 <tcp_kill_state+0x90>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	68fa      	ldr	r2, [r7, #12]
 800a402:	429a      	cmp	r2, r3
 800a404:	d807      	bhi.n	800a416 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a406:	4b10      	ldr	r3, [pc, #64]	@ (800a448 <tcp_kill_state+0x90>)
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e4      	bne.n	800a3ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a428:	2100      	movs	r1, #0
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f7ff f950 	bl	80096d0 <tcp_abandon>
  }
}
 800a430:	bf00      	nop
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	080134b0 	.word	0x080134b0
 800a43c:	08013a3c 	.word	0x08013a3c
 800a440:	080134f4 	.word	0x080134f4
 800a444:	200088ec 	.word	0x200088ec
 800a448:	200088e0 	.word	0x200088e0

0800a44c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a45a:	4b12      	ldr	r3, [pc, #72]	@ (800a4a4 <tcp_kill_timewait+0x58>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e012      	b.n	800a488 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a462:	4b11      	ldr	r3, [pc, #68]	@ (800a4a8 <tcp_kill_timewait+0x5c>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d807      	bhi.n	800a482 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a472:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a8 <tcp_kill_timewait+0x5c>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a1b      	ldr	r3, [r3, #32]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e9      	bne.n	800a462 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a494:	68b8      	ldr	r0, [r7, #8]
 800a496:	f7ff f9d9 	bl	800984c <tcp_abort>
  }
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200088f0 	.word	0x200088f0
 800a4a8:	200088e0 	.word	0x200088e0

0800a4ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a4b2:	4b10      	ldr	r3, [pc, #64]	@ (800a4f4 <tcp_handle_closepend+0x48>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a4b8:	e014      	b.n	800a4e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	8b5b      	ldrh	r3, [r3, #26]
 800a4c4:	f003 0308 	and.w	r3, r3, #8
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d009      	beq.n	800a4e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8b5b      	ldrh	r3, [r3, #26]
 800a4d0:	f023 0308 	bic.w	r3, r3, #8
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff f862 	bl	80095a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e7      	bne.n	800a4ba <tcp_handle_closepend+0xe>
  }
}
 800a4ea:	bf00      	nop
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	200088ec 	.word	0x200088ec

0800a4f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a502:	2001      	movs	r0, #1
 800a504:	f7fd fcc2 	bl	8007e8c <memp_malloc>
 800a508:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d126      	bne.n	800a55e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a510:	f7ff ffcc 	bl	800a4ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a514:	f7ff ff9a 	bl	800a44c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a518:	2001      	movs	r0, #1
 800a51a:	f7fd fcb7 	bl	8007e8c <memp_malloc>
 800a51e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d11b      	bne.n	800a55e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a526:	2009      	movs	r0, #9
 800a528:	f7ff ff46 	bl	800a3b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a52c:	2001      	movs	r0, #1
 800a52e:	f7fd fcad 	bl	8007e8c <memp_malloc>
 800a532:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d111      	bne.n	800a55e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a53a:	2008      	movs	r0, #8
 800a53c:	f7ff ff3c 	bl	800a3b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a540:	2001      	movs	r0, #1
 800a542:	f7fd fca3 	bl	8007e8c <memp_malloc>
 800a546:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d107      	bne.n	800a55e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff fee3 	bl	800a31c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a556:	2001      	movs	r0, #1
 800a558:	f7fd fc98 	bl	8007e8c <memp_malloc>
 800a55c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d03f      	beq.n	800a5e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a564:	229c      	movs	r2, #156	@ 0x9c
 800a566:	2100      	movs	r1, #0
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f007 fc05 	bl	8011d78 <memset>
    pcb->prio = prio;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	79fa      	ldrb	r2, [r7, #7]
 800a572:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a57a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a584:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	22ff      	movs	r2, #255	@ 0xff
 800a592:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a59a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2206      	movs	r2, #6
 800a5a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a5b0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <tcp_alloc+0xf8>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <tcp_alloc+0xfc>)
 800a5c4:	781a      	ldrb	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a5d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	4a08      	ldr	r2, [pc, #32]	@ (800a5f8 <tcp_alloc+0x100>)
 800a5d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4a07      	ldr	r2, [pc, #28]	@ (800a5fc <tcp_alloc+0x104>)
 800a5e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200088e0 	.word	0x200088e0
 800a5f4:	200088f6 	.word	0x200088f6
 800a5f8:	0800a2b1 	.word	0x0800a2b1
 800a5fc:	006ddd00 	.word	0x006ddd00

0800a600 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d107      	bne.n	800a61e <tcp_pcb_purge+0x1e>
 800a60e:	4b21      	ldr	r3, [pc, #132]	@ (800a694 <tcp_pcb_purge+0x94>)
 800a610:	f640 0251 	movw	r2, #2129	@ 0x851
 800a614:	4920      	ldr	r1, [pc, #128]	@ (800a698 <tcp_pcb_purge+0x98>)
 800a616:	4821      	ldr	r0, [pc, #132]	@ (800a69c <tcp_pcb_purge+0x9c>)
 800a618:	f007 fa56 	bl	8011ac8 <iprintf>
 800a61c:	e037      	b.n	800a68e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	7d1b      	ldrb	r3, [r3, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d033      	beq.n	800a68e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a62a:	2b0a      	cmp	r3, #10
 800a62c:	d02f      	beq.n	800a68e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a632:	2b01      	cmp	r3, #1
 800a634:	d02b      	beq.n	800a68e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d007      	beq.n	800a64e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe fae8 	bl	8008c18 <pbuf_free>
      pcb->refused_data = NULL;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f986 	bl	800a968 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a662:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff fdc7 	bl	800a1fc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff fdc2 	bl	800a1fc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	080134b0 	.word	0x080134b0
 800a698:	08013afc 	.word	0x08013afc
 800a69c:	080134f4 	.word	0x080134f4

0800a6a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d106      	bne.n	800a6be <tcp_pcb_remove+0x1e>
 800a6b0:	4b3e      	ldr	r3, [pc, #248]	@ (800a7ac <tcp_pcb_remove+0x10c>)
 800a6b2:	f640 0283 	movw	r2, #2179	@ 0x883
 800a6b6:	493e      	ldr	r1, [pc, #248]	@ (800a7b0 <tcp_pcb_remove+0x110>)
 800a6b8:	483e      	ldr	r0, [pc, #248]	@ (800a7b4 <tcp_pcb_remove+0x114>)
 800a6ba:	f007 fa05 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d106      	bne.n	800a6d2 <tcp_pcb_remove+0x32>
 800a6c4:	4b39      	ldr	r3, [pc, #228]	@ (800a7ac <tcp_pcb_remove+0x10c>)
 800a6c6:	f640 0284 	movw	r2, #2180	@ 0x884
 800a6ca:	493b      	ldr	r1, [pc, #236]	@ (800a7b8 <tcp_pcb_remove+0x118>)
 800a6cc:	4839      	ldr	r0, [pc, #228]	@ (800a7b4 <tcp_pcb_remove+0x114>)
 800a6ce:	f007 f9fb 	bl	8011ac8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d105      	bne.n	800a6e8 <tcp_pcb_remove+0x48>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68da      	ldr	r2, [r3, #12]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	e013      	b.n	800a710 <tcp_pcb_remove+0x70>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	e00c      	b.n	800a70a <tcp_pcb_remove+0x6a>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d104      	bne.n	800a704 <tcp_pcb_remove+0x64>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	60da      	str	r2, [r3, #12]
 800a702:	e005      	b.n	800a710 <tcp_pcb_remove+0x70>
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	60fb      	str	r3, [r7, #12]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1ef      	bne.n	800a6f0 <tcp_pcb_remove+0x50>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2200      	movs	r2, #0
 800a714:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a716:	6838      	ldr	r0, [r7, #0]
 800a718:	f7ff ff72 	bl	800a600 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	7d1b      	ldrb	r3, [r3, #20]
 800a720:	2b0a      	cmp	r3, #10
 800a722:	d013      	beq.n	800a74c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d00f      	beq.n	800a74c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	8b5b      	ldrh	r3, [r3, #26]
 800a730:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a734:	2b00      	cmp	r3, #0
 800a736:	d009      	beq.n	800a74c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	8b5b      	ldrh	r3, [r3, #26]
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	b29a      	uxth	r2, r3
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a746:	6838      	ldr	r0, [r7, #0]
 800a748:	f003 fbc0 	bl	800decc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	7d1b      	ldrb	r3, [r3, #20]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d020      	beq.n	800a796 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d006      	beq.n	800a76a <tcp_pcb_remove+0xca>
 800a75c:	4b13      	ldr	r3, [pc, #76]	@ (800a7ac <tcp_pcb_remove+0x10c>)
 800a75e:	f640 0293 	movw	r2, #2195	@ 0x893
 800a762:	4916      	ldr	r1, [pc, #88]	@ (800a7bc <tcp_pcb_remove+0x11c>)
 800a764:	4813      	ldr	r0, [pc, #76]	@ (800a7b4 <tcp_pcb_remove+0x114>)
 800a766:	f007 f9af 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d006      	beq.n	800a780 <tcp_pcb_remove+0xe0>
 800a772:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ac <tcp_pcb_remove+0x10c>)
 800a774:	f640 0294 	movw	r2, #2196	@ 0x894
 800a778:	4911      	ldr	r1, [pc, #68]	@ (800a7c0 <tcp_pcb_remove+0x120>)
 800a77a:	480e      	ldr	r0, [pc, #56]	@ (800a7b4 <tcp_pcb_remove+0x114>)
 800a77c:	f007 f9a4 	bl	8011ac8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <tcp_pcb_remove+0xf6>
 800a788:	4b08      	ldr	r3, [pc, #32]	@ (800a7ac <tcp_pcb_remove+0x10c>)
 800a78a:	f640 0296 	movw	r2, #2198	@ 0x896
 800a78e:	490d      	ldr	r1, [pc, #52]	@ (800a7c4 <tcp_pcb_remove+0x124>)
 800a790:	4808      	ldr	r0, [pc, #32]	@ (800a7b4 <tcp_pcb_remove+0x114>)
 800a792:	f007 f999 	bl	8011ac8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2200      	movs	r2, #0
 800a79a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	080134b0 	.word	0x080134b0
 800a7b0:	08013b18 	.word	0x08013b18
 800a7b4:	080134f4 	.word	0x080134f4
 800a7b8:	08013b34 	.word	0x08013b34
 800a7bc:	08013b54 	.word	0x08013b54
 800a7c0:	08013b6c 	.word	0x08013b6c
 800a7c4:	08013b88 	.word	0x08013b88

0800a7c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <tcp_next_iss+0x1c>
 800a7d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a800 <tcp_next_iss+0x38>)
 800a7d8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a7dc:	4909      	ldr	r1, [pc, #36]	@ (800a804 <tcp_next_iss+0x3c>)
 800a7de:	480a      	ldr	r0, [pc, #40]	@ (800a808 <tcp_next_iss+0x40>)
 800a7e0:	f007 f972 	bl	8011ac8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a7e4:	4b09      	ldr	r3, [pc, #36]	@ (800a80c <tcp_next_iss+0x44>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <tcp_next_iss+0x48>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	4a07      	ldr	r2, [pc, #28]	@ (800a80c <tcp_next_iss+0x44>)
 800a7f0:	6013      	str	r3, [r2, #0]
  return iss;
 800a7f2:	4b06      	ldr	r3, [pc, #24]	@ (800a80c <tcp_next_iss+0x44>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	080134b0 	.word	0x080134b0
 800a804:	08013ba0 	.word	0x08013ba0
 800a808:	080134f4 	.word	0x080134f4
 800a80c:	20000024 	.word	0x20000024
 800a810:	200088e0 	.word	0x200088e0

0800a814 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <tcp_eff_send_mss_netif+0x22>
 800a828:	4b14      	ldr	r3, [pc, #80]	@ (800a87c <tcp_eff_send_mss_netif+0x68>)
 800a82a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a82e:	4914      	ldr	r1, [pc, #80]	@ (800a880 <tcp_eff_send_mss_netif+0x6c>)
 800a830:	4814      	ldr	r0, [pc, #80]	@ (800a884 <tcp_eff_send_mss_netif+0x70>)
 800a832:	f007 f949 	bl	8011ac8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a83c:	89fb      	ldrh	r3, [r7, #14]
 800a83e:	e019      	b.n	800a874 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a844:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a846:	8afb      	ldrh	r3, [r7, #22]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d012      	beq.n	800a872 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a84c:	2328      	movs	r3, #40	@ 0x28
 800a84e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a850:	8afa      	ldrh	r2, [r7, #22]
 800a852:	8abb      	ldrh	r3, [r7, #20]
 800a854:	429a      	cmp	r2, r3
 800a856:	d904      	bls.n	800a862 <tcp_eff_send_mss_netif+0x4e>
 800a858:	8afa      	ldrh	r2, [r7, #22]
 800a85a:	8abb      	ldrh	r3, [r7, #20]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	b29b      	uxth	r3, r3
 800a860:	e000      	b.n	800a864 <tcp_eff_send_mss_netif+0x50>
 800a862:	2300      	movs	r3, #0
 800a864:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a866:	8a7a      	ldrh	r2, [r7, #18]
 800a868:	89fb      	ldrh	r3, [r7, #14]
 800a86a:	4293      	cmp	r3, r2
 800a86c:	bf28      	it	cs
 800a86e:	4613      	movcs	r3, r2
 800a870:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a872:	89fb      	ldrh	r3, [r7, #14]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3718      	adds	r7, #24
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	080134b0 	.word	0x080134b0
 800a880:	08013bbc 	.word	0x08013bbc
 800a884:	080134f4 	.word	0x080134f4

0800a888 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d119      	bne.n	800a8d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a89c:	4b10      	ldr	r3, [pc, #64]	@ (800a8e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a89e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a8a2:	4910      	ldr	r1, [pc, #64]	@ (800a8e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a8a4:	4810      	ldr	r0, [pc, #64]	@ (800a8e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a8a6:	f007 f90f 	bl	8011ac8 <iprintf>

  while (pcb != NULL) {
 800a8aa:	e011      	b.n	800a8d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d108      	bne.n	800a8ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f7fe ffc4 	bl	800984c <tcp_abort>
      pcb = next;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	e002      	b.n	800a8d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1ea      	bne.n	800a8ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	080134b0 	.word	0x080134b0
 800a8e4:	08013be4 	.word	0x08013be4
 800a8e8:	080134f4 	.word	0x080134f4

0800a8ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d02a      	beq.n	800a952 <tcp_netif_ip_addr_changed+0x66>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d026      	beq.n	800a952 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a904:	4b15      	ldr	r3, [pc, #84]	@ (800a95c <tcp_netif_ip_addr_changed+0x70>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ffbc 	bl	800a888 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a910:	4b13      	ldr	r3, [pc, #76]	@ (800a960 <tcp_netif_ip_addr_changed+0x74>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff ffb6 	bl	800a888 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d017      	beq.n	800a952 <tcp_netif_ip_addr_changed+0x66>
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d013      	beq.n	800a952 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a92a:	4b0e      	ldr	r3, [pc, #56]	@ (800a964 <tcp_netif_ip_addr_changed+0x78>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	e00c      	b.n	800a94c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d103      	bne.n	800a946 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1ef      	bne.n	800a932 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a952:	bf00      	nop
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	200088ec 	.word	0x200088ec
 800a960:	200088e4 	.word	0x200088e4
 800a964:	200088e8 	.word	0x200088e8

0800a968 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a974:	2b00      	cmp	r3, #0
 800a976:	d007      	beq.n	800a988 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fc3d 	bl	800a1fc <tcp_segs_free>
    pcb->ooseq = NULL;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a990:	b590      	push	{r4, r7, lr}
 800a992:	b08d      	sub	sp, #52	@ 0x34
 800a994:	af04      	add	r7, sp, #16
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <tcp_input+0x1c>
 800a9a0:	4b9b      	ldr	r3, [pc, #620]	@ (800ac10 <tcp_input+0x280>)
 800a9a2:	2283      	movs	r2, #131	@ 0x83
 800a9a4:	499b      	ldr	r1, [pc, #620]	@ (800ac14 <tcp_input+0x284>)
 800a9a6:	489c      	ldr	r0, [pc, #624]	@ (800ac18 <tcp_input+0x288>)
 800a9a8:	f007 f88e 	bl	8011ac8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	4a9a      	ldr	r2, [pc, #616]	@ (800ac1c <tcp_input+0x28c>)
 800a9b2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	895b      	ldrh	r3, [r3, #10]
 800a9b8:	2b13      	cmp	r3, #19
 800a9ba:	f240 83d1 	bls.w	800b160 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a9be:	4b98      	ldr	r3, [pc, #608]	@ (800ac20 <tcp_input+0x290>)
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	4a97      	ldr	r2, [pc, #604]	@ (800ac20 <tcp_input+0x290>)
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f006 f827 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 83c7 	bne.w	800b164 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a9d6:	4b92      	ldr	r3, [pc, #584]	@ (800ac20 <tcp_input+0x290>)
 800a9d8:	695b      	ldr	r3, [r3, #20]
 800a9da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a9de:	2be0      	cmp	r3, #224	@ 0xe0
 800a9e0:	f000 83c0 	beq.w	800b164 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a9e4:	4b8d      	ldr	r3, [pc, #564]	@ (800ac1c <tcp_input+0x28c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	899b      	ldrh	r3, [r3, #12]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fc fdd5 	bl	800759c <lwip_htons>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	0b1b      	lsrs	r3, r3, #12
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a9fe:	7cbb      	ldrb	r3, [r7, #18]
 800aa00:	2b13      	cmp	r3, #19
 800aa02:	f240 83b1 	bls.w	800b168 <tcp_input+0x7d8>
 800aa06:	7cbb      	ldrb	r3, [r7, #18]
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	891b      	ldrh	r3, [r3, #8]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	f200 83aa 	bhi.w	800b168 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800aa14:	7cbb      	ldrb	r3, [r7, #18]
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	3b14      	subs	r3, #20
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	4b81      	ldr	r3, [pc, #516]	@ (800ac24 <tcp_input+0x294>)
 800aa1e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800aa20:	4b81      	ldr	r3, [pc, #516]	@ (800ac28 <tcp_input+0x298>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	895a      	ldrh	r2, [r3, #10]
 800aa2a:	7cbb      	ldrb	r3, [r7, #18]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d309      	bcc.n	800aa46 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800aa32:	4b7c      	ldr	r3, [pc, #496]	@ (800ac24 <tcp_input+0x294>)
 800aa34:	881a      	ldrh	r2, [r3, #0]
 800aa36:	4b7d      	ldr	r3, [pc, #500]	@ (800ac2c <tcp_input+0x29c>)
 800aa38:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800aa3a:	7cbb      	ldrb	r3, [r7, #18]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7fe f864 	bl	8008b0c <pbuf_remove_header>
 800aa44:	e04e      	b.n	800aae4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <tcp_input+0xca>
 800aa4e:	4b70      	ldr	r3, [pc, #448]	@ (800ac10 <tcp_input+0x280>)
 800aa50:	22c2      	movs	r2, #194	@ 0xc2
 800aa52:	4977      	ldr	r1, [pc, #476]	@ (800ac30 <tcp_input+0x2a0>)
 800aa54:	4870      	ldr	r0, [pc, #448]	@ (800ac18 <tcp_input+0x288>)
 800aa56:	f007 f837 	bl	8011ac8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800aa5a:	2114      	movs	r1, #20
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7fe f855 	bl	8008b0c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	895a      	ldrh	r2, [r3, #10]
 800aa66:	4b71      	ldr	r3, [pc, #452]	@ (800ac2c <tcp_input+0x29c>)
 800aa68:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800aa6a:	4b6e      	ldr	r3, [pc, #440]	@ (800ac24 <tcp_input+0x294>)
 800aa6c:	881a      	ldrh	r2, [r3, #0]
 800aa6e:	4b6f      	ldr	r3, [pc, #444]	@ (800ac2c <tcp_input+0x29c>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800aa76:	4b6d      	ldr	r3, [pc, #436]	@ (800ac2c <tcp_input+0x29c>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fe f845 	bl	8008b0c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	895b      	ldrh	r3, [r3, #10]
 800aa88:	8a3a      	ldrh	r2, [r7, #16]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	f200 836e 	bhi.w	800b16c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	4a64      	ldr	r2, [pc, #400]	@ (800ac28 <tcp_input+0x298>)
 800aa98:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	8a3a      	ldrh	r2, [r7, #16]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe f832 	bl	8008b0c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	891a      	ldrh	r2, [r3, #8]
 800aaac:	8a3b      	ldrh	r3, [r7, #16]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	895b      	ldrh	r3, [r3, #10]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d005      	beq.n	800aaca <tcp_input+0x13a>
 800aabe:	4b54      	ldr	r3, [pc, #336]	@ (800ac10 <tcp_input+0x280>)
 800aac0:	22df      	movs	r2, #223	@ 0xdf
 800aac2:	495c      	ldr	r1, [pc, #368]	@ (800ac34 <tcp_input+0x2a4>)
 800aac4:	4854      	ldr	r0, [pc, #336]	@ (800ac18 <tcp_input+0x288>)
 800aac6:	f006 ffff 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	891a      	ldrh	r2, [r3, #8]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	891b      	ldrh	r3, [r3, #8]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d005      	beq.n	800aae4 <tcp_input+0x154>
 800aad8:	4b4d      	ldr	r3, [pc, #308]	@ (800ac10 <tcp_input+0x280>)
 800aada:	22e0      	movs	r2, #224	@ 0xe0
 800aadc:	4956      	ldr	r1, [pc, #344]	@ (800ac38 <tcp_input+0x2a8>)
 800aade:	484e      	ldr	r0, [pc, #312]	@ (800ac18 <tcp_input+0x288>)
 800aae0:	f006 fff2 	bl	8011ac8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aae4:	4b4d      	ldr	r3, [pc, #308]	@ (800ac1c <tcp_input+0x28c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4a4b      	ldr	r2, [pc, #300]	@ (800ac1c <tcp_input+0x28c>)
 800aaee:	6814      	ldr	r4, [r2, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fc fd53 	bl	800759c <lwip_htons>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aafa:	4b48      	ldr	r3, [pc, #288]	@ (800ac1c <tcp_input+0x28c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	885b      	ldrh	r3, [r3, #2]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	4a46      	ldr	r2, [pc, #280]	@ (800ac1c <tcp_input+0x28c>)
 800ab04:	6814      	ldr	r4, [r2, #0]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fc fd48 	bl	800759c <lwip_htons>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ab10:	4b42      	ldr	r3, [pc, #264]	@ (800ac1c <tcp_input+0x28c>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	4a41      	ldr	r2, [pc, #260]	@ (800ac1c <tcp_input+0x28c>)
 800ab18:	6814      	ldr	r4, [r2, #0]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fc fd53 	bl	80075c6 <lwip_htonl>
 800ab20:	4603      	mov	r3, r0
 800ab22:	6063      	str	r3, [r4, #4]
 800ab24:	6863      	ldr	r3, [r4, #4]
 800ab26:	4a45      	ldr	r2, [pc, #276]	@ (800ac3c <tcp_input+0x2ac>)
 800ab28:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ab2a:	4b3c      	ldr	r3, [pc, #240]	@ (800ac1c <tcp_input+0x28c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	4a3a      	ldr	r2, [pc, #232]	@ (800ac1c <tcp_input+0x28c>)
 800ab32:	6814      	ldr	r4, [r2, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fc fd46 	bl	80075c6 <lwip_htonl>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	60a3      	str	r3, [r4, #8]
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	4a3f      	ldr	r2, [pc, #252]	@ (800ac40 <tcp_input+0x2b0>)
 800ab42:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ab44:	4b35      	ldr	r3, [pc, #212]	@ (800ac1c <tcp_input+0x28c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	89db      	ldrh	r3, [r3, #14]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	4a33      	ldr	r2, [pc, #204]	@ (800ac1c <tcp_input+0x28c>)
 800ab4e:	6814      	ldr	r4, [r2, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fc fd23 	bl	800759c <lwip_htons>
 800ab56:	4603      	mov	r3, r0
 800ab58:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ab5a:	4b30      	ldr	r3, [pc, #192]	@ (800ac1c <tcp_input+0x28c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	899b      	ldrh	r3, [r3, #12]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fc fd1a 	bl	800759c <lwip_htons>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab70:	b2da      	uxtb	r2, r3
 800ab72:	4b34      	ldr	r3, [pc, #208]	@ (800ac44 <tcp_input+0x2b4>)
 800ab74:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	891a      	ldrh	r2, [r3, #8]
 800ab7a:	4b33      	ldr	r3, [pc, #204]	@ (800ac48 <tcp_input+0x2b8>)
 800ab7c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ab7e:	4b31      	ldr	r3, [pc, #196]	@ (800ac44 <tcp_input+0x2b4>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <tcp_input+0x214>
    tcplen++;
 800ab8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ac48 <tcp_input+0x2b8>)
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	4b2d      	ldr	r3, [pc, #180]	@ (800ac48 <tcp_input+0x2b8>)
 800ab94:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	891a      	ldrh	r2, [r3, #8]
 800ab9a:	4b2b      	ldr	r3, [pc, #172]	@ (800ac48 <tcp_input+0x2b8>)
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	f200 82e6 	bhi.w	800b170 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aba8:	4b28      	ldr	r3, [pc, #160]	@ (800ac4c <tcp_input+0x2bc>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	e09d      	b.n	800acec <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	7d1b      	ldrb	r3, [r3, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d105      	bne.n	800abc4 <tcp_input+0x234>
 800abb8:	4b15      	ldr	r3, [pc, #84]	@ (800ac10 <tcp_input+0x280>)
 800abba:	22fb      	movs	r2, #251	@ 0xfb
 800abbc:	4924      	ldr	r1, [pc, #144]	@ (800ac50 <tcp_input+0x2c0>)
 800abbe:	4816      	ldr	r0, [pc, #88]	@ (800ac18 <tcp_input+0x288>)
 800abc0:	f006 ff82 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	7d1b      	ldrb	r3, [r3, #20]
 800abc8:	2b0a      	cmp	r3, #10
 800abca:	d105      	bne.n	800abd8 <tcp_input+0x248>
 800abcc:	4b10      	ldr	r3, [pc, #64]	@ (800ac10 <tcp_input+0x280>)
 800abce:	22fc      	movs	r2, #252	@ 0xfc
 800abd0:	4920      	ldr	r1, [pc, #128]	@ (800ac54 <tcp_input+0x2c4>)
 800abd2:	4811      	ldr	r0, [pc, #68]	@ (800ac18 <tcp_input+0x288>)
 800abd4:	f006 ff78 	bl	8011ac8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	7d1b      	ldrb	r3, [r3, #20]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d105      	bne.n	800abec <tcp_input+0x25c>
 800abe0:	4b0b      	ldr	r3, [pc, #44]	@ (800ac10 <tcp_input+0x280>)
 800abe2:	22fd      	movs	r2, #253	@ 0xfd
 800abe4:	491c      	ldr	r1, [pc, #112]	@ (800ac58 <tcp_input+0x2c8>)
 800abe6:	480c      	ldr	r0, [pc, #48]	@ (800ac18 <tcp_input+0x288>)
 800abe8:	f006 ff6e 	bl	8011ac8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	7a1b      	ldrb	r3, [r3, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d033      	beq.n	800ac5c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	7a1a      	ldrb	r2, [r3, #8]
 800abf8:	4b09      	ldr	r3, [pc, #36]	@ (800ac20 <tcp_input+0x290>)
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ac00:	3301      	adds	r3, #1
 800ac02:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d029      	beq.n	800ac5c <tcp_input+0x2cc>
      prev = pcb;
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	61bb      	str	r3, [r7, #24]
      continue;
 800ac0c:	e06b      	b.n	800ace6 <tcp_input+0x356>
 800ac0e:	bf00      	nop
 800ac10:	08013c18 	.word	0x08013c18
 800ac14:	08013c4c 	.word	0x08013c4c
 800ac18:	08013c64 	.word	0x08013c64
 800ac1c:	20008908 	.word	0x20008908
 800ac20:	20005370 	.word	0x20005370
 800ac24:	2000890c 	.word	0x2000890c
 800ac28:	20008910 	.word	0x20008910
 800ac2c:	2000890e 	.word	0x2000890e
 800ac30:	08013c8c 	.word	0x08013c8c
 800ac34:	08013c9c 	.word	0x08013c9c
 800ac38:	08013ca8 	.word	0x08013ca8
 800ac3c:	20008918 	.word	0x20008918
 800ac40:	2000891c 	.word	0x2000891c
 800ac44:	20008924 	.word	0x20008924
 800ac48:	20008922 	.word	0x20008922
 800ac4c:	200088ec 	.word	0x200088ec
 800ac50:	08013cc8 	.word	0x08013cc8
 800ac54:	08013cf0 	.word	0x08013cf0
 800ac58:	08013d1c 	.word	0x08013d1c
    }

    if (pcb->remote_port == tcphdr->src &&
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	8b1a      	ldrh	r2, [r3, #24]
 800ac60:	4b72      	ldr	r3, [pc, #456]	@ (800ae2c <tcp_input+0x49c>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d13a      	bne.n	800ace2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	8ada      	ldrh	r2, [r3, #22]
 800ac70:	4b6e      	ldr	r3, [pc, #440]	@ (800ae2c <tcp_input+0x49c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	885b      	ldrh	r3, [r3, #2]
 800ac76:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d132      	bne.n	800ace2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	4b6b      	ldr	r3, [pc, #428]	@ (800ae30 <tcp_input+0x4a0>)
 800ac82:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d12c      	bne.n	800ace2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	4b68      	ldr	r3, [pc, #416]	@ (800ae30 <tcp_input+0x4a0>)
 800ac8e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d126      	bne.n	800ace2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d106      	bne.n	800acac <tcp_input+0x31c>
 800ac9e:	4b65      	ldr	r3, [pc, #404]	@ (800ae34 <tcp_input+0x4a4>)
 800aca0:	f240 120d 	movw	r2, #269	@ 0x10d
 800aca4:	4964      	ldr	r1, [pc, #400]	@ (800ae38 <tcp_input+0x4a8>)
 800aca6:	4865      	ldr	r0, [pc, #404]	@ (800ae3c <tcp_input+0x4ac>)
 800aca8:	f006 ff0e 	bl	8011ac8 <iprintf>
      if (prev != NULL) {
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00a      	beq.n	800acc8 <tcp_input+0x338>
        prev->next = pcb->next;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800acba:	4b61      	ldr	r3, [pc, #388]	@ (800ae40 <tcp_input+0x4b0>)
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800acc2:	4a5f      	ldr	r2, [pc, #380]	@ (800ae40 <tcp_input+0x4b0>)
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d111      	bne.n	800acf6 <tcp_input+0x366>
 800acd2:	4b58      	ldr	r3, [pc, #352]	@ (800ae34 <tcp_input+0x4a4>)
 800acd4:	f240 1215 	movw	r2, #277	@ 0x115
 800acd8:	495a      	ldr	r1, [pc, #360]	@ (800ae44 <tcp_input+0x4b4>)
 800acda:	4858      	ldr	r0, [pc, #352]	@ (800ae3c <tcp_input+0x4ac>)
 800acdc:	f006 fef4 	bl	8011ac8 <iprintf>
      break;
 800ace0:	e009      	b.n	800acf6 <tcp_input+0x366>
    }
    prev = pcb;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	61fb      	str	r3, [r7, #28]
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f47f af5e 	bne.w	800abb0 <tcp_input+0x220>
 800acf4:	e000      	b.n	800acf8 <tcp_input+0x368>
      break;
 800acf6:	bf00      	nop
  }

  if (pcb == NULL) {
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f040 80aa 	bne.w	800ae54 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad00:	4b51      	ldr	r3, [pc, #324]	@ (800ae48 <tcp_input+0x4b8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	61fb      	str	r3, [r7, #28]
 800ad06:	e03f      	b.n	800ad88 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	7d1b      	ldrb	r3, [r3, #20]
 800ad0c:	2b0a      	cmp	r3, #10
 800ad0e:	d006      	beq.n	800ad1e <tcp_input+0x38e>
 800ad10:	4b48      	ldr	r3, [pc, #288]	@ (800ae34 <tcp_input+0x4a4>)
 800ad12:	f240 121f 	movw	r2, #287	@ 0x11f
 800ad16:	494d      	ldr	r1, [pc, #308]	@ (800ae4c <tcp_input+0x4bc>)
 800ad18:	4848      	ldr	r0, [pc, #288]	@ (800ae3c <tcp_input+0x4ac>)
 800ad1a:	f006 fed5 	bl	8011ac8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	7a1b      	ldrb	r3, [r3, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d009      	beq.n	800ad3a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	7a1a      	ldrb	r2, [r3, #8]
 800ad2a:	4b41      	ldr	r3, [pc, #260]	@ (800ae30 <tcp_input+0x4a0>)
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ad32:	3301      	adds	r3, #1
 800ad34:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d122      	bne.n	800ad80 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	8b1a      	ldrh	r2, [r3, #24]
 800ad3e:	4b3b      	ldr	r3, [pc, #236]	@ (800ae2c <tcp_input+0x49c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d11b      	bne.n	800ad82 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	8ada      	ldrh	r2, [r3, #22]
 800ad4e:	4b37      	ldr	r3, [pc, #220]	@ (800ae2c <tcp_input+0x49c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	885b      	ldrh	r3, [r3, #2]
 800ad54:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d113      	bne.n	800ad82 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	4b34      	ldr	r3, [pc, #208]	@ (800ae30 <tcp_input+0x4a0>)
 800ad60:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d10d      	bne.n	800ad82 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	4b31      	ldr	r3, [pc, #196]	@ (800ae30 <tcp_input+0x4a0>)
 800ad6c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d107      	bne.n	800ad82 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ad72:	69f8      	ldr	r0, [r7, #28]
 800ad74:	f000 fb56 	bl	800b424 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7fd ff4d 	bl	8008c18 <pbuf_free>
        return;
 800ad7e:	e1fd      	b.n	800b17c <tcp_input+0x7ec>
        continue;
 800ad80:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	68db      	ldr	r3, [r3, #12]
 800ad86:	61fb      	str	r3, [r7, #28]
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1bc      	bne.n	800ad08 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad92:	4b2f      	ldr	r3, [pc, #188]	@ (800ae50 <tcp_input+0x4c0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	e02a      	b.n	800adf0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	7a1b      	ldrb	r3, [r3, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00c      	beq.n	800adbc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	7a1a      	ldrb	r2, [r3, #8]
 800ada6:	4b22      	ldr	r3, [pc, #136]	@ (800ae30 <tcp_input+0x4a0>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800adae:	3301      	adds	r3, #1
 800adb0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d002      	beq.n	800adbc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	61bb      	str	r3, [r7, #24]
        continue;
 800adba:	e016      	b.n	800adea <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	8ada      	ldrh	r2, [r3, #22]
 800adc0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae2c <tcp_input+0x49c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	885b      	ldrh	r3, [r3, #2]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	429a      	cmp	r2, r3
 800adca:	d10c      	bne.n	800ade6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	4b17      	ldr	r3, [pc, #92]	@ (800ae30 <tcp_input+0x4a0>)
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	429a      	cmp	r2, r3
 800add6:	d00f      	beq.n	800adf8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00d      	beq.n	800adfa <tcp_input+0x46a>
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d009      	beq.n	800adfa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	617b      	str	r3, [r7, #20]
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1d1      	bne.n	800ad9a <tcp_input+0x40a>
 800adf6:	e000      	b.n	800adfa <tcp_input+0x46a>
            break;
 800adf8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d029      	beq.n	800ae54 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	68da      	ldr	r2, [r3, #12]
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ae0e:	4b10      	ldr	r3, [pc, #64]	@ (800ae50 <tcp_input+0x4c0>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ae16:	4a0e      	ldr	r2, [pc, #56]	@ (800ae50 <tcp_input+0x4c0>)
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ae1c:	6978      	ldr	r0, [r7, #20]
 800ae1e:	f000 fa03 	bl	800b228 <tcp_listen_input>
      }
      pbuf_free(p);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7fd fef8 	bl	8008c18 <pbuf_free>
      return;
 800ae28:	e1a8      	b.n	800b17c <tcp_input+0x7ec>
 800ae2a:	bf00      	nop
 800ae2c:	20008908 	.word	0x20008908
 800ae30:	20005370 	.word	0x20005370
 800ae34:	08013c18 	.word	0x08013c18
 800ae38:	08013d44 	.word	0x08013d44
 800ae3c:	08013c64 	.word	0x08013c64
 800ae40:	200088ec 	.word	0x200088ec
 800ae44:	08013d70 	.word	0x08013d70
 800ae48:	200088f0 	.word	0x200088f0
 800ae4c:	08013d9c 	.word	0x08013d9c
 800ae50:	200088e8 	.word	0x200088e8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 8158 	beq.w	800b10c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ae5c:	4b95      	ldr	r3, [pc, #596]	@ (800b0b4 <tcp_input+0x724>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	891a      	ldrh	r2, [r3, #8]
 800ae66:	4b93      	ldr	r3, [pc, #588]	@ (800b0b4 <tcp_input+0x724>)
 800ae68:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ae6a:	4a92      	ldr	r2, [pc, #584]	@ (800b0b4 <tcp_input+0x724>)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ae70:	4b91      	ldr	r3, [pc, #580]	@ (800b0b8 <tcp_input+0x728>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a8f      	ldr	r2, [pc, #572]	@ (800b0b4 <tcp_input+0x724>)
 800ae76:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ae78:	4b90      	ldr	r3, [pc, #576]	@ (800b0bc <tcp_input+0x72c>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ae7e:	4b90      	ldr	r3, [pc, #576]	@ (800b0c0 <tcp_input+0x730>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ae84:	4b8f      	ldr	r3, [pc, #572]	@ (800b0c4 <tcp_input+0x734>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ae8a:	4b8f      	ldr	r3, [pc, #572]	@ (800b0c8 <tcp_input+0x738>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0308 	and.w	r3, r3, #8
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d006      	beq.n	800aea4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7b5b      	ldrb	r3, [r3, #13]
 800ae9a:	f043 0301 	orr.w	r3, r3, #1
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d017      	beq.n	800aedc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aeac:	69f8      	ldr	r0, [r7, #28]
 800aeae:	f7ff f929 	bl	800a104 <tcp_process_refused_data>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f113 0f0d 	cmn.w	r3, #13
 800aeb8:	d007      	beq.n	800aeca <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00c      	beq.n	800aedc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800aec2:	4b82      	ldr	r3, [pc, #520]	@ (800b0cc <tcp_input+0x73c>)
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d008      	beq.n	800aedc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aece:	2b00      	cmp	r3, #0
 800aed0:	f040 80e3 	bne.w	800b09a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800aed4:	69f8      	ldr	r0, [r7, #28]
 800aed6:	f003 fdff 	bl	800ead8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800aeda:	e0de      	b.n	800b09a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800aedc:	4a7c      	ldr	r2, [pc, #496]	@ (800b0d0 <tcp_input+0x740>)
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aee2:	69f8      	ldr	r0, [r7, #28]
 800aee4:	f000 fb18 	bl	800b518 <tcp_process>
 800aee8:	4603      	mov	r3, r0
 800aeea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aeec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aef0:	f113 0f0d 	cmn.w	r3, #13
 800aef4:	f000 80d3 	beq.w	800b09e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800aef8:	4b71      	ldr	r3, [pc, #452]	@ (800b0c0 <tcp_input+0x730>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d015      	beq.n	800af30 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <tcp_input+0x590>
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af14:	69fa      	ldr	r2, [r7, #28]
 800af16:	6912      	ldr	r2, [r2, #16]
 800af18:	f06f 010d 	mvn.w	r1, #13
 800af1c:	4610      	mov	r0, r2
 800af1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	486c      	ldr	r0, [pc, #432]	@ (800b0d4 <tcp_input+0x744>)
 800af24:	f7ff fbbc 	bl	800a6a0 <tcp_pcb_remove>
        tcp_free(pcb);
 800af28:	69f8      	ldr	r0, [r7, #28]
 800af2a:	f7fe f9a7 	bl	800927c <tcp_free>
 800af2e:	e0da      	b.n	800b0e6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800af34:	4b63      	ldr	r3, [pc, #396]	@ (800b0c4 <tcp_input+0x734>)
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d01d      	beq.n	800af78 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800af3c:	4b61      	ldr	r3, [pc, #388]	@ (800b0c4 <tcp_input+0x734>)
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <tcp_input+0x5d2>
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	6910      	ldr	r0, [r2, #16]
 800af56:	89fa      	ldrh	r2, [r7, #14]
 800af58:	69f9      	ldr	r1, [r7, #28]
 800af5a:	4798      	blx	r3
 800af5c:	4603      	mov	r3, r0
 800af5e:	74fb      	strb	r3, [r7, #19]
 800af60:	e001      	b.n	800af66 <tcp_input+0x5d6>
 800af62:	2300      	movs	r3, #0
 800af64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800af66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af6a:	f113 0f0d 	cmn.w	r3, #13
 800af6e:	f000 8098 	beq.w	800b0a2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800af72:	4b54      	ldr	r3, [pc, #336]	@ (800b0c4 <tcp_input+0x734>)
 800af74:	2200      	movs	r2, #0
 800af76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800af78:	69f8      	ldr	r0, [r7, #28]
 800af7a:	f000 f915 	bl	800b1a8 <tcp_input_delayed_close>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	f040 8090 	bne.w	800b0a6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800af86:	4b4d      	ldr	r3, [pc, #308]	@ (800b0bc <tcp_input+0x72c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d041      	beq.n	800b012 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800af8e:	69fb      	ldr	r3, [r7, #28]
 800af90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af92:	2b00      	cmp	r3, #0
 800af94:	d006      	beq.n	800afa4 <tcp_input+0x614>
 800af96:	4b50      	ldr	r3, [pc, #320]	@ (800b0d8 <tcp_input+0x748>)
 800af98:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800af9c:	494f      	ldr	r1, [pc, #316]	@ (800b0dc <tcp_input+0x74c>)
 800af9e:	4850      	ldr	r0, [pc, #320]	@ (800b0e0 <tcp_input+0x750>)
 800afa0:	f006 fd92 	bl	8011ac8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	8b5b      	ldrh	r3, [r3, #26]
 800afa8:	f003 0310 	and.w	r3, r3, #16
 800afac:	2b00      	cmp	r3, #0
 800afae:	d008      	beq.n	800afc2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800afb0:	4b42      	ldr	r3, [pc, #264]	@ (800b0bc <tcp_input+0x72c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fd fe2f 	bl	8008c18 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800afba:	69f8      	ldr	r0, [r7, #28]
 800afbc:	f7fe fc46 	bl	800984c <tcp_abort>
            goto aborted;
 800afc0:	e091      	b.n	800b0e6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00c      	beq.n	800afe6 <tcp_input+0x656>
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	6918      	ldr	r0, [r3, #16]
 800afd6:	4b39      	ldr	r3, [pc, #228]	@ (800b0bc <tcp_input+0x72c>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	2300      	movs	r3, #0
 800afdc:	69f9      	ldr	r1, [r7, #28]
 800afde:	47a0      	blx	r4
 800afe0:	4603      	mov	r3, r0
 800afe2:	74fb      	strb	r3, [r7, #19]
 800afe4:	e008      	b.n	800aff8 <tcp_input+0x668>
 800afe6:	4b35      	ldr	r3, [pc, #212]	@ (800b0bc <tcp_input+0x72c>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	2300      	movs	r3, #0
 800afec:	69f9      	ldr	r1, [r7, #28]
 800afee:	2000      	movs	r0, #0
 800aff0:	f7ff f95e 	bl	800a2b0 <tcp_recv_null>
 800aff4:	4603      	mov	r3, r0
 800aff6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800aff8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800affc:	f113 0f0d 	cmn.w	r3, #13
 800b000:	d053      	beq.n	800b0aa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b002:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b00a:	4b2c      	ldr	r3, [pc, #176]	@ (800b0bc <tcp_input+0x72c>)
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b012:	4b2b      	ldr	r3, [pc, #172]	@ (800b0c0 <tcp_input+0x730>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d030      	beq.n	800b080 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b02a:	7b5a      	ldrb	r2, [r3, #13]
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b030:	f042 0220 	orr.w	r2, r2, #32
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	735a      	strb	r2, [r3, #13]
 800b038:	e022      	b.n	800b080 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b03e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b042:	d005      	beq.n	800b050 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b048:	3301      	adds	r3, #1
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <tcp_input+0x6e2>
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	6918      	ldr	r0, [r3, #16]
 800b064:	2300      	movs	r3, #0
 800b066:	2200      	movs	r2, #0
 800b068:	69f9      	ldr	r1, [r7, #28]
 800b06a:	47a0      	blx	r4
 800b06c:	4603      	mov	r3, r0
 800b06e:	74fb      	strb	r3, [r7, #19]
 800b070:	e001      	b.n	800b076 <tcp_input+0x6e6>
 800b072:	2300      	movs	r3, #0
 800b074:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b076:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b07a:	f113 0f0d 	cmn.w	r3, #13
 800b07e:	d016      	beq.n	800b0ae <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b080:	4b13      	ldr	r3, [pc, #76]	@ (800b0d0 <tcp_input+0x740>)
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b086:	69f8      	ldr	r0, [r7, #28]
 800b088:	f000 f88e 	bl	800b1a8 <tcp_input_delayed_close>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d128      	bne.n	800b0e4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b092:	69f8      	ldr	r0, [r7, #28]
 800b094:	f002 ff1a 	bl	800decc <tcp_output>
 800b098:	e025      	b.n	800b0e6 <tcp_input+0x756>
        goto aborted;
 800b09a:	bf00      	nop
 800b09c:	e023      	b.n	800b0e6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b09e:	bf00      	nop
 800b0a0:	e021      	b.n	800b0e6 <tcp_input+0x756>
              goto aborted;
 800b0a2:	bf00      	nop
 800b0a4:	e01f      	b.n	800b0e6 <tcp_input+0x756>
          goto aborted;
 800b0a6:	bf00      	nop
 800b0a8:	e01d      	b.n	800b0e6 <tcp_input+0x756>
            goto aborted;
 800b0aa:	bf00      	nop
 800b0ac:	e01b      	b.n	800b0e6 <tcp_input+0x756>
              goto aborted;
 800b0ae:	bf00      	nop
 800b0b0:	e019      	b.n	800b0e6 <tcp_input+0x756>
 800b0b2:	bf00      	nop
 800b0b4:	200088f8 	.word	0x200088f8
 800b0b8:	20008908 	.word	0x20008908
 800b0bc:	20008928 	.word	0x20008928
 800b0c0:	20008925 	.word	0x20008925
 800b0c4:	20008920 	.word	0x20008920
 800b0c8:	20008924 	.word	0x20008924
 800b0cc:	20008922 	.word	0x20008922
 800b0d0:	2000892c 	.word	0x2000892c
 800b0d4:	200088ec 	.word	0x200088ec
 800b0d8:	08013c18 	.word	0x08013c18
 800b0dc:	08013dcc 	.word	0x08013dcc
 800b0e0:	08013c64 	.word	0x08013c64
          goto aborted;
 800b0e4:	bf00      	nop
    tcp_input_pcb = NULL;
 800b0e6:	4b27      	ldr	r3, [pc, #156]	@ (800b184 <tcp_input+0x7f4>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b0ec:	4b26      	ldr	r3, [pc, #152]	@ (800b188 <tcp_input+0x7f8>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b0f2:	4b26      	ldr	r3, [pc, #152]	@ (800b18c <tcp_input+0x7fc>)
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d03f      	beq.n	800b17a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b0fa:	4b24      	ldr	r3, [pc, #144]	@ (800b18c <tcp_input+0x7fc>)
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fd fd8a 	bl	8008c18 <pbuf_free>
      inseg.p = NULL;
 800b104:	4b21      	ldr	r3, [pc, #132]	@ (800b18c <tcp_input+0x7fc>)
 800b106:	2200      	movs	r2, #0
 800b108:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b10a:	e036      	b.n	800b17a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b10c:	4b20      	ldr	r3, [pc, #128]	@ (800b190 <tcp_input+0x800>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	899b      	ldrh	r3, [r3, #12]
 800b112:	b29b      	uxth	r3, r3
 800b114:	4618      	mov	r0, r3
 800b116:	f7fc fa41 	bl	800759c <lwip_htons>
 800b11a:	4603      	mov	r3, r0
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	f003 0304 	and.w	r3, r3, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	d118      	bne.n	800b158 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b126:	4b1b      	ldr	r3, [pc, #108]	@ (800b194 <tcp_input+0x804>)
 800b128:	6819      	ldr	r1, [r3, #0]
 800b12a:	4b1b      	ldr	r3, [pc, #108]	@ (800b198 <tcp_input+0x808>)
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	4b1a      	ldr	r3, [pc, #104]	@ (800b19c <tcp_input+0x80c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b136:	4b16      	ldr	r3, [pc, #88]	@ (800b190 <tcp_input+0x800>)
 800b138:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b13a:	885b      	ldrh	r3, [r3, #2]
 800b13c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b13e:	4a14      	ldr	r2, [pc, #80]	@ (800b190 <tcp_input+0x800>)
 800b140:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b142:	8812      	ldrh	r2, [r2, #0]
 800b144:	b292      	uxth	r2, r2
 800b146:	9202      	str	r2, [sp, #8]
 800b148:	9301      	str	r3, [sp, #4]
 800b14a:	4b15      	ldr	r3, [pc, #84]	@ (800b1a0 <tcp_input+0x810>)
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	4b15      	ldr	r3, [pc, #84]	@ (800b1a4 <tcp_input+0x814>)
 800b150:	4602      	mov	r2, r0
 800b152:	2000      	movs	r0, #0
 800b154:	f003 fc6e 	bl	800ea34 <tcp_rst>
    pbuf_free(p);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7fd fd5d 	bl	8008c18 <pbuf_free>
  return;
 800b15e:	e00c      	b.n	800b17a <tcp_input+0x7ea>
    goto dropped;
 800b160:	bf00      	nop
 800b162:	e006      	b.n	800b172 <tcp_input+0x7e2>
    goto dropped;
 800b164:	bf00      	nop
 800b166:	e004      	b.n	800b172 <tcp_input+0x7e2>
    goto dropped;
 800b168:	bf00      	nop
 800b16a:	e002      	b.n	800b172 <tcp_input+0x7e2>
      goto dropped;
 800b16c:	bf00      	nop
 800b16e:	e000      	b.n	800b172 <tcp_input+0x7e2>
      goto dropped;
 800b170:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7fd fd50 	bl	8008c18 <pbuf_free>
 800b178:	e000      	b.n	800b17c <tcp_input+0x7ec>
  return;
 800b17a:	bf00      	nop
}
 800b17c:	3724      	adds	r7, #36	@ 0x24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd90      	pop	{r4, r7, pc}
 800b182:	bf00      	nop
 800b184:	2000892c 	.word	0x2000892c
 800b188:	20008928 	.word	0x20008928
 800b18c:	200088f8 	.word	0x200088f8
 800b190:	20008908 	.word	0x20008908
 800b194:	2000891c 	.word	0x2000891c
 800b198:	20008922 	.word	0x20008922
 800b19c:	20008918 	.word	0x20008918
 800b1a0:	20005380 	.word	0x20005380
 800b1a4:	20005384 	.word	0x20005384

0800b1a8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <tcp_input_delayed_close+0x1c>
 800b1b6:	4b17      	ldr	r3, [pc, #92]	@ (800b214 <tcp_input_delayed_close+0x6c>)
 800b1b8:	f240 225a 	movw	r2, #602	@ 0x25a
 800b1bc:	4916      	ldr	r1, [pc, #88]	@ (800b218 <tcp_input_delayed_close+0x70>)
 800b1be:	4817      	ldr	r0, [pc, #92]	@ (800b21c <tcp_input_delayed_close+0x74>)
 800b1c0:	f006 fc82 	bl	8011ac8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b1c4:	4b16      	ldr	r3, [pc, #88]	@ (800b220 <tcp_input_delayed_close+0x78>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d01c      	beq.n	800b20a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	8b5b      	ldrh	r3, [r3, #26]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10d      	bne.n	800b1f8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d008      	beq.n	800b1f8 <tcp_input_delayed_close+0x50>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	6912      	ldr	r2, [r2, #16]
 800b1f0:	f06f 010e 	mvn.w	r1, #14
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	480a      	ldr	r0, [pc, #40]	@ (800b224 <tcp_input_delayed_close+0x7c>)
 800b1fc:	f7ff fa50 	bl	800a6a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7fe f83b 	bl	800927c <tcp_free>
    return 1;
 800b206:	2301      	movs	r3, #1
 800b208:	e000      	b.n	800b20c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	08013c18 	.word	0x08013c18
 800b218:	08013de8 	.word	0x08013de8
 800b21c:	08013c64 	.word	0x08013c64
 800b220:	20008925 	.word	0x20008925
 800b224:	200088ec 	.word	0x200088ec

0800b228 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b08b      	sub	sp, #44	@ 0x2c
 800b22c:	af04      	add	r7, sp, #16
 800b22e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b230:	4b6f      	ldr	r3, [pc, #444]	@ (800b3f0 <tcp_listen_input+0x1c8>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f040 80d2 	bne.w	800b3e2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <tcp_listen_input+0x2a>
 800b244:	4b6b      	ldr	r3, [pc, #428]	@ (800b3f4 <tcp_listen_input+0x1cc>)
 800b246:	f240 2281 	movw	r2, #641	@ 0x281
 800b24a:	496b      	ldr	r1, [pc, #428]	@ (800b3f8 <tcp_listen_input+0x1d0>)
 800b24c:	486b      	ldr	r0, [pc, #428]	@ (800b3fc <tcp_listen_input+0x1d4>)
 800b24e:	f006 fc3b 	bl	8011ac8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b252:	4b67      	ldr	r3, [pc, #412]	@ (800b3f0 <tcp_listen_input+0x1c8>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	f003 0310 	and.w	r3, r3, #16
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d019      	beq.n	800b292 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b25e:	4b68      	ldr	r3, [pc, #416]	@ (800b400 <tcp_listen_input+0x1d8>)
 800b260:	6819      	ldr	r1, [r3, #0]
 800b262:	4b68      	ldr	r3, [pc, #416]	@ (800b404 <tcp_listen_input+0x1dc>)
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	4b67      	ldr	r3, [pc, #412]	@ (800b408 <tcp_listen_input+0x1e0>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b26e:	4b67      	ldr	r3, [pc, #412]	@ (800b40c <tcp_listen_input+0x1e4>)
 800b270:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b272:	885b      	ldrh	r3, [r3, #2]
 800b274:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b276:	4a65      	ldr	r2, [pc, #404]	@ (800b40c <tcp_listen_input+0x1e4>)
 800b278:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b27a:	8812      	ldrh	r2, [r2, #0]
 800b27c:	b292      	uxth	r2, r2
 800b27e:	9202      	str	r2, [sp, #8]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	4b63      	ldr	r3, [pc, #396]	@ (800b410 <tcp_listen_input+0x1e8>)
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	4b63      	ldr	r3, [pc, #396]	@ (800b414 <tcp_listen_input+0x1ec>)
 800b288:	4602      	mov	r2, r0
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f003 fbd2 	bl	800ea34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b290:	e0a9      	b.n	800b3e6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b292:	4b57      	ldr	r3, [pc, #348]	@ (800b3f0 <tcp_listen_input+0x1c8>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	f003 0302 	and.w	r3, r3, #2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 80a3 	beq.w	800b3e6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7d5b      	ldrb	r3, [r3, #21]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff f927 	bl	800a4f8 <tcp_alloc>
 800b2aa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d111      	bne.n	800b2d6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <tcp_listen_input+0xa8>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	6910      	ldr	r0, [r2, #16]
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	4798      	blx	r3
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73bb      	strb	r3, [r7, #14]
      return;
 800b2ce:	e08b      	b.n	800b3e8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b2d0:	23f0      	movs	r3, #240	@ 0xf0
 800b2d2:	73bb      	strb	r3, [r7, #14]
      return;
 800b2d4:	e088      	b.n	800b3e8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b2d6:	4b50      	ldr	r3, [pc, #320]	@ (800b418 <tcp_listen_input+0x1f0>)
 800b2d8:	695a      	ldr	r2, [r3, #20]
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b2de:	4b4e      	ldr	r3, [pc, #312]	@ (800b418 <tcp_listen_input+0x1f0>)
 800b2e0:	691a      	ldr	r2, [r3, #16]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	8ada      	ldrh	r2, [r3, #22]
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b2ee:	4b47      	ldr	r3, [pc, #284]	@ (800b40c <tcp_listen_input+0x1e4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	881b      	ldrh	r3, [r3, #0]
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2203      	movs	r2, #3
 800b2fe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b300:	4b41      	ldr	r3, [pc, #260]	@ (800b408 <tcp_listen_input+0x1e0>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b312:	6978      	ldr	r0, [r7, #20]
 800b314:	f7ff fa58 	bl	800a7c8 <tcp_next_iss>
 800b318:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	693a      	ldr	r2, [r7, #16]
 800b330:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b332:	4b35      	ldr	r3, [pc, #212]	@ (800b408 <tcp_listen_input+0x1e0>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	1e5a      	subs	r2, r3, #1
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	691a      	ldr	r2, [r3, #16]
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	7a5b      	ldrb	r3, [r3, #9]
 800b34e:	f003 030c 	and.w	r3, r3, #12
 800b352:	b2da      	uxtb	r2, r3
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7a1a      	ldrb	r2, [r3, #8]
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b360:	4b2e      	ldr	r3, [pc, #184]	@ (800b41c <tcp_listen_input+0x1f4>)
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	60da      	str	r2, [r3, #12]
 800b368:	4a2c      	ldr	r2, [pc, #176]	@ (800b41c <tcp_listen_input+0x1f4>)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	6013      	str	r3, [r2, #0]
 800b36e:	f003 fd23 	bl	800edb8 <tcp_timer_needed>
 800b372:	4b2b      	ldr	r3, [pc, #172]	@ (800b420 <tcp_listen_input+0x1f8>)
 800b374:	2201      	movs	r2, #1
 800b376:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b378:	6978      	ldr	r0, [r7, #20]
 800b37a:	f001 fd8b 	bl	800ce94 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b37e:	4b23      	ldr	r3, [pc, #140]	@ (800b40c <tcp_listen_input+0x1e4>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	89db      	ldrh	r3, [r3, #14]
 800b384:	b29a      	uxth	r2, r3
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f005 f8a5 	bl	80104f0 <ip4_route>
 800b3a6:	4601      	mov	r1, r0
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff fa30 	bl	800a814 <tcp_eff_send_mss_netif>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b3bc:	2112      	movs	r1, #18
 800b3be:	6978      	ldr	r0, [r7, #20]
 800b3c0:	f002 fc96 	bl	800dcf0 <tcp_enqueue_flags>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	6978      	ldr	r0, [r7, #20]
 800b3d4:	f7fe f97c 	bl	80096d0 <tcp_abandon>
      return;
 800b3d8:	e006      	b.n	800b3e8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b3da:	6978      	ldr	r0, [r7, #20]
 800b3dc:	f002 fd76 	bl	800decc <tcp_output>
  return;
 800b3e0:	e001      	b.n	800b3e6 <tcp_listen_input+0x1be>
    return;
 800b3e2:	bf00      	nop
 800b3e4:	e000      	b.n	800b3e8 <tcp_listen_input+0x1c0>
  return;
 800b3e6:	bf00      	nop
}
 800b3e8:	371c      	adds	r7, #28
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd90      	pop	{r4, r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20008924 	.word	0x20008924
 800b3f4:	08013c18 	.word	0x08013c18
 800b3f8:	08013e10 	.word	0x08013e10
 800b3fc:	08013c64 	.word	0x08013c64
 800b400:	2000891c 	.word	0x2000891c
 800b404:	20008922 	.word	0x20008922
 800b408:	20008918 	.word	0x20008918
 800b40c:	20008908 	.word	0x20008908
 800b410:	20005380 	.word	0x20005380
 800b414:	20005384 	.word	0x20005384
 800b418:	20005370 	.word	0x20005370
 800b41c:	200088ec 	.word	0x200088ec
 800b420:	200088f4 	.word	0x200088f4

0800b424 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af04      	add	r7, sp, #16
 800b42a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b42c:	4b2f      	ldr	r3, [pc, #188]	@ (800b4ec <tcp_timewait_input+0xc8>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	f003 0304 	and.w	r3, r3, #4
 800b434:	2b00      	cmp	r3, #0
 800b436:	d153      	bne.n	800b4e0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <tcp_timewait_input+0x28>
 800b43e:	4b2c      	ldr	r3, [pc, #176]	@ (800b4f0 <tcp_timewait_input+0xcc>)
 800b440:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b444:	492b      	ldr	r1, [pc, #172]	@ (800b4f4 <tcp_timewait_input+0xd0>)
 800b446:	482c      	ldr	r0, [pc, #176]	@ (800b4f8 <tcp_timewait_input+0xd4>)
 800b448:	f006 fb3e 	bl	8011ac8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b44c:	4b27      	ldr	r3, [pc, #156]	@ (800b4ec <tcp_timewait_input+0xc8>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	f003 0302 	and.w	r3, r3, #2
 800b454:	2b00      	cmp	r3, #0
 800b456:	d02a      	beq.n	800b4ae <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b458:	4b28      	ldr	r3, [pc, #160]	@ (800b4fc <tcp_timewait_input+0xd8>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	db2d      	blt.n	800b4c2 <tcp_timewait_input+0x9e>
 800b466:	4b25      	ldr	r3, [pc, #148]	@ (800b4fc <tcp_timewait_input+0xd8>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46e:	6879      	ldr	r1, [r7, #4]
 800b470:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b472:	440b      	add	r3, r1
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	dc23      	bgt.n	800b4c2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b47a:	4b21      	ldr	r3, [pc, #132]	@ (800b500 <tcp_timewait_input+0xdc>)
 800b47c:	6819      	ldr	r1, [r3, #0]
 800b47e:	4b21      	ldr	r3, [pc, #132]	@ (800b504 <tcp_timewait_input+0xe0>)
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	4b1d      	ldr	r3, [pc, #116]	@ (800b4fc <tcp_timewait_input+0xd8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b48a:	4b1f      	ldr	r3, [pc, #124]	@ (800b508 <tcp_timewait_input+0xe4>)
 800b48c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b48e:	885b      	ldrh	r3, [r3, #2]
 800b490:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b492:	4a1d      	ldr	r2, [pc, #116]	@ (800b508 <tcp_timewait_input+0xe4>)
 800b494:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b496:	8812      	ldrh	r2, [r2, #0]
 800b498:	b292      	uxth	r2, r2
 800b49a:	9202      	str	r2, [sp, #8]
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	4b1b      	ldr	r3, [pc, #108]	@ (800b50c <tcp_timewait_input+0xe8>)
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b510 <tcp_timewait_input+0xec>)
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f003 fac4 	bl	800ea34 <tcp_rst>
      return;
 800b4ac:	e01b      	b.n	800b4e6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ec <tcp_timewait_input+0xc8>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b4ba:	4b16      	ldr	r3, [pc, #88]	@ (800b514 <tcp_timewait_input+0xf0>)
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b4c2:	4b10      	ldr	r3, [pc, #64]	@ (800b504 <tcp_timewait_input+0xe0>)
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00c      	beq.n	800b4e4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	8b5b      	ldrh	r3, [r3, #26]
 800b4ce:	f043 0302 	orr.w	r3, r3, #2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f002 fcf7 	bl	800decc <tcp_output>
  }
  return;
 800b4de:	e001      	b.n	800b4e4 <tcp_timewait_input+0xc0>
    return;
 800b4e0:	bf00      	nop
 800b4e2:	e000      	b.n	800b4e6 <tcp_timewait_input+0xc2>
  return;
 800b4e4:	bf00      	nop
}
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20008924 	.word	0x20008924
 800b4f0:	08013c18 	.word	0x08013c18
 800b4f4:	08013e30 	.word	0x08013e30
 800b4f8:	08013c64 	.word	0x08013c64
 800b4fc:	20008918 	.word	0x20008918
 800b500:	2000891c 	.word	0x2000891c
 800b504:	20008922 	.word	0x20008922
 800b508:	20008908 	.word	0x20008908
 800b50c:	20005380 	.word	0x20005380
 800b510:	20005384 	.word	0x20005384
 800b514:	200088e0 	.word	0x200088e0

0800b518 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b518:	b590      	push	{r4, r7, lr}
 800b51a:	b08d      	sub	sp, #52	@ 0x34
 800b51c:	af04      	add	r7, sp, #16
 800b51e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b520:	2300      	movs	r3, #0
 800b522:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <tcp_process+0x24>
 800b52e:	4b9d      	ldr	r3, [pc, #628]	@ (800b7a4 <tcp_process+0x28c>)
 800b530:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b534:	499c      	ldr	r1, [pc, #624]	@ (800b7a8 <tcp_process+0x290>)
 800b536:	489d      	ldr	r0, [pc, #628]	@ (800b7ac <tcp_process+0x294>)
 800b538:	f006 fac6 	bl	8011ac8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b53c:	4b9c      	ldr	r3, [pc, #624]	@ (800b7b0 <tcp_process+0x298>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d04e      	beq.n	800b5e6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	7d1b      	ldrb	r3, [r3, #20]
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d108      	bne.n	800b562 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b554:	4b97      	ldr	r3, [pc, #604]	@ (800b7b4 <tcp_process+0x29c>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d123      	bne.n	800b5a4 <tcp_process+0x8c>
        acceptable = 1;
 800b55c:	2301      	movs	r3, #1
 800b55e:	76fb      	strb	r3, [r7, #27]
 800b560:	e020      	b.n	800b5a4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b566:	4b94      	ldr	r3, [pc, #592]	@ (800b7b8 <tcp_process+0x2a0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d102      	bne.n	800b574 <tcp_process+0x5c>
        acceptable = 1;
 800b56e:	2301      	movs	r3, #1
 800b570:	76fb      	strb	r3, [r7, #27]
 800b572:	e017      	b.n	800b5a4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b574:	4b90      	ldr	r3, [pc, #576]	@ (800b7b8 <tcp_process+0x2a0>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	2b00      	cmp	r3, #0
 800b580:	db10      	blt.n	800b5a4 <tcp_process+0x8c>
 800b582:	4b8d      	ldr	r3, [pc, #564]	@ (800b7b8 <tcp_process+0x2a0>)
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b58e:	440b      	add	r3, r1
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	2b00      	cmp	r3, #0
 800b594:	dc06      	bgt.n	800b5a4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	8b5b      	ldrh	r3, [r3, #26]
 800b59a:	f043 0302 	orr.w	r3, r3, #2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b5a4:	7efb      	ldrb	r3, [r7, #27]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d01b      	beq.n	800b5e2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	7d1b      	ldrb	r3, [r3, #20]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <tcp_process+0xa8>
 800b5b2:	4b7c      	ldr	r3, [pc, #496]	@ (800b7a4 <tcp_process+0x28c>)
 800b5b4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b5b8:	4980      	ldr	r1, [pc, #512]	@ (800b7bc <tcp_process+0x2a4>)
 800b5ba:	487c      	ldr	r0, [pc, #496]	@ (800b7ac <tcp_process+0x294>)
 800b5bc:	f006 fa84 	bl	8011ac8 <iprintf>
      recv_flags |= TF_RESET;
 800b5c0:	4b7f      	ldr	r3, [pc, #508]	@ (800b7c0 <tcp_process+0x2a8>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	f043 0308 	orr.w	r3, r3, #8
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	4b7d      	ldr	r3, [pc, #500]	@ (800b7c0 <tcp_process+0x2a8>)
 800b5cc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8b5b      	ldrh	r3, [r3, #26]
 800b5d2:	f023 0301 	bic.w	r3, r3, #1
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b5dc:	f06f 030d 	mvn.w	r3, #13
 800b5e0:	e37a      	b.n	800bcd8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e378      	b.n	800bcd8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b5e6:	4b72      	ldr	r3, [pc, #456]	@ (800b7b0 <tcp_process+0x298>)
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	f003 0302 	and.w	r3, r3, #2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d010      	beq.n	800b614 <tcp_process+0xfc>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	7d1b      	ldrb	r3, [r3, #20]
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d00c      	beq.n	800b614 <tcp_process+0xfc>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	7d1b      	ldrb	r3, [r3, #20]
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	d008      	beq.n	800b614 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	8b5b      	ldrh	r3, [r3, #26]
 800b606:	f043 0302 	orr.w	r3, r3, #2
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	e361      	b.n	800bcd8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	8b5b      	ldrh	r3, [r3, #26]
 800b618:	f003 0310 	and.w	r3, r3, #16
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d103      	bne.n	800b628 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b620:	4b68      	ldr	r3, [pc, #416]	@ (800b7c4 <tcp_process+0x2ac>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 fc2b 	bl	800ce94 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	7d1b      	ldrb	r3, [r3, #20]
 800b642:	3b02      	subs	r3, #2
 800b644:	2b07      	cmp	r3, #7
 800b646:	f200 8337 	bhi.w	800bcb8 <tcp_process+0x7a0>
 800b64a:	a201      	add	r2, pc, #4	@ (adr r2, 800b650 <tcp_process+0x138>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b671 	.word	0x0800b671
 800b654:	0800b8a1 	.word	0x0800b8a1
 800b658:	0800ba19 	.word	0x0800ba19
 800b65c:	0800ba43 	.word	0x0800ba43
 800b660:	0800bb67 	.word	0x0800bb67
 800b664:	0800ba19 	.word	0x0800ba19
 800b668:	0800bbf3 	.word	0x0800bbf3
 800b66c:	0800bc83 	.word	0x0800bc83
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b670:	4b4f      	ldr	r3, [pc, #316]	@ (800b7b0 <tcp_process+0x298>)
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	f003 0310 	and.w	r3, r3, #16
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 80e4 	beq.w	800b846 <tcp_process+0x32e>
 800b67e:	4b4c      	ldr	r3, [pc, #304]	@ (800b7b0 <tcp_process+0x298>)
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	f003 0302 	and.w	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 80dd 	beq.w	800b846 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	4b48      	ldr	r3, [pc, #288]	@ (800b7b4 <tcp_process+0x29c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	f040 80d5 	bne.w	800b846 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b69c:	4b46      	ldr	r3, [pc, #280]	@ (800b7b8 <tcp_process+0x2a0>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b6ae:	4b41      	ldr	r3, [pc, #260]	@ (800b7b4 <tcp_process+0x29c>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b6b6:	4b44      	ldr	r3, [pc, #272]	@ (800b7c8 <tcp_process+0x2b0>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	89db      	ldrh	r3, [r3, #14]
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b6d0:	4b39      	ldr	r3, [pc, #228]	@ (800b7b8 <tcp_process+0x2a0>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	1e5a      	subs	r2, r3, #1
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2204      	movs	r2, #4
 800b6de:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f004 ff01 	bl	80104f0 <ip4_route>
 800b6ee:	4601      	mov	r1, r0
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7ff f88c 	bl	800a814 <tcp_eff_send_mss_netif>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	461a      	mov	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b708:	009a      	lsls	r2, r3, #2
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b714:	428b      	cmp	r3, r1
 800b716:	bf38      	it	cc
 800b718:	460b      	movcc	r3, r1
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d204      	bcs.n	800b728 <tcp_process+0x210>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	b29b      	uxth	r3, r3
 800b726:	e00d      	b.n	800b744 <tcp_process+0x22c>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b732:	4293      	cmp	r3, r2
 800b734:	d904      	bls.n	800b740 <tcp_process+0x228>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	e001      	b.n	800b744 <tcp_process+0x22c>
 800b740:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b744:	687a      	ldr	r2, [r7, #4]
 800b746:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <tcp_process+0x24a>
 800b754:	4b13      	ldr	r3, [pc, #76]	@ (800b7a4 <tcp_process+0x28c>)
 800b756:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b75a:	491c      	ldr	r1, [pc, #112]	@ (800b7cc <tcp_process+0x2b4>)
 800b75c:	4813      	ldr	r0, [pc, #76]	@ (800b7ac <tcp_process+0x294>)
 800b75e:	f006 f9b3 	bl	8011ac8 <iprintf>
        --pcb->snd_queuelen;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b768:	3b01      	subs	r3, #1
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b776:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d12a      	bne.n	800b7d4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b782:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d106      	bne.n	800b798 <tcp_process+0x280>
 800b78a:	4b06      	ldr	r3, [pc, #24]	@ (800b7a4 <tcp_process+0x28c>)
 800b78c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b790:	490f      	ldr	r1, [pc, #60]	@ (800b7d0 <tcp_process+0x2b8>)
 800b792:	4806      	ldr	r0, [pc, #24]	@ (800b7ac <tcp_process+0x294>)
 800b794:	f006 f998 	bl	8011ac8 <iprintf>
          pcb->unsent = rseg->next;
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b7a0:	e01c      	b.n	800b7dc <tcp_process+0x2c4>
 800b7a2:	bf00      	nop
 800b7a4:	08013c18 	.word	0x08013c18
 800b7a8:	08013e50 	.word	0x08013e50
 800b7ac:	08013c64 	.word	0x08013c64
 800b7b0:	20008924 	.word	0x20008924
 800b7b4:	2000891c 	.word	0x2000891c
 800b7b8:	20008918 	.word	0x20008918
 800b7bc:	08013e6c 	.word	0x08013e6c
 800b7c0:	20008925 	.word	0x20008925
 800b7c4:	200088e0 	.word	0x200088e0
 800b7c8:	20008908 	.word	0x20008908
 800b7cc:	08013e8c 	.word	0x08013e8c
 800b7d0:	08013ea4 	.word	0x08013ea4
        } else {
          pcb->unacked = rseg->next;
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b7dc:	69f8      	ldr	r0, [r7, #28]
 800b7de:	f7fe fd22 	bl	800a226 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d104      	bne.n	800b7f4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7f0:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b7f2:	e006      	b.n	800b802 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00a      	beq.n	800b822 <tcp_process+0x30a>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6910      	ldr	r0, [r2, #16]
 800b816:	2200      	movs	r2, #0
 800b818:	6879      	ldr	r1, [r7, #4]
 800b81a:	4798      	blx	r3
 800b81c:	4603      	mov	r3, r0
 800b81e:	76bb      	strb	r3, [r7, #26]
 800b820:	e001      	b.n	800b826 <tcp_process+0x30e>
 800b822:	2300      	movs	r3, #0
 800b824:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b826:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b82a:	f113 0f0d 	cmn.w	r3, #13
 800b82e:	d102      	bne.n	800b836 <tcp_process+0x31e>
          return ERR_ABRT;
 800b830:	f06f 030c 	mvn.w	r3, #12
 800b834:	e250      	b.n	800bcd8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	8b5b      	ldrh	r3, [r3, #26]
 800b83a:	f043 0302 	orr.w	r3, r3, #2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b844:	e23a      	b.n	800bcbc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b846:	4b98      	ldr	r3, [pc, #608]	@ (800baa8 <tcp_process+0x590>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f003 0310 	and.w	r3, r3, #16
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f000 8234 	beq.w	800bcbc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b854:	4b95      	ldr	r3, [pc, #596]	@ (800baac <tcp_process+0x594>)
 800b856:	6819      	ldr	r1, [r3, #0]
 800b858:	4b95      	ldr	r3, [pc, #596]	@ (800bab0 <tcp_process+0x598>)
 800b85a:	881b      	ldrh	r3, [r3, #0]
 800b85c:	461a      	mov	r2, r3
 800b85e:	4b95      	ldr	r3, [pc, #596]	@ (800bab4 <tcp_process+0x59c>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b864:	4b94      	ldr	r3, [pc, #592]	@ (800bab8 <tcp_process+0x5a0>)
 800b866:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b868:	885b      	ldrh	r3, [r3, #2]
 800b86a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b86c:	4a92      	ldr	r2, [pc, #584]	@ (800bab8 <tcp_process+0x5a0>)
 800b86e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b870:	8812      	ldrh	r2, [r2, #0]
 800b872:	b292      	uxth	r2, r2
 800b874:	9202      	str	r2, [sp, #8]
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	4b90      	ldr	r3, [pc, #576]	@ (800babc <tcp_process+0x5a4>)
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	4b90      	ldr	r3, [pc, #576]	@ (800bac0 <tcp_process+0x5a8>)
 800b87e:	4602      	mov	r2, r0
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f003 f8d7 	bl	800ea34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b88c:	2b05      	cmp	r3, #5
 800b88e:	f200 8215 	bhi.w	800bcbc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f002 fea3 	bl	800e5e4 <tcp_rexmit_rto>
      break;
 800b89e:	e20d      	b.n	800bcbc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b8a0:	4b81      	ldr	r3, [pc, #516]	@ (800baa8 <tcp_process+0x590>)
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	f003 0310 	and.w	r3, r3, #16
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80a1 	beq.w	800b9f0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b8ae:	4b7f      	ldr	r3, [pc, #508]	@ (800baac <tcp_process+0x594>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	db7e      	blt.n	800b9bc <tcp_process+0x4a4>
 800b8be:	4b7b      	ldr	r3, [pc, #492]	@ (800baac <tcp_process+0x594>)
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8c6:	1ad3      	subs	r3, r2, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	dc77      	bgt.n	800b9bc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d102      	bne.n	800b8e0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b8da:	23fa      	movs	r3, #250	@ 0xfa
 800b8dc:	76bb      	strb	r3, [r7, #26]
 800b8de:	e01d      	b.n	800b91c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <tcp_process+0x3e0>
 800b8ea:	4b76      	ldr	r3, [pc, #472]	@ (800bac4 <tcp_process+0x5ac>)
 800b8ec:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b8f0:	4975      	ldr	r1, [pc, #468]	@ (800bac8 <tcp_process+0x5b0>)
 800b8f2:	4876      	ldr	r0, [pc, #472]	@ (800bacc <tcp_process+0x5b4>)
 800b8f4:	f006 f8e8 	bl	8011ac8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <tcp_process+0x400>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	6910      	ldr	r0, [r2, #16]
 800b90c:	2200      	movs	r2, #0
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
 800b914:	76bb      	strb	r3, [r7, #26]
 800b916:	e001      	b.n	800b91c <tcp_process+0x404>
 800b918:	23f0      	movs	r3, #240	@ 0xf0
 800b91a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b91c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b924:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b928:	f113 0f0d 	cmn.w	r3, #13
 800b92c:	d002      	beq.n	800b934 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7fd ff8c 	bl	800984c <tcp_abort>
            }
            return ERR_ABRT;
 800b934:	f06f 030c 	mvn.w	r3, #12
 800b938:	e1ce      	b.n	800bcd8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fae0 	bl	800bf00 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b940:	4b63      	ldr	r3, [pc, #396]	@ (800bad0 <tcp_process+0x5b8>)
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <tcp_process+0x43c>
            recv_acked--;
 800b948:	4b61      	ldr	r3, [pc, #388]	@ (800bad0 <tcp_process+0x5b8>)
 800b94a:	881b      	ldrh	r3, [r3, #0]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	b29a      	uxth	r2, r3
 800b950:	4b5f      	ldr	r3, [pc, #380]	@ (800bad0 <tcp_process+0x5b8>)
 800b952:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b958:	009a      	lsls	r2, r3, #2
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b964:	428b      	cmp	r3, r1
 800b966:	bf38      	it	cc
 800b968:	460b      	movcc	r3, r1
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d204      	bcs.n	800b978 <tcp_process+0x460>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	b29b      	uxth	r3, r3
 800b976:	e00d      	b.n	800b994 <tcp_process+0x47c>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b982:	4293      	cmp	r3, r2
 800b984:	d904      	bls.n	800b990 <tcp_process+0x478>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	e001      	b.n	800b994 <tcp_process+0x47c>
 800b990:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b99a:	4b4e      	ldr	r3, [pc, #312]	@ (800bad4 <tcp_process+0x5bc>)
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d037      	beq.n	800ba16 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	8b5b      	ldrh	r3, [r3, #26]
 800b9aa:	f043 0302 	orr.w	r3, r3, #2
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2207      	movs	r2, #7
 800b9b8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b9ba:	e02c      	b.n	800ba16 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9bc:	4b3b      	ldr	r3, [pc, #236]	@ (800baac <tcp_process+0x594>)
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	4b3b      	ldr	r3, [pc, #236]	@ (800bab0 <tcp_process+0x598>)
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4b3b      	ldr	r3, [pc, #236]	@ (800bab4 <tcp_process+0x59c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9cc:	4b3a      	ldr	r3, [pc, #232]	@ (800bab8 <tcp_process+0x5a0>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9d0:	885b      	ldrh	r3, [r3, #2]
 800b9d2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9d4:	4a38      	ldr	r2, [pc, #224]	@ (800bab8 <tcp_process+0x5a0>)
 800b9d6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9d8:	8812      	ldrh	r2, [r2, #0]
 800b9da:	b292      	uxth	r2, r2
 800b9dc:	9202      	str	r2, [sp, #8]
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	4b36      	ldr	r3, [pc, #216]	@ (800babc <tcp_process+0x5a4>)
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	4b36      	ldr	r3, [pc, #216]	@ (800bac0 <tcp_process+0x5a8>)
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f003 f823 	bl	800ea34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b9ee:	e167      	b.n	800bcc0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b9f0:	4b2d      	ldr	r3, [pc, #180]	@ (800baa8 <tcp_process+0x590>)
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f003 0302 	and.w	r3, r3, #2
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8161 	beq.w	800bcc0 <tcp_process+0x7a8>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba02:	1e5a      	subs	r2, r3, #1
 800ba04:	4b2b      	ldr	r3, [pc, #172]	@ (800bab4 <tcp_process+0x59c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	f040 8159 	bne.w	800bcc0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f002 fe0a 	bl	800e628 <tcp_rexmit>
      break;
 800ba14:	e154      	b.n	800bcc0 <tcp_process+0x7a8>
 800ba16:	e153      	b.n	800bcc0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa71 	bl	800bf00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ba1e:	4b2d      	ldr	r3, [pc, #180]	@ (800bad4 <tcp_process+0x5bc>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	f003 0320 	and.w	r3, r3, #32
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 814c 	beq.w	800bcc4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	8b5b      	ldrh	r3, [r3, #26]
 800ba30:	f043 0302 	orr.w	r3, r3, #2
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2207      	movs	r2, #7
 800ba3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba40:	e140      	b.n	800bcc4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fa5c 	bl	800bf00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ba48:	4b22      	ldr	r3, [pc, #136]	@ (800bad4 <tcp_process+0x5bc>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	f003 0320 	and.w	r3, r3, #32
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d071      	beq.n	800bb38 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba54:	4b14      	ldr	r3, [pc, #80]	@ (800baa8 <tcp_process+0x590>)
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	f003 0310 	and.w	r3, r3, #16
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d060      	beq.n	800bb22 <tcp_process+0x60a>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba64:	4b11      	ldr	r3, [pc, #68]	@ (800baac <tcp_process+0x594>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d15a      	bne.n	800bb22 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d156      	bne.n	800bb22 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	8b5b      	ldrh	r3, [r3, #26]
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7fe fdbc 	bl	800a600 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ba88:	4b13      	ldr	r3, [pc, #76]	@ (800bad8 <tcp_process+0x5c0>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d105      	bne.n	800ba9e <tcp_process+0x586>
 800ba92:	4b11      	ldr	r3, [pc, #68]	@ (800bad8 <tcp_process+0x5c0>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	4a0f      	ldr	r2, [pc, #60]	@ (800bad8 <tcp_process+0x5c0>)
 800ba9a:	6013      	str	r3, [r2, #0]
 800ba9c:	e02e      	b.n	800bafc <tcp_process+0x5e4>
 800ba9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bad8 <tcp_process+0x5c0>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	617b      	str	r3, [r7, #20]
 800baa4:	e027      	b.n	800baf6 <tcp_process+0x5de>
 800baa6:	bf00      	nop
 800baa8:	20008924 	.word	0x20008924
 800baac:	2000891c 	.word	0x2000891c
 800bab0:	20008922 	.word	0x20008922
 800bab4:	20008918 	.word	0x20008918
 800bab8:	20008908 	.word	0x20008908
 800babc:	20005380 	.word	0x20005380
 800bac0:	20005384 	.word	0x20005384
 800bac4:	08013c18 	.word	0x08013c18
 800bac8:	08013eb8 	.word	0x08013eb8
 800bacc:	08013c64 	.word	0x08013c64
 800bad0:	20008920 	.word	0x20008920
 800bad4:	20008925 	.word	0x20008925
 800bad8:	200088ec 	.word	0x200088ec
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d104      	bne.n	800baf0 <tcp_process+0x5d8>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	68da      	ldr	r2, [r3, #12]
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	60da      	str	r2, [r3, #12]
 800baee:	e005      	b.n	800bafc <tcp_process+0x5e4>
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1ef      	bne.n	800badc <tcp_process+0x5c4>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	60da      	str	r2, [r3, #12]
 800bb02:	4b77      	ldr	r3, [pc, #476]	@ (800bce0 <tcp_process+0x7c8>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	220a      	movs	r2, #10
 800bb0c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bb0e:	4b75      	ldr	r3, [pc, #468]	@ (800bce4 <tcp_process+0x7cc>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60da      	str	r2, [r3, #12]
 800bb16:	4a73      	ldr	r2, [pc, #460]	@ (800bce4 <tcp_process+0x7cc>)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	f003 f94c 	bl	800edb8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800bb20:	e0d2      	b.n	800bcc8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	8b5b      	ldrh	r3, [r3, #26]
 800bb26:	f043 0302 	orr.w	r3, r3, #2
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2208      	movs	r2, #8
 800bb34:	751a      	strb	r2, [r3, #20]
      break;
 800bb36:	e0c7      	b.n	800bcc8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb38:	4b6b      	ldr	r3, [pc, #428]	@ (800bce8 <tcp_process+0x7d0>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f003 0310 	and.w	r3, r3, #16
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80c1 	beq.w	800bcc8 <tcp_process+0x7b0>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb4a:	4b68      	ldr	r3, [pc, #416]	@ (800bcec <tcp_process+0x7d4>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	f040 80ba 	bne.w	800bcc8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f040 80b5 	bne.w	800bcc8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2206      	movs	r2, #6
 800bb62:	751a      	strb	r2, [r3, #20]
      break;
 800bb64:	e0b0      	b.n	800bcc8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f9ca 	bl	800bf00 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bb6c:	4b60      	ldr	r3, [pc, #384]	@ (800bcf0 <tcp_process+0x7d8>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f000 80a9 	beq.w	800bccc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	8b5b      	ldrh	r3, [r3, #26]
 800bb7e:	f043 0302 	orr.w	r3, r3, #2
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7fe fd39 	bl	800a600 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb8e:	4b59      	ldr	r3, [pc, #356]	@ (800bcf4 <tcp_process+0x7dc>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d105      	bne.n	800bba4 <tcp_process+0x68c>
 800bb98:	4b56      	ldr	r3, [pc, #344]	@ (800bcf4 <tcp_process+0x7dc>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	4a55      	ldr	r2, [pc, #340]	@ (800bcf4 <tcp_process+0x7dc>)
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	e013      	b.n	800bbcc <tcp_process+0x6b4>
 800bba4:	4b53      	ldr	r3, [pc, #332]	@ (800bcf4 <tcp_process+0x7dc>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	e00c      	b.n	800bbc6 <tcp_process+0x6ae>
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d104      	bne.n	800bbc0 <tcp_process+0x6a8>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	60da      	str	r2, [r3, #12]
 800bbbe:	e005      	b.n	800bbcc <tcp_process+0x6b4>
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	613b      	str	r3, [r7, #16]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1ef      	bne.n	800bbac <tcp_process+0x694>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	60da      	str	r2, [r3, #12]
 800bbd2:	4b43      	ldr	r3, [pc, #268]	@ (800bce0 <tcp_process+0x7c8>)
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	220a      	movs	r2, #10
 800bbdc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bbde:	4b41      	ldr	r3, [pc, #260]	@ (800bce4 <tcp_process+0x7cc>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	60da      	str	r2, [r3, #12]
 800bbe6:	4a3f      	ldr	r2, [pc, #252]	@ (800bce4 <tcp_process+0x7cc>)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6013      	str	r3, [r2, #0]
 800bbec:	f003 f8e4 	bl	800edb8 <tcp_timer_needed>
      }
      break;
 800bbf0:	e06c      	b.n	800bccc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f984 	bl	800bf00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bbf8:	4b3b      	ldr	r3, [pc, #236]	@ (800bce8 <tcp_process+0x7d0>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f003 0310 	and.w	r3, r3, #16
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d065      	beq.n	800bcd0 <tcp_process+0x7b8>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc08:	4b38      	ldr	r3, [pc, #224]	@ (800bcec <tcp_process+0x7d4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d15f      	bne.n	800bcd0 <tcp_process+0x7b8>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d15b      	bne.n	800bcd0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7fe fcf1 	bl	800a600 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bc1e:	4b35      	ldr	r3, [pc, #212]	@ (800bcf4 <tcp_process+0x7dc>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d105      	bne.n	800bc34 <tcp_process+0x71c>
 800bc28:	4b32      	ldr	r3, [pc, #200]	@ (800bcf4 <tcp_process+0x7dc>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	4a31      	ldr	r2, [pc, #196]	@ (800bcf4 <tcp_process+0x7dc>)
 800bc30:	6013      	str	r3, [r2, #0]
 800bc32:	e013      	b.n	800bc5c <tcp_process+0x744>
 800bc34:	4b2f      	ldr	r3, [pc, #188]	@ (800bcf4 <tcp_process+0x7dc>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60fb      	str	r3, [r7, #12]
 800bc3a:	e00c      	b.n	800bc56 <tcp_process+0x73e>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d104      	bne.n	800bc50 <tcp_process+0x738>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	68da      	ldr	r2, [r3, #12]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	60da      	str	r2, [r3, #12]
 800bc4e:	e005      	b.n	800bc5c <tcp_process+0x744>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	60fb      	str	r3, [r7, #12]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1ef      	bne.n	800bc3c <tcp_process+0x724>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	60da      	str	r2, [r3, #12]
 800bc62:	4b1f      	ldr	r3, [pc, #124]	@ (800bce0 <tcp_process+0x7c8>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bc6e:	4b1d      	ldr	r3, [pc, #116]	@ (800bce4 <tcp_process+0x7cc>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60da      	str	r2, [r3, #12]
 800bc76:	4a1b      	ldr	r2, [pc, #108]	@ (800bce4 <tcp_process+0x7cc>)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6013      	str	r3, [r2, #0]
 800bc7c:	f003 f89c 	bl	800edb8 <tcp_timer_needed>
      }
      break;
 800bc80:	e026      	b.n	800bcd0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f93c 	bl	800bf00 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bc88:	4b17      	ldr	r3, [pc, #92]	@ (800bce8 <tcp_process+0x7d0>)
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	f003 0310 	and.w	r3, r3, #16
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d01f      	beq.n	800bcd4 <tcp_process+0x7bc>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc98:	4b14      	ldr	r3, [pc, #80]	@ (800bcec <tcp_process+0x7d4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d119      	bne.n	800bcd4 <tcp_process+0x7bc>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d115      	bne.n	800bcd4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bca8:	4b11      	ldr	r3, [pc, #68]	@ (800bcf0 <tcp_process+0x7d8>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	f043 0310 	orr.w	r3, r3, #16
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bcf0 <tcp_process+0x7d8>)
 800bcb4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bcb6:	e00d      	b.n	800bcd4 <tcp_process+0x7bc>
    default:
      break;
 800bcb8:	bf00      	nop
 800bcba:	e00c      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bcbc:	bf00      	nop
 800bcbe:	e00a      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bcc0:	bf00      	nop
 800bcc2:	e008      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bcc4:	bf00      	nop
 800bcc6:	e006      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bcc8:	bf00      	nop
 800bcca:	e004      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bccc:	bf00      	nop
 800bcce:	e002      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bcd0:	bf00      	nop
 800bcd2:	e000      	b.n	800bcd6 <tcp_process+0x7be>
      break;
 800bcd4:	bf00      	nop
  }
  return ERR_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3724      	adds	r7, #36	@ 0x24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd90      	pop	{r4, r7, pc}
 800bce0:	200088f4 	.word	0x200088f4
 800bce4:	200088f0 	.word	0x200088f0
 800bce8:	20008924 	.word	0x20008924
 800bcec:	2000891c 	.word	0x2000891c
 800bcf0:	20008925 	.word	0x20008925
 800bcf4:	200088ec 	.word	0x200088ec

0800bcf8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bcf8:	b590      	push	{r4, r7, lr}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d106      	bne.n	800bd16 <tcp_oos_insert_segment+0x1e>
 800bd08:	4b3b      	ldr	r3, [pc, #236]	@ (800bdf8 <tcp_oos_insert_segment+0x100>)
 800bd0a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800bd0e:	493b      	ldr	r1, [pc, #236]	@ (800bdfc <tcp_oos_insert_segment+0x104>)
 800bd10:	483b      	ldr	r0, [pc, #236]	@ (800be00 <tcp_oos_insert_segment+0x108>)
 800bd12:	f005 fed9 	bl	8011ac8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	899b      	ldrh	r3, [r3, #12]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fb fc3c 	bl	800759c <lwip_htons>
 800bd24:	4603      	mov	r3, r0
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d028      	beq.n	800bd82 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bd30:	6838      	ldr	r0, [r7, #0]
 800bd32:	f7fe fa63 	bl	800a1fc <tcp_segs_free>
    next = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	603b      	str	r3, [r7, #0]
 800bd3a:	e056      	b.n	800bdea <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	899b      	ldrh	r3, [r3, #12]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fb fc29 	bl	800759c <lwip_htons>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00d      	beq.n	800bd72 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	899b      	ldrh	r3, [r3, #12]
 800bd5c:	b29c      	uxth	r4, r3
 800bd5e:	2001      	movs	r0, #1
 800bd60:	f7fb fc1c 	bl	800759c <lwip_htons>
 800bd64:	4603      	mov	r3, r0
 800bd66:	461a      	mov	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	4322      	orrs	r2, r4
 800bd6e:	b292      	uxth	r2, r2
 800bd70:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f7fe fa52 	bl	800a226 <tcp_seg_free>
    while (next &&
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00e      	beq.n	800bda6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	891b      	ldrh	r3, [r3, #8]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800be04 <tcp_oos_insert_segment+0x10c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	441a      	add	r2, r3
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	8909      	ldrh	r1, [r1, #8]
 800bd9e:	440b      	add	r3, r1
 800bda0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	daca      	bge.n	800bd3c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d01e      	beq.n	800bdea <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	891b      	ldrh	r3, [r3, #8]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	4b14      	ldr	r3, [pc, #80]	@ (800be04 <tcp_oos_insert_segment+0x10c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	441a      	add	r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	dd12      	ble.n	800bdea <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	4b0d      	ldr	r3, [pc, #52]	@ (800be04 <tcp_oos_insert_segment+0x10c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	891b      	ldrh	r3, [r3, #8]
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f7fc fd91 	bl	800890c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd90      	pop	{r4, r7, pc}
 800bdf8:	08013c18 	.word	0x08013c18
 800bdfc:	08013ed8 	.word	0x08013ed8
 800be00:	08013c64 	.word	0x08013c64
 800be04:	20008918 	.word	0x20008918

0800be08 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800be16:	e03e      	b.n	800be96 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	4618      	mov	r0, r3
 800be28:	f7fc ff7e 	bl	8008d28 <pbuf_clen>
 800be2c:	4603      	mov	r3, r0
 800be2e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800be36:	8a7a      	ldrh	r2, [r7, #18]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d906      	bls.n	800be4a <tcp_free_acked_segments+0x42>
 800be3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bee8 <tcp_free_acked_segments+0xe0>)
 800be3e:	f240 4257 	movw	r2, #1111	@ 0x457
 800be42:	492a      	ldr	r1, [pc, #168]	@ (800beec <tcp_free_acked_segments+0xe4>)
 800be44:	482a      	ldr	r0, [pc, #168]	@ (800bef0 <tcp_free_acked_segments+0xe8>)
 800be46:	f005 fe3f 	bl	8011ac8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800be50:	8a7b      	ldrh	r3, [r7, #18]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	891a      	ldrh	r2, [r3, #8]
 800be60:	4b24      	ldr	r3, [pc, #144]	@ (800bef4 <tcp_free_acked_segments+0xec>)
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	4413      	add	r3, r2
 800be66:	b29a      	uxth	r2, r3
 800be68:	4b22      	ldr	r3, [pc, #136]	@ (800bef4 <tcp_free_acked_segments+0xec>)
 800be6a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800be6c:	6978      	ldr	r0, [r7, #20]
 800be6e:	f7fe f9da 	bl	800a226 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00c      	beq.n	800be96 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d109      	bne.n	800be96 <tcp_free_acked_segments+0x8e>
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d106      	bne.n	800be96 <tcp_free_acked_segments+0x8e>
 800be88:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <tcp_free_acked_segments+0xe0>)
 800be8a:	f240 4261 	movw	r2, #1121	@ 0x461
 800be8e:	491a      	ldr	r1, [pc, #104]	@ (800bef8 <tcp_free_acked_segments+0xf0>)
 800be90:	4817      	ldr	r0, [pc, #92]	@ (800bef0 <tcp_free_acked_segments+0xe8>)
 800be92:	f005 fe19 	bl	8011ac8 <iprintf>
  while (seg_list != NULL &&
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d020      	beq.n	800bede <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fb fb8f 	bl	80075c6 <lwip_htonl>
 800bea8:	4604      	mov	r4, r0
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	891b      	ldrh	r3, [r3, #8]
 800beae:	461d      	mov	r5, r3
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	899b      	ldrh	r3, [r3, #12]
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fb fb6f 	bl	800759c <lwip_htons>
 800bebe:	4603      	mov	r3, r0
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f003 0303 	and.w	r3, r3, #3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <tcp_free_acked_segments+0xc6>
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <tcp_free_acked_segments+0xc8>
 800bece:	2300      	movs	r3, #0
 800bed0:	442b      	add	r3, r5
 800bed2:	18e2      	adds	r2, r4, r3
 800bed4:	4b09      	ldr	r3, [pc, #36]	@ (800befc <tcp_free_acked_segments+0xf4>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800beda:	2b00      	cmp	r3, #0
 800bedc:	dd9c      	ble.n	800be18 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bede:	68bb      	ldr	r3, [r7, #8]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bdb0      	pop	{r4, r5, r7, pc}
 800bee8:	08013c18 	.word	0x08013c18
 800beec:	08013f00 	.word	0x08013f00
 800bef0:	08013c64 	.word	0x08013c64
 800bef4:	20008920 	.word	0x20008920
 800bef8:	08013f28 	.word	0x08013f28
 800befc:	2000891c 	.word	0x2000891c

0800bf00 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bf00:	b5b0      	push	{r4, r5, r7, lr}
 800bf02:	b094      	sub	sp, #80	@ 0x50
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <tcp_receive+0x20>
 800bf12:	4b91      	ldr	r3, [pc, #580]	@ (800c158 <tcp_receive+0x258>)
 800bf14:	f240 427b 	movw	r2, #1147	@ 0x47b
 800bf18:	4990      	ldr	r1, [pc, #576]	@ (800c15c <tcp_receive+0x25c>)
 800bf1a:	4891      	ldr	r0, [pc, #580]	@ (800c160 <tcp_receive+0x260>)
 800bf1c:	f005 fdd4 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	7d1b      	ldrb	r3, [r3, #20]
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d806      	bhi.n	800bf36 <tcp_receive+0x36>
 800bf28:	4b8b      	ldr	r3, [pc, #556]	@ (800c158 <tcp_receive+0x258>)
 800bf2a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800bf2e:	498d      	ldr	r1, [pc, #564]	@ (800c164 <tcp_receive+0x264>)
 800bf30:	488b      	ldr	r0, [pc, #556]	@ (800c160 <tcp_receive+0x260>)
 800bf32:	f005 fdc9 	bl	8011ac8 <iprintf>

  if (flags & TCP_ACK) {
 800bf36:	4b8c      	ldr	r3, [pc, #560]	@ (800c168 <tcp_receive+0x268>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	f003 0310 	and.w	r3, r3, #16
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f000 8264 	beq.w	800c40c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf50:	4413      	add	r3, r2
 800bf52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf58:	4b84      	ldr	r3, [pc, #528]	@ (800c16c <tcp_receive+0x26c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	db1b      	blt.n	800bf9a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf66:	4b81      	ldr	r3, [pc, #516]	@ (800c16c <tcp_receive+0x26c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d106      	bne.n	800bf7c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf72:	4b7f      	ldr	r3, [pc, #508]	@ (800c170 <tcp_receive+0x270>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	db0e      	blt.n	800bf9a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bf80:	4b7b      	ldr	r3, [pc, #492]	@ (800c170 <tcp_receive+0x270>)
 800bf82:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d125      	bne.n	800bfd4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf88:	4b7a      	ldr	r3, [pc, #488]	@ (800c174 <tcp_receive+0x274>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	89db      	ldrh	r3, [r3, #14]
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d91c      	bls.n	800bfd4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf9a:	4b76      	ldr	r3, [pc, #472]	@ (800c174 <tcp_receive+0x274>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	89db      	ldrh	r3, [r3, #14]
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d205      	bcs.n	800bfc4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bfc4:	4b69      	ldr	r3, [pc, #420]	@ (800c16c <tcp_receive+0x26c>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bfcc:	4b68      	ldr	r3, [pc, #416]	@ (800c170 <tcp_receive+0x270>)
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bfd4:	4b66      	ldr	r3, [pc, #408]	@ (800c170 <tcp_receive+0x270>)
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	dc58      	bgt.n	800c094 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bfe2:	4b65      	ldr	r3, [pc, #404]	@ (800c178 <tcp_receive+0x278>)
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d14b      	bne.n	800c082 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bff4:	4413      	add	r3, r2
 800bff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d142      	bne.n	800c082 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c002:	2b00      	cmp	r3, #0
 800c004:	db3d      	blt.n	800c082 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c00a:	4b59      	ldr	r3, [pc, #356]	@ (800c170 <tcp_receive+0x270>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d137      	bne.n	800c082 <tcp_receive+0x182>
              found_dupack = 1;
 800c012:	2301      	movs	r3, #1
 800c014:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c01c:	2bff      	cmp	r3, #255	@ 0xff
 800c01e:	d007      	beq.n	800c030 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c026:	3301      	adds	r3, #1
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c036:	2b03      	cmp	r3, #3
 800c038:	d91b      	bls.n	800c072 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c044:	4413      	add	r3, r2
 800c046:	b29a      	uxth	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c04e:	429a      	cmp	r2, r3
 800c050:	d30a      	bcc.n	800c068 <tcp_receive+0x168>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c05c:	4413      	add	r3, r2
 800c05e:	b29a      	uxth	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c066:	e004      	b.n	800c072 <tcp_receive+0x172>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c06e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d902      	bls.n	800c082 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f002 fb3f 	bl	800e700 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c084:	2b00      	cmp	r3, #0
 800c086:	f040 8161 	bne.w	800c34c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c092:	e15b      	b.n	800c34c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c094:	4b36      	ldr	r3, [pc, #216]	@ (800c170 <tcp_receive+0x270>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f2c0 814e 	blt.w	800c342 <tcp_receive+0x442>
 800c0a6:	4b32      	ldr	r3, [pc, #200]	@ (800c170 <tcp_receive+0x270>)
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f300 8146 	bgt.w	800c342 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	8b5b      	ldrh	r3, [r3, #26]
 800c0ba:	f003 0304 	and.w	r3, r3, #4
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d010      	beq.n	800c0e4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	8b5b      	ldrh	r3, [r3, #26]
 800c0c6:	f023 0304 	bic.w	r3, r3, #4
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c0f2:	10db      	asrs	r3, r3, #3
 800c0f4:	b21b      	sxth	r3, r3
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	4413      	add	r3, r2
 800c102:	b29b      	uxth	r3, r3
 800c104:	b21a      	sxth	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c10c:	4b18      	ldr	r3, [pc, #96]	@ (800c170 <tcp_receive+0x270>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c116:	b29b      	uxth	r3, r3
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c124:	4b12      	ldr	r3, [pc, #72]	@ (800c170 <tcp_receive+0x270>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	7d1b      	ldrb	r3, [r3, #20]
 800c130:	2b03      	cmp	r3, #3
 800c132:	f240 8097 	bls.w	800c264 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c142:	429a      	cmp	r2, r3
 800c144:	d245      	bcs.n	800c1d2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	8b5b      	ldrh	r3, [r3, #26]
 800c14a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d014      	beq.n	800c17c <tcp_receive+0x27c>
 800c152:	2301      	movs	r3, #1
 800c154:	e013      	b.n	800c17e <tcp_receive+0x27e>
 800c156:	bf00      	nop
 800c158:	08013c18 	.word	0x08013c18
 800c15c:	08013f48 	.word	0x08013f48
 800c160:	08013c64 	.word	0x08013c64
 800c164:	08013f64 	.word	0x08013f64
 800c168:	20008924 	.word	0x20008924
 800c16c:	20008918 	.word	0x20008918
 800c170:	2000891c 	.word	0x2000891c
 800c174:	20008908 	.word	0x20008908
 800c178:	20008922 	.word	0x20008922
 800c17c:	2302      	movs	r3, #2
 800c17e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c182:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c186:	b29a      	uxth	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c18c:	fb12 f303 	smulbb	r3, r2, r3
 800c190:	b29b      	uxth	r3, r3
 800c192:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c194:	4293      	cmp	r3, r2
 800c196:	bf28      	it	cs
 800c198:	4613      	movcs	r3, r2
 800c19a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c1a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c1a4:	4413      	add	r3, r2
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d309      	bcc.n	800c1c6 <tcp_receive+0x2c6>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c1b8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c1ba:	4413      	add	r3, r2
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c1c4:	e04e      	b.n	800c264 <tcp_receive+0x364>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c1d0:	e048      	b.n	800c264 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c1d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c1da:	4413      	add	r3, r2
 800c1dc:	b29a      	uxth	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d309      	bcc.n	800c1fc <tcp_receive+0x2fc>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c1ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c1f0:	4413      	add	r3, r2
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c1fa:	e004      	b.n	800c206 <tcp_receive+0x306>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c202:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c212:	429a      	cmp	r2, r3
 800c214:	d326      	bcc.n	800c264 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	b29a      	uxth	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c236:	4413      	add	r3, r2
 800c238:	b29a      	uxth	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c240:	429a      	cmp	r2, r3
 800c242:	d30a      	bcc.n	800c25a <tcp_receive+0x35a>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c24e:	4413      	add	r3, r2
 800c250:	b29a      	uxth	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c258:	e004      	b.n	800c264 <tcp_receive+0x364>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c260:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c26c:	4a98      	ldr	r2, [pc, #608]	@ (800c4d0 <tcp_receive+0x5d0>)
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fdca 	bl	800be08 <tcp_free_acked_segments>
 800c274:	4602      	mov	r2, r0
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c282:	4a94      	ldr	r2, [pc, #592]	@ (800c4d4 <tcp_receive+0x5d4>)
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7ff fdbf 	bl	800be08 <tcp_free_acked_segments>
 800c28a:	4602      	mov	r2, r0
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c294:	2b00      	cmp	r3, #0
 800c296:	d104      	bne.n	800c2a2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c29e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c2a0:	e002      	b.n	800c2a8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d103      	bne.n	800c2be <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c2c4:	4b84      	ldr	r3, [pc, #528]	@ (800c4d8 <tcp_receive+0x5d8>)
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8b5b      	ldrh	r3, [r3, #26]
 800c2d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d035      	beq.n	800c34a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d118      	bne.n	800c318 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00c      	beq.n	800c308 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f7fb f963 	bl	80075c6 <lwip_htonl>
 800c300:	4603      	mov	r3, r0
 800c302:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c304:	2b00      	cmp	r3, #0
 800c306:	dc20      	bgt.n	800c34a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	8b5b      	ldrh	r3, [r3, #26]
 800c30c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c316:	e018      	b.n	800c34a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	f7fb f94e 	bl	80075c6 <lwip_htonl>
 800c32a:	4603      	mov	r3, r0
 800c32c:	1ae3      	subs	r3, r4, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	dc0b      	bgt.n	800c34a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	8b5b      	ldrh	r3, [r3, #26]
 800c336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c340:	e003      	b.n	800c34a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f002 fbc8 	bl	800ead8 <tcp_send_empty_ack>
 800c348:	e000      	b.n	800c34c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c34a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c350:	2b00      	cmp	r3, #0
 800c352:	d05b      	beq.n	800c40c <tcp_receive+0x50c>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c358:	4b60      	ldr	r3, [pc, #384]	@ (800c4dc <tcp_receive+0x5dc>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	da54      	bge.n	800c40c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c362:	4b5f      	ldr	r3, [pc, #380]	@ (800c4e0 <tcp_receive+0x5e0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	b29a      	uxth	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	b29b      	uxth	r3, r3
 800c372:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c376:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c380:	10db      	asrs	r3, r3, #3
 800c382:	b21b      	sxth	r3, r3
 800c384:	b29b      	uxth	r3, r3
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	b29b      	uxth	r3, r3
 800c38a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c394:	b29a      	uxth	r2, r3
 800c396:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c39a:	4413      	add	r3, r2
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	b21a      	sxth	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c3a4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da05      	bge.n	800c3b8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c3ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c3b0:	425b      	negs	r3, r3
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c3b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c3c2:	109b      	asrs	r3, r3, #2
 800c3c4:	b21b      	sxth	r3, r3
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c3dc:	4413      	add	r3, r2
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	b21a      	sxth	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c3ec:	10db      	asrs	r3, r3, #3
 800c3ee:	b21b      	sxth	r3, r3
 800c3f0:	b29a      	uxth	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	4413      	add	r3, r2
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	b21a      	sxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c40c:	4b35      	ldr	r3, [pc, #212]	@ (800c4e4 <tcp_receive+0x5e4>)
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 84df 	beq.w	800cdd4 <tcp_receive+0xed4>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7d1b      	ldrb	r3, [r3, #20]
 800c41a:	2b06      	cmp	r3, #6
 800c41c:	f200 84da 	bhi.w	800cdd4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c424:	4b30      	ldr	r3, [pc, #192]	@ (800c4e8 <tcp_receive+0x5e8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	3b01      	subs	r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f2c0 808f 	blt.w	800c550 <tcp_receive+0x650>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c436:	4b2b      	ldr	r3, [pc, #172]	@ (800c4e4 <tcp_receive+0x5e4>)
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	4619      	mov	r1, r3
 800c43c:	4b2a      	ldr	r3, [pc, #168]	@ (800c4e8 <tcp_receive+0x5e8>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	440b      	add	r3, r1
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	3301      	adds	r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	f300 8082 	bgt.w	800c550 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c44c:	4b27      	ldr	r3, [pc, #156]	@ (800c4ec <tcp_receive+0x5ec>)
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c456:	4b24      	ldr	r3, [pc, #144]	@ (800c4e8 <tcp_receive+0x5e8>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	1ad3      	subs	r3, r2, r3
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c45e:	4b23      	ldr	r3, [pc, #140]	@ (800c4ec <tcp_receive+0x5ec>)
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <tcp_receive+0x574>
 800c466:	4b22      	ldr	r3, [pc, #136]	@ (800c4f0 <tcp_receive+0x5f0>)
 800c468:	f240 5294 	movw	r2, #1428	@ 0x594
 800c46c:	4921      	ldr	r1, [pc, #132]	@ (800c4f4 <tcp_receive+0x5f4>)
 800c46e:	4822      	ldr	r0, [pc, #136]	@ (800c4f8 <tcp_receive+0x5f8>)
 800c470:	f005 fb2a 	bl	8011ac8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c476:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d906      	bls.n	800c48c <tcp_receive+0x58c>
 800c47e:	4b1c      	ldr	r3, [pc, #112]	@ (800c4f0 <tcp_receive+0x5f0>)
 800c480:	f240 5295 	movw	r2, #1429	@ 0x595
 800c484:	491d      	ldr	r1, [pc, #116]	@ (800c4fc <tcp_receive+0x5fc>)
 800c486:	481c      	ldr	r0, [pc, #112]	@ (800c4f8 <tcp_receive+0x5f8>)
 800c488:	f005 fb1e 	bl	8011ac8 <iprintf>
      off = (u16_t)off32;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c492:	4b16      	ldr	r3, [pc, #88]	@ (800c4ec <tcp_receive+0x5ec>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	891b      	ldrh	r3, [r3, #8]
 800c498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d906      	bls.n	800c4ae <tcp_receive+0x5ae>
 800c4a0:	4b13      	ldr	r3, [pc, #76]	@ (800c4f0 <tcp_receive+0x5f0>)
 800c4a2:	f240 5297 	movw	r2, #1431	@ 0x597
 800c4a6:	4916      	ldr	r1, [pc, #88]	@ (800c500 <tcp_receive+0x600>)
 800c4a8:	4813      	ldr	r0, [pc, #76]	@ (800c4f8 <tcp_receive+0x5f8>)
 800c4aa:	f005 fb0d 	bl	8011ac8 <iprintf>
      inseg.len -= off;
 800c4ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c4ec <tcp_receive+0x5ec>)
 800c4b0:	891a      	ldrh	r2, [r3, #8]
 800c4b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ec <tcp_receive+0x5ec>)
 800c4bc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c4be:	4b0b      	ldr	r3, [pc, #44]	@ (800c4ec <tcp_receive+0x5ec>)
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	891a      	ldrh	r2, [r3, #8]
 800c4c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c4cc:	e02a      	b.n	800c524 <tcp_receive+0x624>
 800c4ce:	bf00      	nop
 800c4d0:	08013f80 	.word	0x08013f80
 800c4d4:	08013f88 	.word	0x08013f88
 800c4d8:	20008920 	.word	0x20008920
 800c4dc:	2000891c 	.word	0x2000891c
 800c4e0:	200088e0 	.word	0x200088e0
 800c4e4:	20008922 	.word	0x20008922
 800c4e8:	20008918 	.word	0x20008918
 800c4ec:	200088f8 	.word	0x200088f8
 800c4f0:	08013c18 	.word	0x08013c18
 800c4f4:	08013f90 	.word	0x08013f90
 800c4f8:	08013c64 	.word	0x08013c64
 800c4fc:	08013fa0 	.word	0x08013fa0
 800c500:	08013fb0 	.word	0x08013fb0
        off -= p->len;
 800c504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c506:	895b      	ldrh	r3, [r3, #10]
 800c508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c514:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c516:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c51a:	2200      	movs	r2, #0
 800c51c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c526:	895b      	ldrh	r3, [r3, #10]
 800c528:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d8e9      	bhi.n	800c504 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c530:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c534:	4619      	mov	r1, r3
 800c536:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c538:	f7fc fae8 	bl	8008b0c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c540:	4a90      	ldr	r2, [pc, #576]	@ (800c784 <tcp_receive+0x884>)
 800c542:	6013      	str	r3, [r2, #0]
 800c544:	4b90      	ldr	r3, [pc, #576]	@ (800c788 <tcp_receive+0x888>)
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	4a8e      	ldr	r2, [pc, #568]	@ (800c784 <tcp_receive+0x884>)
 800c54a:	6812      	ldr	r2, [r2, #0]
 800c54c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c54e:	e00d      	b.n	800c56c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c550:	4b8c      	ldr	r3, [pc, #560]	@ (800c784 <tcp_receive+0x884>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	da06      	bge.n	800c56c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	8b5b      	ldrh	r3, [r3, #26]
 800c562:	f043 0302 	orr.w	r3, r3, #2
 800c566:	b29a      	uxth	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c56c:	4b85      	ldr	r3, [pc, #532]	@ (800c784 <tcp_receive+0x884>)
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b00      	cmp	r3, #0
 800c578:	f2c0 8427 	blt.w	800cdca <tcp_receive+0xeca>
 800c57c:	4b81      	ldr	r3, [pc, #516]	@ (800c784 <tcp_receive+0x884>)
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c588:	440b      	add	r3, r1
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	3301      	adds	r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f300 841b 	bgt.w	800cdca <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c598:	4b7a      	ldr	r3, [pc, #488]	@ (800c784 <tcp_receive+0x884>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	f040 8298 	bne.w	800cad2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c5a2:	4b79      	ldr	r3, [pc, #484]	@ (800c788 <tcp_receive+0x888>)
 800c5a4:	891c      	ldrh	r4, [r3, #8]
 800c5a6:	4b78      	ldr	r3, [pc, #480]	@ (800c788 <tcp_receive+0x888>)
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	899b      	ldrh	r3, [r3, #12]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fa fff4 	bl	800759c <lwip_htons>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	f003 0303 	and.w	r3, r3, #3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <tcp_receive+0x6c4>
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e000      	b.n	800c5c6 <tcp_receive+0x6c6>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4423      	add	r3, r4
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	4b70      	ldr	r3, [pc, #448]	@ (800c78c <tcp_receive+0x88c>)
 800c5cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c5d2:	4b6e      	ldr	r3, [pc, #440]	@ (800c78c <tcp_receive+0x88c>)
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d274      	bcs.n	800c6c4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5da:	4b6b      	ldr	r3, [pc, #428]	@ (800c788 <tcp_receive+0x888>)
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	899b      	ldrh	r3, [r3, #12]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fa ffda 	bl	800759c <lwip_htons>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01e      	beq.n	800c632 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c5f4:	4b64      	ldr	r3, [pc, #400]	@ (800c788 <tcp_receive+0x888>)
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	899b      	ldrh	r3, [r3, #12]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	b21b      	sxth	r3, r3
 800c5fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c602:	b21c      	sxth	r4, r3
 800c604:	4b60      	ldr	r3, [pc, #384]	@ (800c788 <tcp_receive+0x888>)
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	899b      	ldrh	r3, [r3, #12]
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fa ffc5 	bl	800759c <lwip_htons>
 800c612:	4603      	mov	r3, r0
 800c614:	b2db      	uxtb	r3, r3
 800c616:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fa ffbd 	bl	800759c <lwip_htons>
 800c622:	4603      	mov	r3, r0
 800c624:	b21b      	sxth	r3, r3
 800c626:	4323      	orrs	r3, r4
 800c628:	b21a      	sxth	r2, r3
 800c62a:	4b57      	ldr	r3, [pc, #348]	@ (800c788 <tcp_receive+0x888>)
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	b292      	uxth	r2, r2
 800c630:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c636:	4b54      	ldr	r3, [pc, #336]	@ (800c788 <tcp_receive+0x888>)
 800c638:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c63a:	4b53      	ldr	r3, [pc, #332]	@ (800c788 <tcp_receive+0x888>)
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	899b      	ldrh	r3, [r3, #12]
 800c640:	b29b      	uxth	r3, r3
 800c642:	4618      	mov	r0, r3
 800c644:	f7fa ffaa 	bl	800759c <lwip_htons>
 800c648:	4603      	mov	r3, r0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <tcp_receive+0x760>
            inseg.len -= 1;
 800c654:	4b4c      	ldr	r3, [pc, #304]	@ (800c788 <tcp_receive+0x888>)
 800c656:	891b      	ldrh	r3, [r3, #8]
 800c658:	3b01      	subs	r3, #1
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	4b4a      	ldr	r3, [pc, #296]	@ (800c788 <tcp_receive+0x888>)
 800c65e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c660:	4b49      	ldr	r3, [pc, #292]	@ (800c788 <tcp_receive+0x888>)
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	4a48      	ldr	r2, [pc, #288]	@ (800c788 <tcp_receive+0x888>)
 800c666:	8912      	ldrh	r2, [r2, #8]
 800c668:	4611      	mov	r1, r2
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fc f94e 	bl	800890c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c670:	4b45      	ldr	r3, [pc, #276]	@ (800c788 <tcp_receive+0x888>)
 800c672:	891c      	ldrh	r4, [r3, #8]
 800c674:	4b44      	ldr	r3, [pc, #272]	@ (800c788 <tcp_receive+0x888>)
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	899b      	ldrh	r3, [r3, #12]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fa ff8d 	bl	800759c <lwip_htons>
 800c682:	4603      	mov	r3, r0
 800c684:	b2db      	uxtb	r3, r3
 800c686:	f003 0303 	and.w	r3, r3, #3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <tcp_receive+0x792>
 800c68e:	2301      	movs	r3, #1
 800c690:	e000      	b.n	800c694 <tcp_receive+0x794>
 800c692:	2300      	movs	r3, #0
 800c694:	4423      	add	r3, r4
 800c696:	b29a      	uxth	r2, r3
 800c698:	4b3c      	ldr	r3, [pc, #240]	@ (800c78c <tcp_receive+0x88c>)
 800c69a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c69c:	4b3b      	ldr	r3, [pc, #236]	@ (800c78c <tcp_receive+0x88c>)
 800c69e:	881b      	ldrh	r3, [r3, #0]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	4b38      	ldr	r3, [pc, #224]	@ (800c784 <tcp_receive+0x884>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	441a      	add	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ac:	6879      	ldr	r1, [r7, #4]
 800c6ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c6b0:	440b      	add	r3, r1
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d006      	beq.n	800c6c4 <tcp_receive+0x7c4>
 800c6b6:	4b36      	ldr	r3, [pc, #216]	@ (800c790 <tcp_receive+0x890>)
 800c6b8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c6bc:	4935      	ldr	r1, [pc, #212]	@ (800c794 <tcp_receive+0x894>)
 800c6be:	4836      	ldr	r0, [pc, #216]	@ (800c798 <tcp_receive+0x898>)
 800c6c0:	f005 fa02 	bl	8011ac8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 80e6 	beq.w	800c89a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c6ce:	4b2e      	ldr	r3, [pc, #184]	@ (800c788 <tcp_receive+0x888>)
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	899b      	ldrh	r3, [r3, #12]
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7fa ff60 	bl	800759c <lwip_htons>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d010      	beq.n	800c70a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c6e8:	e00a      	b.n	800c700 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6ee:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7fd fd93 	bl	800a226 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1f0      	bne.n	800c6ea <tcp_receive+0x7ea>
 800c708:	e0c7      	b.n	800c89a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c710:	e051      	b.n	800c7b6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	899b      	ldrh	r3, [r3, #12]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fa ff3e 	bl	800759c <lwip_htons>
 800c720:	4603      	mov	r3, r0
 800c722:	b2db      	uxtb	r3, r3
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d03c      	beq.n	800c7a6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c72c:	4b16      	ldr	r3, [pc, #88]	@ (800c788 <tcp_receive+0x888>)
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	899b      	ldrh	r3, [r3, #12]
 800c732:	b29b      	uxth	r3, r3
 800c734:	4618      	mov	r0, r3
 800c736:	f7fa ff31 	bl	800759c <lwip_htons>
 800c73a:	4603      	mov	r3, r0
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c742:	2b00      	cmp	r3, #0
 800c744:	d12f      	bne.n	800c7a6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c746:	4b10      	ldr	r3, [pc, #64]	@ (800c788 <tcp_receive+0x888>)
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	899b      	ldrh	r3, [r3, #12]
 800c74c:	b29c      	uxth	r4, r3
 800c74e:	2001      	movs	r0, #1
 800c750:	f7fa ff24 	bl	800759c <lwip_htons>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	4b0b      	ldr	r3, [pc, #44]	@ (800c788 <tcp_receive+0x888>)
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	4322      	orrs	r2, r4
 800c75e:	b292      	uxth	r2, r2
 800c760:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c762:	4b09      	ldr	r3, [pc, #36]	@ (800c788 <tcp_receive+0x888>)
 800c764:	891c      	ldrh	r4, [r3, #8]
 800c766:	4b08      	ldr	r3, [pc, #32]	@ (800c788 <tcp_receive+0x888>)
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	899b      	ldrh	r3, [r3, #12]
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fa ff14 	bl	800759c <lwip_htons>
 800c774:	4603      	mov	r3, r0
 800c776:	b2db      	uxtb	r3, r3
 800c778:	f003 0303 	and.w	r3, r3, #3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00d      	beq.n	800c79c <tcp_receive+0x89c>
 800c780:	2301      	movs	r3, #1
 800c782:	e00c      	b.n	800c79e <tcp_receive+0x89e>
 800c784:	20008918 	.word	0x20008918
 800c788:	200088f8 	.word	0x200088f8
 800c78c:	20008922 	.word	0x20008922
 800c790:	08013c18 	.word	0x08013c18
 800c794:	08013fc0 	.word	0x08013fc0
 800c798:	08013c64 	.word	0x08013c64
 800c79c:	2300      	movs	r3, #0
 800c79e:	4423      	add	r3, r4
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	4b98      	ldr	r3, [pc, #608]	@ (800ca04 <tcp_receive+0xb04>)
 800c7a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c7b0:	6938      	ldr	r0, [r7, #16]
 800c7b2:	f7fd fd38 	bl	800a226 <tcp_seg_free>
            while (next &&
 800c7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00e      	beq.n	800c7da <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c7bc:	4b91      	ldr	r3, [pc, #580]	@ (800ca04 <tcp_receive+0xb04>)
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b91      	ldr	r3, [pc, #580]	@ (800ca08 <tcp_receive+0xb08>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	441a      	add	r2, r3
 800c7c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c7d0:	8909      	ldrh	r1, [r1, #8]
 800c7d2:	440b      	add	r3, r1
 800c7d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	da9b      	bge.n	800c712 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d059      	beq.n	800c894 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c7e0:	4b88      	ldr	r3, [pc, #544]	@ (800ca04 <tcp_receive+0xb04>)
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	4b88      	ldr	r3, [pc, #544]	@ (800ca08 <tcp_receive+0xb08>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	441a      	add	r2, r3
 800c7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dd4d      	ble.n	800c894 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c7f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	4b81      	ldr	r3, [pc, #516]	@ (800ca08 <tcp_receive+0xb08>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	b29b      	uxth	r3, r3
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	b29a      	uxth	r2, r3
 800c80a:	4b80      	ldr	r3, [pc, #512]	@ (800ca0c <tcp_receive+0xb0c>)
 800c80c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c80e:	4b7f      	ldr	r3, [pc, #508]	@ (800ca0c <tcp_receive+0xb0c>)
 800c810:	68db      	ldr	r3, [r3, #12]
 800c812:	899b      	ldrh	r3, [r3, #12]
 800c814:	b29b      	uxth	r3, r3
 800c816:	4618      	mov	r0, r3
 800c818:	f7fa fec0 	bl	800759c <lwip_htons>
 800c81c:	4603      	mov	r3, r0
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	f003 0302 	and.w	r3, r3, #2
 800c824:	2b00      	cmp	r3, #0
 800c826:	d005      	beq.n	800c834 <tcp_receive+0x934>
                inseg.len -= 1;
 800c828:	4b78      	ldr	r3, [pc, #480]	@ (800ca0c <tcp_receive+0xb0c>)
 800c82a:	891b      	ldrh	r3, [r3, #8]
 800c82c:	3b01      	subs	r3, #1
 800c82e:	b29a      	uxth	r2, r3
 800c830:	4b76      	ldr	r3, [pc, #472]	@ (800ca0c <tcp_receive+0xb0c>)
 800c832:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c834:	4b75      	ldr	r3, [pc, #468]	@ (800ca0c <tcp_receive+0xb0c>)
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	4a74      	ldr	r2, [pc, #464]	@ (800ca0c <tcp_receive+0xb0c>)
 800c83a:	8912      	ldrh	r2, [r2, #8]
 800c83c:	4611      	mov	r1, r2
 800c83e:	4618      	mov	r0, r3
 800c840:	f7fc f864 	bl	800890c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c844:	4b71      	ldr	r3, [pc, #452]	@ (800ca0c <tcp_receive+0xb0c>)
 800c846:	891c      	ldrh	r4, [r3, #8]
 800c848:	4b70      	ldr	r3, [pc, #448]	@ (800ca0c <tcp_receive+0xb0c>)
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	899b      	ldrh	r3, [r3, #12]
 800c84e:	b29b      	uxth	r3, r3
 800c850:	4618      	mov	r0, r3
 800c852:	f7fa fea3 	bl	800759c <lwip_htons>
 800c856:	4603      	mov	r3, r0
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	f003 0303 	and.w	r3, r3, #3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <tcp_receive+0x966>
 800c862:	2301      	movs	r3, #1
 800c864:	e000      	b.n	800c868 <tcp_receive+0x968>
 800c866:	2300      	movs	r3, #0
 800c868:	4423      	add	r3, r4
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	4b65      	ldr	r3, [pc, #404]	@ (800ca04 <tcp_receive+0xb04>)
 800c86e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c870:	4b64      	ldr	r3, [pc, #400]	@ (800ca04 <tcp_receive+0xb04>)
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	461a      	mov	r2, r3
 800c876:	4b64      	ldr	r3, [pc, #400]	@ (800ca08 <tcp_receive+0xb08>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	441a      	add	r2, r3
 800c87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	429a      	cmp	r2, r3
 800c884:	d006      	beq.n	800c894 <tcp_receive+0x994>
 800c886:	4b62      	ldr	r3, [pc, #392]	@ (800ca10 <tcp_receive+0xb10>)
 800c888:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c88c:	4961      	ldr	r1, [pc, #388]	@ (800ca14 <tcp_receive+0xb14>)
 800c88e:	4862      	ldr	r0, [pc, #392]	@ (800ca18 <tcp_receive+0xb18>)
 800c890:	f005 f91a 	bl	8011ac8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c898:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c89a:	4b5a      	ldr	r3, [pc, #360]	@ (800ca04 <tcp_receive+0xb04>)
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4b59      	ldr	r3, [pc, #356]	@ (800ca08 <tcp_receive+0xb08>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	441a      	add	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c8ae:	4b55      	ldr	r3, [pc, #340]	@ (800ca04 <tcp_receive+0xb04>)
 800c8b0:	881b      	ldrh	r3, [r3, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d206      	bcs.n	800c8c4 <tcp_receive+0x9c4>
 800c8b6:	4b56      	ldr	r3, [pc, #344]	@ (800ca10 <tcp_receive+0xb10>)
 800c8b8:	f240 6207 	movw	r2, #1543	@ 0x607
 800c8bc:	4957      	ldr	r1, [pc, #348]	@ (800ca1c <tcp_receive+0xb1c>)
 800c8be:	4856      	ldr	r0, [pc, #344]	@ (800ca18 <tcp_receive+0xb18>)
 800c8c0:	f005 f902 	bl	8011ac8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c8c8:	4b4e      	ldr	r3, [pc, #312]	@ (800ca04 <tcp_receive+0xb04>)
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7fc ffc5 	bl	8009864 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c8da:	4b4c      	ldr	r3, [pc, #304]	@ (800ca0c <tcp_receive+0xb0c>)
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	891b      	ldrh	r3, [r3, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c8e4:	4b49      	ldr	r3, [pc, #292]	@ (800ca0c <tcp_receive+0xb0c>)
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	4a4d      	ldr	r2, [pc, #308]	@ (800ca20 <tcp_receive+0xb20>)
 800c8ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c8ec:	4b47      	ldr	r3, [pc, #284]	@ (800ca0c <tcp_receive+0xb0c>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c8f2:	4b46      	ldr	r3, [pc, #280]	@ (800ca0c <tcp_receive+0xb0c>)
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	899b      	ldrh	r3, [r3, #12]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fa fe4e 	bl	800759c <lwip_htons>
 800c900:	4603      	mov	r3, r0
 800c902:	b2db      	uxtb	r3, r3
 800c904:	f003 0301 	and.w	r3, r3, #1
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 80b8 	beq.w	800ca7e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c90e:	4b45      	ldr	r3, [pc, #276]	@ (800ca24 <tcp_receive+0xb24>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	f043 0320 	orr.w	r3, r3, #32
 800c916:	b2da      	uxtb	r2, r3
 800c918:	4b42      	ldr	r3, [pc, #264]	@ (800ca24 <tcp_receive+0xb24>)
 800c91a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c91c:	e0af      	b.n	800ca7e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c922:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	4a36      	ldr	r2, [pc, #216]	@ (800ca08 <tcp_receive+0xb08>)
 800c92e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	891b      	ldrh	r3, [r3, #8]
 800c934:	461c      	mov	r4, r3
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	899b      	ldrh	r3, [r3, #12]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fa fe2c 	bl	800759c <lwip_htons>
 800c944:	4603      	mov	r3, r0
 800c946:	b2db      	uxtb	r3, r3
 800c948:	f003 0303 	and.w	r3, r3, #3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <tcp_receive+0xa54>
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <tcp_receive+0xa56>
 800c954:	2300      	movs	r3, #0
 800c956:	191a      	adds	r2, r3, r4
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c95c:	441a      	add	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c966:	461c      	mov	r4, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	891b      	ldrh	r3, [r3, #8]
 800c96c:	461d      	mov	r5, r3
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	899b      	ldrh	r3, [r3, #12]
 800c974:	b29b      	uxth	r3, r3
 800c976:	4618      	mov	r0, r3
 800c978:	f7fa fe10 	bl	800759c <lwip_htons>
 800c97c:	4603      	mov	r3, r0
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	f003 0303 	and.w	r3, r3, #3
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <tcp_receive+0xa8c>
 800c988:	2301      	movs	r3, #1
 800c98a:	e000      	b.n	800c98e <tcp_receive+0xa8e>
 800c98c:	2300      	movs	r3, #0
 800c98e:	442b      	add	r3, r5
 800c990:	429c      	cmp	r4, r3
 800c992:	d206      	bcs.n	800c9a2 <tcp_receive+0xaa2>
 800c994:	4b1e      	ldr	r3, [pc, #120]	@ (800ca10 <tcp_receive+0xb10>)
 800c996:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c99a:	4923      	ldr	r1, [pc, #140]	@ (800ca28 <tcp_receive+0xb28>)
 800c99c:	481e      	ldr	r0, [pc, #120]	@ (800ca18 <tcp_receive+0xb18>)
 800c99e:	f005 f893 	bl	8011ac8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	891b      	ldrh	r3, [r3, #8]
 800c9a6:	461c      	mov	r4, r3
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	899b      	ldrh	r3, [r3, #12]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fa fdf3 	bl	800759c <lwip_htons>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	f003 0303 	and.w	r3, r3, #3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <tcp_receive+0xac6>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e000      	b.n	800c9c8 <tcp_receive+0xac8>
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	1919      	adds	r1, r3, r4
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c9ce:	b28b      	uxth	r3, r1
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fc ff43 	bl	8009864 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	891b      	ldrh	r3, [r3, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d028      	beq.n	800ca3a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c9e8:	4b0d      	ldr	r3, [pc, #52]	@ (800ca20 <tcp_receive+0xb20>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01d      	beq.n	800ca2c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca20 <tcp_receive+0xb20>)
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	4610      	mov	r0, r2
 800c9fc:	f7fc f9ce 	bl	8008d9c <pbuf_cat>
 800ca00:	e018      	b.n	800ca34 <tcp_receive+0xb34>
 800ca02:	bf00      	nop
 800ca04:	20008922 	.word	0x20008922
 800ca08:	20008918 	.word	0x20008918
 800ca0c:	200088f8 	.word	0x200088f8
 800ca10:	08013c18 	.word	0x08013c18
 800ca14:	08013ff8 	.word	0x08013ff8
 800ca18:	08013c64 	.word	0x08013c64
 800ca1c:	08014034 	.word	0x08014034
 800ca20:	20008928 	.word	0x20008928
 800ca24:	20008925 	.word	0x20008925
 800ca28:	08014054 	.word	0x08014054
            } else {
              recv_data = cseg->p;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	4a70      	ldr	r2, [pc, #448]	@ (800cbf4 <tcp_receive+0xcf4>)
 800ca32:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	2200      	movs	r2, #0
 800ca38:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	899b      	ldrh	r3, [r3, #12]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fa fdaa 	bl	800759c <lwip_htons>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d00d      	beq.n	800ca70 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ca54:	4b68      	ldr	r3, [pc, #416]	@ (800cbf8 <tcp_receive+0xcf8>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	f043 0320 	orr.w	r3, r3, #32
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	4b66      	ldr	r3, [pc, #408]	@ (800cbf8 <tcp_receive+0xcf8>)
 800ca60:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	7d1b      	ldrb	r3, [r3, #20]
 800ca66:	2b04      	cmp	r3, #4
 800ca68:	d102      	bne.n	800ca70 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2207      	movs	r2, #7
 800ca6e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ca78:	68b8      	ldr	r0, [r7, #8]
 800ca7a:	f7fd fbd4 	bl	800a226 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d008      	beq.n	800ca98 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800ca92:	429a      	cmp	r2, r3
 800ca94:	f43f af43 	beq.w	800c91e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	8b5b      	ldrh	r3, [r3, #26]
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d00e      	beq.n	800cac2 <tcp_receive+0xbc2>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	8b5b      	ldrh	r3, [r3, #26]
 800caa8:	f023 0301 	bic.w	r3, r3, #1
 800caac:	b29a      	uxth	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	835a      	strh	r2, [r3, #26]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	8b5b      	ldrh	r3, [r3, #26]
 800cab6:	f043 0302 	orr.w	r3, r3, #2
 800caba:	b29a      	uxth	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cac0:	e187      	b.n	800cdd2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	8b5b      	ldrh	r3, [r3, #26]
 800cac6:	f043 0301 	orr.w	r3, r3, #1
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800cad0:	e17f      	b.n	800cdd2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d106      	bne.n	800cae8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cada:	4848      	ldr	r0, [pc, #288]	@ (800cbfc <tcp_receive+0xcfc>)
 800cadc:	f7fd fbbc 	bl	800a258 <tcp_seg_copy>
 800cae0:	4602      	mov	r2, r0
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	675a      	str	r2, [r3, #116]	@ 0x74
 800cae6:	e16c      	b.n	800cdc2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cae8:	2300      	movs	r3, #0
 800caea:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caf2:	e156      	b.n	800cda2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800caf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	4b41      	ldr	r3, [pc, #260]	@ (800cc00 <tcp_receive+0xd00>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d11d      	bne.n	800cb3e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cb02:	4b3e      	ldr	r3, [pc, #248]	@ (800cbfc <tcp_receive+0xcfc>)
 800cb04:	891a      	ldrh	r2, [r3, #8]
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	891b      	ldrh	r3, [r3, #8]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	f240 814e 	bls.w	800cdac <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cb10:	483a      	ldr	r0, [pc, #232]	@ (800cbfc <tcp_receive+0xcfc>)
 800cb12:	f7fd fba1 	bl	800a258 <tcp_seg_copy>
 800cb16:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cb18:	697b      	ldr	r3, [r7, #20]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 8148 	beq.w	800cdb0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800cb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800cb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb28:	697a      	ldr	r2, [r7, #20]
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	e002      	b.n	800cb34 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	697a      	ldr	r2, [r7, #20]
 800cb32:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cb34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb36:	6978      	ldr	r0, [r7, #20]
 800cb38:	f7ff f8de 	bl	800bcf8 <tcp_oos_insert_segment>
                }
                break;
 800cb3c:	e138      	b.n	800cdb0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cb3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d117      	bne.n	800cb74 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cb44:	4b2e      	ldr	r3, [pc, #184]	@ (800cc00 <tcp_receive+0xd00>)
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	da57      	bge.n	800cc04 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cb54:	4829      	ldr	r0, [pc, #164]	@ (800cbfc <tcp_receive+0xcfc>)
 800cb56:	f7fd fb7f 	bl	800a258 <tcp_seg_copy>
 800cb5a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 8128 	beq.w	800cdb4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	69ba      	ldr	r2, [r7, #24]
 800cb68:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cb6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb6c:	69b8      	ldr	r0, [r7, #24]
 800cb6e:	f7ff f8c3 	bl	800bcf8 <tcp_oos_insert_segment>
                  }
                  break;
 800cb72:	e11f      	b.n	800cdb4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cb74:	4b22      	ldr	r3, [pc, #136]	@ (800cc00 <tcp_receive+0xd00>)
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	3b01      	subs	r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	db3e      	blt.n	800cc04 <tcp_receive+0xd04>
 800cb86:	4b1e      	ldr	r3, [pc, #120]	@ (800cc00 <tcp_receive+0xd00>)
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	3301      	adds	r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dc35      	bgt.n	800cc04 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cb98:	4818      	ldr	r0, [pc, #96]	@ (800cbfc <tcp_receive+0xcfc>)
 800cb9a:	f7fd fb5d 	bl	800a258 <tcp_seg_copy>
 800cb9e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f000 8108 	beq.w	800cdb8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbb0:	8912      	ldrh	r2, [r2, #8]
 800cbb2:	441a      	add	r2, r3
 800cbb4:	4b12      	ldr	r3, [pc, #72]	@ (800cc00 <tcp_receive+0xd00>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	dd12      	ble.n	800cbe4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cbbe:	4b10      	ldr	r3, [pc, #64]	@ (800cc00 <tcp_receive+0xd00>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbda:	891b      	ldrh	r3, [r3, #8]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	4610      	mov	r0, r2
 800cbe0:	f7fb fe94 	bl	800890c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbe6:	69fa      	ldr	r2, [r7, #28]
 800cbe8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cbea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cbec:	69f8      	ldr	r0, [r7, #28]
 800cbee:	f7ff f883 	bl	800bcf8 <tcp_oos_insert_segment>
                  }
                  break;
 800cbf2:	e0e1      	b.n	800cdb8 <tcp_receive+0xeb8>
 800cbf4:	20008928 	.word	0x20008928
 800cbf8:	20008925 	.word	0x20008925
 800cbfc:	200088f8 	.word	0x200088f8
 800cc00:	20008918 	.word	0x20008918
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc06:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 80c5 	bne.w	800cd9c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cc12:	4b7f      	ldr	r3, [pc, #508]	@ (800ce10 <tcp_receive+0xf10>)
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f340 80bc 	ble.w	800cd9c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	899b      	ldrh	r3, [r3, #12]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fa fcb5 	bl	800759c <lwip_htons>
 800cc32:	4603      	mov	r3, r0
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f040 80be 	bne.w	800cdbc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cc40:	4874      	ldr	r0, [pc, #464]	@ (800ce14 <tcp_receive+0xf14>)
 800cc42:	f7fd fb09 	bl	800a258 <tcp_seg_copy>
 800cc46:	4602      	mov	r2, r0
 800cc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 80b5 	beq.w	800cdc0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc5e:	8912      	ldrh	r2, [r2, #8]
 800cc60:	441a      	add	r2, r3
 800cc62:	4b6b      	ldr	r3, [pc, #428]	@ (800ce10 <tcp_receive+0xf10>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dd12      	ble.n	800cc92 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cc6c:	4b68      	ldr	r3, [pc, #416]	@ (800ce10 <tcp_receive+0xf10>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc80:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc88:	891b      	ldrh	r3, [r3, #8]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	f7fb fe3d 	bl	800890c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cc92:	4b61      	ldr	r3, [pc, #388]	@ (800ce18 <tcp_receive+0xf18>)
 800cc94:	881b      	ldrh	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	4b5d      	ldr	r3, [pc, #372]	@ (800ce10 <tcp_receive+0xf10>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	441a      	add	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cca6:	440b      	add	r3, r1
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f340 8088 	ble.w	800cdc0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	899b      	ldrh	r3, [r3, #12]
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fa fc6e 	bl	800759c <lwip_htons>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d021      	beq.n	800cd10 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	899b      	ldrh	r3, [r3, #12]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	b21b      	sxth	r3, r3
 800ccd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ccdc:	b21c      	sxth	r4, r3
 800ccde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	899b      	ldrh	r3, [r3, #12]
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fa fc57 	bl	800759c <lwip_htons>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7fa fc4f 	bl	800759c <lwip_htons>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	b21b      	sxth	r3, r3
 800cd02:	4323      	orrs	r3, r4
 800cd04:	b21a      	sxth	r2, r3
 800cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	b292      	uxth	r2, r2
 800cd0e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd1a:	4413      	add	r3, r2
 800cd1c:	b299      	uxth	r1, r3
 800cd1e:	4b3c      	ldr	r3, [pc, #240]	@ (800ce10 <tcp_receive+0xf10>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	1a8a      	subs	r2, r1, r2
 800cd2a:	b292      	uxth	r2, r2
 800cd2c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	891b      	ldrh	r3, [r3, #8]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f7fb fde5 	bl	800890c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	891c      	ldrh	r4, [r3, #8]
 800cd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	899b      	ldrh	r3, [r3, #12]
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fa fc22 	bl	800759c <lwip_htons>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	f003 0303 	and.w	r3, r3, #3
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <tcp_receive+0xe68>
 800cd64:	2301      	movs	r3, #1
 800cd66:	e000      	b.n	800cd6a <tcp_receive+0xe6a>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4423      	add	r3, r4
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ce18 <tcp_receive+0xf18>)
 800cd70:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd72:	4b29      	ldr	r3, [pc, #164]	@ (800ce18 <tcp_receive+0xf18>)
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	4b25      	ldr	r3, [pc, #148]	@ (800ce10 <tcp_receive+0xf10>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	441a      	add	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd82:	6879      	ldr	r1, [r7, #4]
 800cd84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd86:	440b      	add	r3, r1
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d019      	beq.n	800cdc0 <tcp_receive+0xec0>
 800cd8c:	4b23      	ldr	r3, [pc, #140]	@ (800ce1c <tcp_receive+0xf1c>)
 800cd8e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800cd92:	4923      	ldr	r1, [pc, #140]	@ (800ce20 <tcp_receive+0xf20>)
 800cd94:	4823      	ldr	r0, [pc, #140]	@ (800ce24 <tcp_receive+0xf24>)
 800cd96:	f004 fe97 	bl	8011ac8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cd9a:	e011      	b.n	800cdc0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f47f aea5 	bne.w	800caf4 <tcp_receive+0xbf4>
 800cdaa:	e00a      	b.n	800cdc2 <tcp_receive+0xec2>
                break;
 800cdac:	bf00      	nop
 800cdae:	e008      	b.n	800cdc2 <tcp_receive+0xec2>
                break;
 800cdb0:	bf00      	nop
 800cdb2:	e006      	b.n	800cdc2 <tcp_receive+0xec2>
                  break;
 800cdb4:	bf00      	nop
 800cdb6:	e004      	b.n	800cdc2 <tcp_receive+0xec2>
                  break;
 800cdb8:	bf00      	nop
 800cdba:	e002      	b.n	800cdc2 <tcp_receive+0xec2>
                  break;
 800cdbc:	bf00      	nop
 800cdbe:	e000      	b.n	800cdc2 <tcp_receive+0xec2>
                break;
 800cdc0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f001 fe88 	bl	800ead8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cdc8:	e003      	b.n	800cdd2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f001 fe84 	bl	800ead8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cdd0:	e01a      	b.n	800ce08 <tcp_receive+0xf08>
 800cdd2:	e019      	b.n	800ce08 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cdd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ce10 <tcp_receive+0xf10>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	db0a      	blt.n	800cdf8 <tcp_receive+0xef8>
 800cde2:	4b0b      	ldr	r3, [pc, #44]	@ (800ce10 <tcp_receive+0xf10>)
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cdee:	440b      	add	r3, r1
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	dd07      	ble.n	800ce08 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	8b5b      	ldrh	r3, [r3, #26]
 800cdfc:	f043 0302 	orr.w	r3, r3, #2
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ce06:	e7ff      	b.n	800ce08 <tcp_receive+0xf08>
 800ce08:	bf00      	nop
 800ce0a:	3750      	adds	r7, #80	@ 0x50
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce10:	20008918 	.word	0x20008918
 800ce14:	200088f8 	.word	0x200088f8
 800ce18:	20008922 	.word	0x20008922
 800ce1c:	08013c18 	.word	0x08013c18
 800ce20:	08013fc0 	.word	0x08013fc0
 800ce24:	08013c64 	.word	0x08013c64

0800ce28 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ce2e:	4b15      	ldr	r3, [pc, #84]	@ (800ce84 <tcp_get_next_optbyte+0x5c>)
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	b291      	uxth	r1, r2
 800ce36:	4a13      	ldr	r2, [pc, #76]	@ (800ce84 <tcp_get_next_optbyte+0x5c>)
 800ce38:	8011      	strh	r1, [r2, #0]
 800ce3a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce3c:	4b12      	ldr	r3, [pc, #72]	@ (800ce88 <tcp_get_next_optbyte+0x60>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d004      	beq.n	800ce4e <tcp_get_next_optbyte+0x26>
 800ce44:	4b11      	ldr	r3, [pc, #68]	@ (800ce8c <tcp_get_next_optbyte+0x64>)
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	88fa      	ldrh	r2, [r7, #6]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d208      	bcs.n	800ce60 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ce4e:	4b10      	ldr	r3, [pc, #64]	@ (800ce90 <tcp_get_next_optbyte+0x68>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3314      	adds	r3, #20
 800ce54:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ce56:	88fb      	ldrh	r3, [r7, #6]
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	e00b      	b.n	800ce78 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ce60:	88fb      	ldrh	r3, [r7, #6]
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <tcp_get_next_optbyte+0x64>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ce6e:	4b06      	ldr	r3, [pc, #24]	@ (800ce88 <tcp_get_next_optbyte+0x60>)
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	797b      	ldrb	r3, [r7, #5]
 800ce74:	4413      	add	r3, r2
 800ce76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	370c      	adds	r7, #12
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	20008914 	.word	0x20008914
 800ce88:	20008910 	.word	0x20008910
 800ce8c:	2000890e 	.word	0x2000890e
 800ce90:	20008908 	.word	0x20008908

0800ce94 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d106      	bne.n	800ceb0 <tcp_parseopt+0x1c>
 800cea2:	4b32      	ldr	r3, [pc, #200]	@ (800cf6c <tcp_parseopt+0xd8>)
 800cea4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cea8:	4931      	ldr	r1, [pc, #196]	@ (800cf70 <tcp_parseopt+0xdc>)
 800ceaa:	4832      	ldr	r0, [pc, #200]	@ (800cf74 <tcp_parseopt+0xe0>)
 800ceac:	f004 fe0c 	bl	8011ac8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ceb0:	4b31      	ldr	r3, [pc, #196]	@ (800cf78 <tcp_parseopt+0xe4>)
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d056      	beq.n	800cf66 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ceb8:	4b30      	ldr	r3, [pc, #192]	@ (800cf7c <tcp_parseopt+0xe8>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	801a      	strh	r2, [r3, #0]
 800cebe:	e046      	b.n	800cf4e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cec0:	f7ff ffb2 	bl	800ce28 <tcp_get_next_optbyte>
 800cec4:	4603      	mov	r3, r0
 800cec6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d006      	beq.n	800cedc <tcp_parseopt+0x48>
 800cece:	2b02      	cmp	r3, #2
 800ced0:	dc2a      	bgt.n	800cf28 <tcp_parseopt+0x94>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d042      	beq.n	800cf5c <tcp_parseopt+0xc8>
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d038      	beq.n	800cf4c <tcp_parseopt+0xb8>
 800ceda:	e025      	b.n	800cf28 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cedc:	f7ff ffa4 	bl	800ce28 <tcp_get_next_optbyte>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d13c      	bne.n	800cf60 <tcp_parseopt+0xcc>
 800cee6:	4b25      	ldr	r3, [pc, #148]	@ (800cf7c <tcp_parseopt+0xe8>)
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	3301      	adds	r3, #1
 800ceec:	4a22      	ldr	r2, [pc, #136]	@ (800cf78 <tcp_parseopt+0xe4>)
 800ceee:	8812      	ldrh	r2, [r2, #0]
 800cef0:	4293      	cmp	r3, r2
 800cef2:	da35      	bge.n	800cf60 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cef4:	f7ff ff98 	bl	800ce28 <tcp_get_next_optbyte>
 800cef8:	4603      	mov	r3, r0
 800cefa:	021b      	lsls	r3, r3, #8
 800cefc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cefe:	f7ff ff93 	bl	800ce28 <tcp_get_next_optbyte>
 800cf02:	4603      	mov	r3, r0
 800cf04:	461a      	mov	r2, r3
 800cf06:	89bb      	ldrh	r3, [r7, #12]
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cf0c:	89bb      	ldrh	r3, [r7, #12]
 800cf0e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cf12:	d804      	bhi.n	800cf1e <tcp_parseopt+0x8a>
 800cf14:	89bb      	ldrh	r3, [r7, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <tcp_parseopt+0x8a>
 800cf1a:	89ba      	ldrh	r2, [r7, #12]
 800cf1c:	e001      	b.n	800cf22 <tcp_parseopt+0x8e>
 800cf1e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800cf26:	e012      	b.n	800cf4e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cf28:	f7ff ff7e 	bl	800ce28 <tcp_get_next_optbyte>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cf30:	7afb      	ldrb	r3, [r7, #11]
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d916      	bls.n	800cf64 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cf36:	7afb      	ldrb	r3, [r7, #11]
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	4b10      	ldr	r3, [pc, #64]	@ (800cf7c <tcp_parseopt+0xe8>)
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	4413      	add	r3, r2
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	3b02      	subs	r3, #2
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	4b0d      	ldr	r3, [pc, #52]	@ (800cf7c <tcp_parseopt+0xe8>)
 800cf48:	801a      	strh	r2, [r3, #0]
 800cf4a:	e000      	b.n	800cf4e <tcp_parseopt+0xba>
          break;
 800cf4c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cf7c <tcp_parseopt+0xe8>)
 800cf50:	881a      	ldrh	r2, [r3, #0]
 800cf52:	4b09      	ldr	r3, [pc, #36]	@ (800cf78 <tcp_parseopt+0xe4>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d3b2      	bcc.n	800cec0 <tcp_parseopt+0x2c>
 800cf5a:	e004      	b.n	800cf66 <tcp_parseopt+0xd2>
          return;
 800cf5c:	bf00      	nop
 800cf5e:	e002      	b.n	800cf66 <tcp_parseopt+0xd2>
            return;
 800cf60:	bf00      	nop
 800cf62:	e000      	b.n	800cf66 <tcp_parseopt+0xd2>
            return;
 800cf64:	bf00      	nop
      }
    }
  }
}
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	08013c18 	.word	0x08013c18
 800cf70:	0801407c 	.word	0x0801407c
 800cf74:	08013c64 	.word	0x08013c64
 800cf78:	2000890c 	.word	0x2000890c
 800cf7c:	20008914 	.word	0x20008914

0800cf80 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cf84:	4b05      	ldr	r3, [pc, #20]	@ (800cf9c <tcp_trigger_input_pcb_close+0x1c>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	f043 0310 	orr.w	r3, r3, #16
 800cf8c:	b2da      	uxtb	r2, r3
 800cf8e:	4b03      	ldr	r3, [pc, #12]	@ (800cf9c <tcp_trigger_input_pcb_close+0x1c>)
 800cf90:	701a      	strb	r2, [r3, #0]
}
 800cf92:	bf00      	nop
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	20008925 	.word	0x20008925

0800cfa0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <tcp_route+0x28>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	7a1b      	ldrb	r3, [r3, #8]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d006      	beq.n	800cfc8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	7a1b      	ldrb	r3, [r3, #8]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fb faea 	bl	8008598 <netif_get_by_index>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	e003      	b.n	800cfd0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f003 fa91 	bl	80104f0 <ip4_route>
 800cfce:	4603      	mov	r3, r0
  }
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	603b      	str	r3, [r7, #0]
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d105      	bne.n	800cffa <tcp_create_segment+0x22>
 800cfee:	4b43      	ldr	r3, [pc, #268]	@ (800d0fc <tcp_create_segment+0x124>)
 800cff0:	22a3      	movs	r2, #163	@ 0xa3
 800cff2:	4943      	ldr	r1, [pc, #268]	@ (800d100 <tcp_create_segment+0x128>)
 800cff4:	4843      	ldr	r0, [pc, #268]	@ (800d104 <tcp_create_segment+0x12c>)
 800cff6:	f004 fd67 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d105      	bne.n	800d00c <tcp_create_segment+0x34>
 800d000:	4b3e      	ldr	r3, [pc, #248]	@ (800d0fc <tcp_create_segment+0x124>)
 800d002:	22a4      	movs	r2, #164	@ 0xa4
 800d004:	4940      	ldr	r1, [pc, #256]	@ (800d108 <tcp_create_segment+0x130>)
 800d006:	483f      	ldr	r0, [pc, #252]	@ (800d104 <tcp_create_segment+0x12c>)
 800d008:	f004 fd5e 	bl	8011ac8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d00c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	b2db      	uxtb	r3, r3
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d01a:	2003      	movs	r0, #3
 800d01c:	f7fa ff36 	bl	8007e8c <memp_malloc>
 800d020:	6138      	str	r0, [r7, #16]
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d104      	bne.n	800d032 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d028:	68b8      	ldr	r0, [r7, #8]
 800d02a:	f7fb fdf5 	bl	8008c18 <pbuf_free>
    return NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	e060      	b.n	800d0f4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d038:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	891a      	ldrh	r2, [r3, #8]
 800d04a:	7dfb      	ldrb	r3, [r7, #23]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	429a      	cmp	r2, r3
 800d050:	d205      	bcs.n	800d05e <tcp_create_segment+0x86>
 800d052:	4b2a      	ldr	r3, [pc, #168]	@ (800d0fc <tcp_create_segment+0x124>)
 800d054:	22b0      	movs	r2, #176	@ 0xb0
 800d056:	492d      	ldr	r1, [pc, #180]	@ (800d10c <tcp_create_segment+0x134>)
 800d058:	482a      	ldr	r0, [pc, #168]	@ (800d104 <tcp_create_segment+0x12c>)
 800d05a:	f004 fd35 	bl	8011ac8 <iprintf>
  seg->len = p->tot_len - optlen;
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	891a      	ldrh	r2, [r3, #8]
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	b29b      	uxth	r3, r3
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	b29a      	uxth	r2, r3
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d06e:	2114      	movs	r1, #20
 800d070:	68b8      	ldr	r0, [r7, #8]
 800d072:	f7fb fd3b 	bl	8008aec <pbuf_add_header>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d004      	beq.n	800d086 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d07c:	6938      	ldr	r0, [r7, #16]
 800d07e:	f7fd f8d2 	bl	800a226 <tcp_seg_free>
    return NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	e036      	b.n	800d0f4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	8ada      	ldrh	r2, [r3, #22]
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	68dc      	ldr	r4, [r3, #12]
 800d098:	4610      	mov	r0, r2
 800d09a:	f7fa fa7f 	bl	800759c <lwip_htons>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	8b1a      	ldrh	r2, [r3, #24]
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	68dc      	ldr	r4, [r3, #12]
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f7fa fa76 	bl	800759c <lwip_htons>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	68dc      	ldr	r4, [r3, #12]
 800d0b8:	6838      	ldr	r0, [r7, #0]
 800d0ba:	f7fa fa84 	bl	80075c6 <lwip_htonl>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	089b      	lsrs	r3, r3, #2
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	3305      	adds	r3, #5
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	031b      	lsls	r3, r3, #12
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	68dc      	ldr	r4, [r3, #12]
 800d0dc:	4610      	mov	r0, r2
 800d0de:	f7fa fa5d 	bl	800759c <lwip_htons>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	749a      	strb	r2, [r3, #18]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	74da      	strb	r2, [r3, #19]
  return seg;
 800d0f2:	693b      	ldr	r3, [r7, #16]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	371c      	adds	r7, #28
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd90      	pop	{r4, r7, pc}
 800d0fc:	08014098 	.word	0x08014098
 800d100:	080140cc 	.word	0x080140cc
 800d104:	080140ec 	.word	0x080140ec
 800d108:	08014114 	.word	0x08014114
 800d10c:	08014138 	.word	0x08014138

0800d110 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	607b      	str	r3, [r7, #4]
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
 800d11c:	460b      	mov	r3, r1
 800d11e:	81bb      	strh	r3, [r7, #12]
 800d120:	4613      	mov	r3, r2
 800d122:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d124:	89bb      	ldrh	r3, [r7, #12]
 800d126:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d105      	bne.n	800d13a <tcp_pbuf_prealloc+0x2a>
 800d12e:	4b30      	ldr	r3, [pc, #192]	@ (800d1f0 <tcp_pbuf_prealloc+0xe0>)
 800d130:	22e8      	movs	r2, #232	@ 0xe8
 800d132:	4930      	ldr	r1, [pc, #192]	@ (800d1f4 <tcp_pbuf_prealloc+0xe4>)
 800d134:	4830      	ldr	r0, [pc, #192]	@ (800d1f8 <tcp_pbuf_prealloc+0xe8>)
 800d136:	f004 fcc7 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d105      	bne.n	800d14c <tcp_pbuf_prealloc+0x3c>
 800d140:	4b2b      	ldr	r3, [pc, #172]	@ (800d1f0 <tcp_pbuf_prealloc+0xe0>)
 800d142:	22e9      	movs	r2, #233	@ 0xe9
 800d144:	492d      	ldr	r1, [pc, #180]	@ (800d1fc <tcp_pbuf_prealloc+0xec>)
 800d146:	482c      	ldr	r0, [pc, #176]	@ (800d1f8 <tcp_pbuf_prealloc+0xe8>)
 800d148:	f004 fcbe 	bl	8011ac8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d14c:	89ba      	ldrh	r2, [r7, #12]
 800d14e:	897b      	ldrh	r3, [r7, #10]
 800d150:	429a      	cmp	r2, r3
 800d152:	d221      	bcs.n	800d198 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d154:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d158:	f003 0302 	and.w	r3, r3, #2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d111      	bne.n	800d184 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d160:	6a3b      	ldr	r3, [r7, #32]
 800d162:	8b5b      	ldrh	r3, [r3, #26]
 800d164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d115      	bne.n	800d198 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d16c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d170:	2b00      	cmp	r3, #0
 800d172:	d007      	beq.n	800d184 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d103      	bne.n	800d184 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d180:	2b00      	cmp	r3, #0
 800d182:	d009      	beq.n	800d198 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d184:	89bb      	ldrh	r3, [r7, #12]
 800d186:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800d18a:	f023 0203 	bic.w	r2, r3, #3
 800d18e:	897b      	ldrh	r3, [r7, #10]
 800d190:	4293      	cmp	r3, r2
 800d192:	bf28      	it	cs
 800d194:	4613      	movcs	r3, r2
 800d196:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d198:	8af9      	ldrh	r1, [r7, #22]
 800d19a:	7bfb      	ldrb	r3, [r7, #15]
 800d19c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fb fa55 	bl	8008650 <pbuf_alloc>
 800d1a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d101      	bne.n	800d1b2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e019      	b.n	800d1e6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d006      	beq.n	800d1c8 <tcp_pbuf_prealloc+0xb8>
 800d1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f0 <tcp_pbuf_prealloc+0xe0>)
 800d1bc:	f240 120b 	movw	r2, #267	@ 0x10b
 800d1c0:	490f      	ldr	r1, [pc, #60]	@ (800d200 <tcp_pbuf_prealloc+0xf0>)
 800d1c2:	480d      	ldr	r0, [pc, #52]	@ (800d1f8 <tcp_pbuf_prealloc+0xe8>)
 800d1c4:	f004 fc80 	bl	8011ac8 <iprintf>
  *oversize = p->len - length;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	895a      	ldrh	r2, [r3, #10]
 800d1cc:	89bb      	ldrh	r3, [r7, #12]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	89ba      	ldrh	r2, [r7, #12]
 800d1da:	811a      	strh	r2, [r3, #8]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	891a      	ldrh	r2, [r3, #8]
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	815a      	strh	r2, [r3, #10]
  return p;
 800d1e4:	693b      	ldr	r3, [r7, #16]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	08014098 	.word	0x08014098
 800d1f4:	08014150 	.word	0x08014150
 800d1f8:	080140ec 	.word	0x080140ec
 800d1fc:	08014174 	.word	0x08014174
 800d200:	08014194 	.word	0x08014194

0800d204 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d106      	bne.n	800d224 <tcp_write_checks+0x20>
 800d216:	4b33      	ldr	r3, [pc, #204]	@ (800d2e4 <tcp_write_checks+0xe0>)
 800d218:	f240 1233 	movw	r2, #307	@ 0x133
 800d21c:	4932      	ldr	r1, [pc, #200]	@ (800d2e8 <tcp_write_checks+0xe4>)
 800d21e:	4833      	ldr	r0, [pc, #204]	@ (800d2ec <tcp_write_checks+0xe8>)
 800d220:	f004 fc52 	bl	8011ac8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	7d1b      	ldrb	r3, [r3, #20]
 800d228:	2b04      	cmp	r3, #4
 800d22a:	d00e      	beq.n	800d24a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d230:	2b07      	cmp	r3, #7
 800d232:	d00a      	beq.n	800d24a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d238:	2b02      	cmp	r3, #2
 800d23a:	d006      	beq.n	800d24a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d240:	2b03      	cmp	r3, #3
 800d242:	d002      	beq.n	800d24a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d244:	f06f 030a 	mvn.w	r3, #10
 800d248:	e048      	b.n	800d2dc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d24a:	887b      	ldrh	r3, [r7, #2]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <tcp_write_checks+0x50>
    return ERR_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	e043      	b.n	800d2dc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d25a:	887a      	ldrh	r2, [r7, #2]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d909      	bls.n	800d274 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	8b5b      	ldrh	r3, [r3, #26]
 800d264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d268:	b29a      	uxth	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d26e:	f04f 33ff 	mov.w	r3, #4294967295
 800d272:	e033      	b.n	800d2dc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d27a:	2b08      	cmp	r3, #8
 800d27c:	d909      	bls.n	800d292 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	8b5b      	ldrh	r3, [r3, #26]
 800d282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d286:	b29a      	uxth	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d28c:	f04f 33ff 	mov.w	r3, #4294967295
 800d290:	e024      	b.n	800d2dc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00f      	beq.n	800d2bc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d11a      	bne.n	800d2da <tcp_write_checks+0xd6>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d116      	bne.n	800d2da <tcp_write_checks+0xd6>
 800d2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d2e4 <tcp_write_checks+0xe0>)
 800d2ae:	f240 1255 	movw	r2, #341	@ 0x155
 800d2b2:	490f      	ldr	r1, [pc, #60]	@ (800d2f0 <tcp_write_checks+0xec>)
 800d2b4:	480d      	ldr	r0, [pc, #52]	@ (800d2ec <tcp_write_checks+0xe8>)
 800d2b6:	f004 fc07 	bl	8011ac8 <iprintf>
 800d2ba:	e00e      	b.n	800d2da <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d103      	bne.n	800d2cc <tcp_write_checks+0xc8>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d006      	beq.n	800d2da <tcp_write_checks+0xd6>
 800d2cc:	4b05      	ldr	r3, [pc, #20]	@ (800d2e4 <tcp_write_checks+0xe0>)
 800d2ce:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d2d2:	4908      	ldr	r1, [pc, #32]	@ (800d2f4 <tcp_write_checks+0xf0>)
 800d2d4:	4805      	ldr	r0, [pc, #20]	@ (800d2ec <tcp_write_checks+0xe8>)
 800d2d6:	f004 fbf7 	bl	8011ac8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	08014098 	.word	0x08014098
 800d2e8:	080141a8 	.word	0x080141a8
 800d2ec:	080140ec 	.word	0x080140ec
 800d2f0:	080141c8 	.word	0x080141c8
 800d2f4:	08014204 	.word	0x08014204

0800d2f8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d2f8:	b590      	push	{r4, r7, lr}
 800d2fa:	b09b      	sub	sp, #108	@ 0x6c
 800d2fc:	af04      	add	r7, sp, #16
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	4611      	mov	r1, r2
 800d304:	461a      	mov	r2, r3
 800d306:	460b      	mov	r3, r1
 800d308:	80fb      	strh	r3, [r7, #6]
 800d30a:	4613      	mov	r3, r2
 800d30c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d312:	2300      	movs	r3, #0
 800d314:	653b      	str	r3, [r7, #80]	@ 0x50
 800d316:	2300      	movs	r3, #0
 800d318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d31a:	2300      	movs	r3, #0
 800d31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d31e:	2300      	movs	r3, #0
 800d320:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d322:	2300      	movs	r3, #0
 800d324:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d109      	bne.n	800d354 <tcp_write+0x5c>
 800d340:	4ba4      	ldr	r3, [pc, #656]	@ (800d5d4 <tcp_write+0x2dc>)
 800d342:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d346:	49a4      	ldr	r1, [pc, #656]	@ (800d5d8 <tcp_write+0x2e0>)
 800d348:	48a4      	ldr	r0, [pc, #656]	@ (800d5dc <tcp_write+0x2e4>)
 800d34a:	f004 fbbd 	bl	8011ac8 <iprintf>
 800d34e:	f06f 030f 	mvn.w	r3, #15
 800d352:	e32a      	b.n	800d9aa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d35a:	085b      	lsrs	r3, r3, #1
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d362:	4293      	cmp	r3, r2
 800d364:	bf28      	it	cs
 800d366:	4613      	movcs	r3, r2
 800d368:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d36a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d102      	bne.n	800d376 <tcp_write+0x7e>
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d374:	e000      	b.n	800d378 <tcp_write+0x80>
 800d376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d378:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d109      	bne.n	800d394 <tcp_write+0x9c>
 800d380:	4b94      	ldr	r3, [pc, #592]	@ (800d5d4 <tcp_write+0x2dc>)
 800d382:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d386:	4996      	ldr	r1, [pc, #600]	@ (800d5e0 <tcp_write+0x2e8>)
 800d388:	4894      	ldr	r0, [pc, #592]	@ (800d5dc <tcp_write+0x2e4>)
 800d38a:	f004 fb9d 	bl	8011ac8 <iprintf>
 800d38e:	f06f 030f 	mvn.w	r3, #15
 800d392:	e30a      	b.n	800d9aa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d394:	88fb      	ldrh	r3, [r7, #6]
 800d396:	4619      	mov	r1, r3
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f7ff ff33 	bl	800d204 <tcp_write_checks>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d3a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <tcp_write+0xba>
    return err;
 800d3ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d3b0:	e2fb      	b.n	800d9aa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d3b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d3bc:	2300      	movs	r3, #0
 800d3be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 80f6 	beq.w	800d5b8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3d2:	e002      	b.n	800d3da <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d3d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1f8      	bne.n	800d3d4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e4:	7a9b      	ldrb	r3, [r3, #10]
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	f003 0304 	and.w	r3, r3, #4
 800d3ee:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d3f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d3f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f4:	891b      	ldrh	r3, [r3, #8]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	8c3b      	ldrh	r3, [r7, #32]
 800d3fa:	440b      	add	r3, r1
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	da06      	bge.n	800d40e <tcp_write+0x116>
 800d400:	4b74      	ldr	r3, [pc, #464]	@ (800d5d4 <tcp_write+0x2dc>)
 800d402:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d406:	4977      	ldr	r1, [pc, #476]	@ (800d5e4 <tcp_write+0x2ec>)
 800d408:	4874      	ldr	r0, [pc, #464]	@ (800d5dc <tcp_write+0x2e4>)
 800d40a:	f004 fb5d 	bl	8011ac8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d40e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d410:	891a      	ldrh	r2, [r3, #8]
 800d412:	8c3b      	ldrh	r3, [r7, #32]
 800d414:	4413      	add	r3, r2
 800d416:	b29b      	uxth	r3, r3
 800d418:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d424:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d426:	8a7b      	ldrh	r3, [r7, #18]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d026      	beq.n	800d47a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d42c:	8a7b      	ldrh	r3, [r7, #18]
 800d42e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d430:	429a      	cmp	r2, r3
 800d432:	d206      	bcs.n	800d442 <tcp_write+0x14a>
 800d434:	4b67      	ldr	r3, [pc, #412]	@ (800d5d4 <tcp_write+0x2dc>)
 800d436:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d43a:	496b      	ldr	r1, [pc, #428]	@ (800d5e8 <tcp_write+0x2f0>)
 800d43c:	4867      	ldr	r0, [pc, #412]	@ (800d5dc <tcp_write+0x2e4>)
 800d43e:	f004 fb43 	bl	8011ac8 <iprintf>
      seg = last_unsent;
 800d442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d444:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d446:	8a7b      	ldrh	r3, [r7, #18]
 800d448:	88fa      	ldrh	r2, [r7, #6]
 800d44a:	4293      	cmp	r3, r2
 800d44c:	bf28      	it	cs
 800d44e:	4613      	movcs	r3, r2
 800d450:	b29b      	uxth	r3, r3
 800d452:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d454:	4293      	cmp	r3, r2
 800d456:	bf28      	it	cs
 800d458:	4613      	movcs	r3, r2
 800d45a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d45c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d460:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d462:	4413      	add	r3, r2
 800d464:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d468:	8a7a      	ldrh	r2, [r7, #18]
 800d46a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	b29b      	uxth	r3, r3
 800d470:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d472:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d474:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d47a:	8a7b      	ldrh	r3, [r7, #18]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d00b      	beq.n	800d498 <tcp_write+0x1a0>
 800d480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d484:	88fb      	ldrh	r3, [r7, #6]
 800d486:	429a      	cmp	r2, r3
 800d488:	d006      	beq.n	800d498 <tcp_write+0x1a0>
 800d48a:	4b52      	ldr	r3, [pc, #328]	@ (800d5d4 <tcp_write+0x2dc>)
 800d48c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d490:	4956      	ldr	r1, [pc, #344]	@ (800d5ec <tcp_write+0x2f4>)
 800d492:	4852      	ldr	r0, [pc, #328]	@ (800d5dc <tcp_write+0x2e4>)
 800d494:	f004 fb18 	bl	8011ac8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d498:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d49c:	88fb      	ldrh	r3, [r7, #6]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	f080 8167 	bcs.w	800d772 <tcp_write+0x47a>
 800d4a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 8163 	beq.w	800d772 <tcp_write+0x47a>
 800d4ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ae:	891b      	ldrh	r3, [r3, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 815e 	beq.w	800d772 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d4b6:	88fa      	ldrh	r2, [r7, #6]
 800d4b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d4bc:	1ad2      	subs	r2, r2, r3
 800d4be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	bfa8      	it	ge
 800d4c4:	4613      	movge	r3, r2
 800d4c6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d4cc:	797b      	ldrb	r3, [r7, #5]
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d027      	beq.n	800d526 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d4d6:	f107 0012 	add.w	r0, r7, #18
 800d4da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d4dc:	8bf9      	ldrh	r1, [r7, #30]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	797b      	ldrb	r3, [r7, #5]
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f7ff fe0f 	bl	800d110 <tcp_pbuf_prealloc>
 800d4f2:	6578      	str	r0, [r7, #84]	@ 0x54
 800d4f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f000 8225 	beq.w	800d946 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d4fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4fe:	6858      	ldr	r0, [r3, #4]
 800d500:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d504:	68ba      	ldr	r2, [r7, #8]
 800d506:	4413      	add	r3, r2
 800d508:	8bfa      	ldrh	r2, [r7, #30]
 800d50a:	4619      	mov	r1, r3
 800d50c:	f004 fca9 	bl	8011e62 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d510:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d512:	f7fb fc09 	bl	8008d28 <pbuf_clen>
 800d516:	4603      	mov	r3, r0
 800d518:	461a      	mov	r2, r3
 800d51a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d51e:	4413      	add	r3, r2
 800d520:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d524:	e041      	b.n	800d5aa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d52c:	e002      	b.n	800d534 <tcp_write+0x23c>
 800d52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	637b      	str	r3, [r7, #52]	@ 0x34
 800d534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1f8      	bne.n	800d52e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d53e:	7b1b      	ldrb	r3, [r3, #12]
 800d540:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d115      	bne.n	800d574 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d54e:	8952      	ldrh	r2, [r2, #10]
 800d550:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	429a      	cmp	r2, r3
 800d556:	d10d      	bne.n	800d574 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d558:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d006      	beq.n	800d56e <tcp_write+0x276>
 800d560:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d4 <tcp_write+0x2dc>)
 800d562:	f240 2231 	movw	r2, #561	@ 0x231
 800d566:	4922      	ldr	r1, [pc, #136]	@ (800d5f0 <tcp_write+0x2f8>)
 800d568:	481c      	ldr	r0, [pc, #112]	@ (800d5dc <tcp_write+0x2e4>)
 800d56a:	f004 faad 	bl	8011ac8 <iprintf>
          extendlen = seglen;
 800d56e:	8bfb      	ldrh	r3, [r7, #30]
 800d570:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d572:	e01a      	b.n	800d5aa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d574:	8bfb      	ldrh	r3, [r7, #30]
 800d576:	2201      	movs	r2, #1
 800d578:	4619      	mov	r1, r3
 800d57a:	2000      	movs	r0, #0
 800d57c:	f7fb f868 	bl	8008650 <pbuf_alloc>
 800d580:	6578      	str	r0, [r7, #84]	@ 0x54
 800d582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d584:	2b00      	cmp	r3, #0
 800d586:	f000 81e0 	beq.w	800d94a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d58a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	441a      	add	r2, r3
 800d592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d594:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d596:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d598:	f7fb fbc6 	bl	8008d28 <pbuf_clen>
 800d59c:	4603      	mov	r3, r0
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d5aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d5ae:	8bfb      	ldrh	r3, [r7, #30]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d5b6:	e0dc      	b.n	800d772 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f000 80d7 	beq.w	800d772 <tcp_write+0x47a>
 800d5c4:	4b03      	ldr	r3, [pc, #12]	@ (800d5d4 <tcp_write+0x2dc>)
 800d5c6:	f240 224a 	movw	r2, #586	@ 0x24a
 800d5ca:	490a      	ldr	r1, [pc, #40]	@ (800d5f4 <tcp_write+0x2fc>)
 800d5cc:	4803      	ldr	r0, [pc, #12]	@ (800d5dc <tcp_write+0x2e4>)
 800d5ce:	f004 fa7b 	bl	8011ac8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d5d2:	e0ce      	b.n	800d772 <tcp_write+0x47a>
 800d5d4:	08014098 	.word	0x08014098
 800d5d8:	08014238 	.word	0x08014238
 800d5dc:	080140ec 	.word	0x080140ec
 800d5e0:	08014250 	.word	0x08014250
 800d5e4:	08014284 	.word	0x08014284
 800d5e8:	0801429c 	.word	0x0801429c
 800d5ec:	080142bc 	.word	0x080142bc
 800d5f0:	080142dc 	.word	0x080142dc
 800d5f4:	08014308 	.word	0x08014308
    struct pbuf *p;
    u16_t left = len - pos;
 800d5f8:	88fa      	ldrh	r2, [r7, #6]
 800d5fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d602:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d606:	b29b      	uxth	r3, r3
 800d608:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d60e:	8b7a      	ldrh	r2, [r7, #26]
 800d610:	8bbb      	ldrh	r3, [r7, #28]
 800d612:	4293      	cmp	r3, r2
 800d614:	bf28      	it	cs
 800d616:	4613      	movcs	r3, r2
 800d618:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d61a:	797b      	ldrb	r3, [r7, #5]
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b00      	cmp	r3, #0
 800d622:	d036      	beq.n	800d692 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d624:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d628:	b29a      	uxth	r2, r3
 800d62a:	8b3b      	ldrh	r3, [r7, #24]
 800d62c:	4413      	add	r3, r2
 800d62e:	b299      	uxth	r1, r3
 800d630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d632:	2b00      	cmp	r3, #0
 800d634:	bf0c      	ite	eq
 800d636:	2301      	moveq	r3, #1
 800d638:	2300      	movne	r3, #0
 800d63a:	b2db      	uxtb	r3, r3
 800d63c:	f107 0012 	add.w	r0, r7, #18
 800d640:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d642:	9302      	str	r3, [sp, #8]
 800d644:	797b      	ldrb	r3, [r7, #5]
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	4603      	mov	r3, r0
 800d64e:	2036      	movs	r0, #54	@ 0x36
 800d650:	f7ff fd5e 	bl	800d110 <tcp_pbuf_prealloc>
 800d654:	6338      	str	r0, [r7, #48]	@ 0x30
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 8178 	beq.w	800d94e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d660:	895b      	ldrh	r3, [r3, #10]
 800d662:	8b3a      	ldrh	r2, [r7, #24]
 800d664:	429a      	cmp	r2, r3
 800d666:	d906      	bls.n	800d676 <tcp_write+0x37e>
 800d668:	4b8c      	ldr	r3, [pc, #560]	@ (800d89c <tcp_write+0x5a4>)
 800d66a:	f240 2266 	movw	r2, #614	@ 0x266
 800d66e:	498c      	ldr	r1, [pc, #560]	@ (800d8a0 <tcp_write+0x5a8>)
 800d670:	488c      	ldr	r0, [pc, #560]	@ (800d8a4 <tcp_write+0x5ac>)
 800d672:	f004 fa29 	bl	8011ac8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d678:	685a      	ldr	r2, [r3, #4]
 800d67a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d67e:	18d0      	adds	r0, r2, r3
 800d680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d684:	68ba      	ldr	r2, [r7, #8]
 800d686:	4413      	add	r3, r2
 800d688:	8b3a      	ldrh	r2, [r7, #24]
 800d68a:	4619      	mov	r1, r3
 800d68c:	f004 fbe9 	bl	8011e62 <memcpy>
 800d690:	e02f      	b.n	800d6f2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d692:	8a7b      	ldrh	r3, [r7, #18]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d006      	beq.n	800d6a6 <tcp_write+0x3ae>
 800d698:	4b80      	ldr	r3, [pc, #512]	@ (800d89c <tcp_write+0x5a4>)
 800d69a:	f240 2271 	movw	r2, #625	@ 0x271
 800d69e:	4982      	ldr	r1, [pc, #520]	@ (800d8a8 <tcp_write+0x5b0>)
 800d6a0:	4880      	ldr	r0, [pc, #512]	@ (800d8a4 <tcp_write+0x5ac>)
 800d6a2:	f004 fa11 	bl	8011ac8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d6a6:	8b3b      	ldrh	r3, [r7, #24]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	2036      	movs	r0, #54	@ 0x36
 800d6ae:	f7fa ffcf 	bl	8008650 <pbuf_alloc>
 800d6b2:	6178      	str	r0, [r7, #20]
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 814b 	beq.w	800d952 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d6bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	441a      	add	r2, r3
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d6c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	2036      	movs	r0, #54	@ 0x36
 800d6d6:	f7fa ffbb 	bl	8008650 <pbuf_alloc>
 800d6da:	6338      	str	r0, [r7, #48]	@ 0x30
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d103      	bne.n	800d6ea <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d6e2:	6978      	ldr	r0, [r7, #20]
 800d6e4:	f7fb fa98 	bl	8008c18 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d6e8:	e136      	b.n	800d958 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d6ea:	6979      	ldr	r1, [r7, #20]
 800d6ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ee:	f7fb fb55 	bl	8008d9c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d6f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6f4:	f7fb fb18 	bl	8008d28 <pbuf_clen>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d700:	4413      	add	r3, r2
 800d702:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d70a:	2b09      	cmp	r3, #9
 800d70c:	d903      	bls.n	800d716 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d70e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d710:	f7fb fa82 	bl	8008c18 <pbuf_free>
      goto memerr;
 800d714:	e120      	b.n	800d958 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d71a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d71e:	441a      	add	r2, r3
 800d720:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	4613      	mov	r3, r2
 800d728:	2200      	movs	r2, #0
 800d72a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f7ff fc53 	bl	800cfd8 <tcp_create_segment>
 800d732:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 810d 	beq.w	800d956 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d73c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d102      	bne.n	800d748 <tcp_write+0x450>
      queue = seg;
 800d742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d744:	647b      	str	r3, [r7, #68]	@ 0x44
 800d746:	e00c      	b.n	800d762 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d106      	bne.n	800d75c <tcp_write+0x464>
 800d74e:	4b53      	ldr	r3, [pc, #332]	@ (800d89c <tcp_write+0x5a4>)
 800d750:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d754:	4955      	ldr	r1, [pc, #340]	@ (800d8ac <tcp_write+0x5b4>)
 800d756:	4853      	ldr	r0, [pc, #332]	@ (800d8a4 <tcp_write+0x5ac>)
 800d758:	f004 f9b6 	bl	8011ac8 <iprintf>
      prev_seg->next = seg;
 800d75c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d75e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d760:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d764:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d766:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d76a:	8b3b      	ldrh	r3, [r7, #24]
 800d76c:	4413      	add	r3, r2
 800d76e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d772:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d776:	88fb      	ldrh	r3, [r7, #6]
 800d778:	429a      	cmp	r2, r3
 800d77a:	f4ff af3d 	bcc.w	800d5f8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d77e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d780:	2b00      	cmp	r3, #0
 800d782:	d02c      	beq.n	800d7de <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d78a:	e01e      	b.n	800d7ca <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d78c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78e:	891a      	ldrh	r2, [r3, #8]
 800d790:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d792:	4413      	add	r3, r2
 800d794:	b29a      	uxth	r2, r3
 800d796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d798:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d110      	bne.n	800d7c4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a4:	685b      	ldr	r3, [r3, #4]
 800d7a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7a8:	8952      	ldrh	r2, [r2, #10]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d7ae:	68b9      	ldr	r1, [r7, #8]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f004 fb56 	bl	8011e62 <memcpy>
        p->len += oversize_used;
 800d7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b8:	895a      	ldrh	r2, [r3, #10]
 800d7ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d7bc:	4413      	add	r3, r2
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1dd      	bne.n	800d78c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d7d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7d2:	891a      	ldrh	r2, [r3, #8]
 800d7d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d7d6:	4413      	add	r3, r2
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7dc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d7de:	8a7a      	ldrh	r2, [r7, #18]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d7e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d018      	beq.n	800d81e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d7ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d106      	bne.n	800d800 <tcp_write+0x508>
 800d7f2:	4b2a      	ldr	r3, [pc, #168]	@ (800d89c <tcp_write+0x5a4>)
 800d7f4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d7f8:	492d      	ldr	r1, [pc, #180]	@ (800d8b0 <tcp_write+0x5b8>)
 800d7fa:	482a      	ldr	r0, [pc, #168]	@ (800d8a4 <tcp_write+0x5ac>)
 800d7fc:	f004 f964 	bl	8011ac8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d806:	4618      	mov	r0, r3
 800d808:	f7fb fac8 	bl	8008d9c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d80c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d80e:	891a      	ldrh	r2, [r3, #8]
 800d810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d812:	891b      	ldrh	r3, [r3, #8]
 800d814:	4413      	add	r3, r2
 800d816:	b29a      	uxth	r2, r3
 800d818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d81a:	811a      	strh	r2, [r3, #8]
 800d81c:	e037      	b.n	800d88e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d81e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d034      	beq.n	800d88e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <tcp_write+0x53a>
 800d82a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d106      	bne.n	800d840 <tcp_write+0x548>
 800d832:	4b1a      	ldr	r3, [pc, #104]	@ (800d89c <tcp_write+0x5a4>)
 800d834:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d838:	491e      	ldr	r1, [pc, #120]	@ (800d8b4 <tcp_write+0x5bc>)
 800d83a:	481a      	ldr	r0, [pc, #104]	@ (800d8a4 <tcp_write+0x5ac>)
 800d83c:	f004 f944 	bl	8011ac8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d846:	e009      	b.n	800d85c <tcp_write+0x564>
      p->tot_len += extendlen;
 800d848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d84a:	891a      	ldrh	r2, [r3, #8]
 800d84c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d84e:	4413      	add	r3, r2
 800d850:	b29a      	uxth	r2, r3
 800d852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d854:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d1f1      	bne.n	800d848 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d866:	891a      	ldrh	r2, [r3, #8]
 800d868:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d86a:	4413      	add	r3, r2
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d870:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d874:	895a      	ldrh	r2, [r3, #10]
 800d876:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d878:	4413      	add	r3, r2
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d882:	891a      	ldrh	r2, [r3, #8]
 800d884:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d886:	4413      	add	r3, r2
 800d888:	b29a      	uxth	r2, r3
 800d88a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d88c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d890:	2b00      	cmp	r3, #0
 800d892:	d111      	bne.n	800d8b8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d898:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d89a:	e010      	b.n	800d8be <tcp_write+0x5c6>
 800d89c:	08014098 	.word	0x08014098
 800d8a0:	08014338 	.word	0x08014338
 800d8a4:	080140ec 	.word	0x080140ec
 800d8a8:	08014378 	.word	0x08014378
 800d8ac:	08014388 	.word	0x08014388
 800d8b0:	0801439c 	.word	0x0801439c
 800d8b4:	080143d4 	.word	0x080143d4
  } else {
    last_unsent->next = queue;
 800d8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8bc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d8c2:	88fb      	ldrh	r3, [r7, #6]
 800d8c4:	441a      	add	r2, r3
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d8d0:	88fb      	ldrh	r3, [r7, #6]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	b29a      	uxth	r2, r3
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d8e2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00e      	beq.n	800d90e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10a      	bne.n	800d90e <tcp_write+0x616>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d106      	bne.n	800d90e <tcp_write+0x616>
 800d900:	4b2c      	ldr	r3, [pc, #176]	@ (800d9b4 <tcp_write+0x6bc>)
 800d902:	f240 3212 	movw	r2, #786	@ 0x312
 800d906:	492c      	ldr	r1, [pc, #176]	@ (800d9b8 <tcp_write+0x6c0>)
 800d908:	482c      	ldr	r0, [pc, #176]	@ (800d9bc <tcp_write+0x6c4>)
 800d90a:	f004 f8dd 	bl	8011ac8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d016      	beq.n	800d942 <tcp_write+0x64a>
 800d914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d012      	beq.n	800d942 <tcp_write+0x64a>
 800d91c:	797b      	ldrb	r3, [r7, #5]
 800d91e:	f003 0302 	and.w	r3, r3, #2
 800d922:	2b00      	cmp	r3, #0
 800d924:	d10d      	bne.n	800d942 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	899b      	ldrh	r3, [r3, #12]
 800d92c:	b29c      	uxth	r4, r3
 800d92e:	2008      	movs	r0, #8
 800d930:	f7f9 fe34 	bl	800759c <lwip_htons>
 800d934:	4603      	mov	r3, r0
 800d936:	461a      	mov	r2, r3
 800d938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	4322      	orrs	r2, r4
 800d93e:	b292      	uxth	r2, r2
 800d940:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	e031      	b.n	800d9aa <tcp_write+0x6b2>
          goto memerr;
 800d946:	bf00      	nop
 800d948:	e006      	b.n	800d958 <tcp_write+0x660>
            goto memerr;
 800d94a:	bf00      	nop
 800d94c:	e004      	b.n	800d958 <tcp_write+0x660>
        goto memerr;
 800d94e:	bf00      	nop
 800d950:	e002      	b.n	800d958 <tcp_write+0x660>
        goto memerr;
 800d952:	bf00      	nop
 800d954:	e000      	b.n	800d958 <tcp_write+0x660>
      goto memerr;
 800d956:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	8b5b      	ldrh	r3, [r3, #26]
 800d95c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d960:	b29a      	uxth	r2, r3
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d96c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d96e:	f7fb f953 	bl	8008c18 <pbuf_free>
  }
  if (queue != NULL) {
 800d972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <tcp_write+0x686>
    tcp_segs_free(queue);
 800d978:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d97a:	f7fc fc3f 	bl	800a1fc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00e      	beq.n	800d9a6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10a      	bne.n	800d9a6 <tcp_write+0x6ae>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <tcp_write+0x6ae>
 800d998:	4b06      	ldr	r3, [pc, #24]	@ (800d9b4 <tcp_write+0x6bc>)
 800d99a:	f240 3227 	movw	r2, #807	@ 0x327
 800d99e:	4906      	ldr	r1, [pc, #24]	@ (800d9b8 <tcp_write+0x6c0>)
 800d9a0:	4806      	ldr	r0, [pc, #24]	@ (800d9bc <tcp_write+0x6c4>)
 800d9a2:	f004 f891 	bl	8011ac8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d9a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	375c      	adds	r7, #92	@ 0x5c
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd90      	pop	{r4, r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	08014098 	.word	0x08014098
 800d9b8:	0801440c 	.word	0x0801440c
 800d9bc:	080140ec 	.word	0x080140ec

0800d9c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d9c0:	b590      	push	{r4, r7, lr}
 800d9c2:	b08b      	sub	sp, #44	@ 0x2c
 800d9c4:	af02      	add	r7, sp, #8
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	61fb      	str	r3, [r7, #28]
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <tcp_split_unsent_seg+0x2c>
 800d9de:	4b95      	ldr	r3, [pc, #596]	@ (800dc34 <tcp_split_unsent_seg+0x274>)
 800d9e0:	f240 324b 	movw	r2, #843	@ 0x34b
 800d9e4:	4994      	ldr	r1, [pc, #592]	@ (800dc38 <tcp_split_unsent_seg+0x278>)
 800d9e6:	4895      	ldr	r0, [pc, #596]	@ (800dc3c <tcp_split_unsent_seg+0x27c>)
 800d9e8:	f004 f86e 	bl	8011ac8 <iprintf>

  useg = pcb->unsent;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9fc:	e116      	b.n	800dc2c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d9fe:	887b      	ldrh	r3, [r7, #2]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d109      	bne.n	800da18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800da04:	4b8b      	ldr	r3, [pc, #556]	@ (800dc34 <tcp_split_unsent_seg+0x274>)
 800da06:	f240 3253 	movw	r2, #851	@ 0x353
 800da0a:	498d      	ldr	r1, [pc, #564]	@ (800dc40 <tcp_split_unsent_seg+0x280>)
 800da0c:	488b      	ldr	r0, [pc, #556]	@ (800dc3c <tcp_split_unsent_seg+0x27c>)
 800da0e:	f004 f85b 	bl	8011ac8 <iprintf>
    return ERR_VAL;
 800da12:	f06f 0305 	mvn.w	r3, #5
 800da16:	e109      	b.n	800dc2c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	891b      	ldrh	r3, [r3, #8]
 800da1c:	887a      	ldrh	r2, [r7, #2]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d301      	bcc.n	800da26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	e102      	b.n	800dc2c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da2a:	887a      	ldrh	r2, [r7, #2]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d906      	bls.n	800da3e <tcp_split_unsent_seg+0x7e>
 800da30:	4b80      	ldr	r3, [pc, #512]	@ (800dc34 <tcp_split_unsent_seg+0x274>)
 800da32:	f240 325b 	movw	r2, #859	@ 0x35b
 800da36:	4983      	ldr	r1, [pc, #524]	@ (800dc44 <tcp_split_unsent_seg+0x284>)
 800da38:	4880      	ldr	r0, [pc, #512]	@ (800dc3c <tcp_split_unsent_seg+0x27c>)
 800da3a:	f004 f845 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	891b      	ldrh	r3, [r3, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <tcp_split_unsent_seg+0x94>
 800da46:	4b7b      	ldr	r3, [pc, #492]	@ (800dc34 <tcp_split_unsent_seg+0x274>)
 800da48:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800da4c:	497e      	ldr	r1, [pc, #504]	@ (800dc48 <tcp_split_unsent_seg+0x288>)
 800da4e:	487b      	ldr	r0, [pc, #492]	@ (800dc3c <tcp_split_unsent_seg+0x27c>)
 800da50:	f004 f83a 	bl	8011ac8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	7a9b      	ldrb	r3, [r3, #10]
 800da58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	f003 0304 	and.w	r3, r3, #4
 800da64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	891a      	ldrh	r2, [r3, #8]
 800da6a:	887b      	ldrh	r3, [r7, #2]
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	b29a      	uxth	r2, r3
 800da74:	89bb      	ldrh	r3, [r7, #12]
 800da76:	4413      	add	r3, r2
 800da78:	b29b      	uxth	r3, r3
 800da7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800da7e:	4619      	mov	r1, r3
 800da80:	2036      	movs	r0, #54	@ 0x36
 800da82:	f7fa fde5 	bl	8008650 <pbuf_alloc>
 800da86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 80b7 	beq.w	800dbfe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	891a      	ldrh	r2, [r3, #8]
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	891b      	ldrh	r3, [r3, #8]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	887b      	ldrh	r3, [r7, #2]
 800daa0:	4413      	add	r3, r2
 800daa2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	6858      	ldr	r0, [r3, #4]
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	7bbb      	ldrb	r3, [r7, #14]
 800daae:	18d1      	adds	r1, r2, r3
 800dab0:	897b      	ldrh	r3, [r7, #10]
 800dab2:	89ba      	ldrh	r2, [r7, #12]
 800dab4:	f7fb fa9a 	bl	8008fec <pbuf_copy_partial>
 800dab8:	4603      	mov	r3, r0
 800daba:	461a      	mov	r2, r3
 800dabc:	89bb      	ldrh	r3, [r7, #12]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	f040 809f 	bne.w	800dc02 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	899b      	ldrh	r3, [r3, #12]
 800daca:	b29b      	uxth	r3, r3
 800dacc:	4618      	mov	r0, r3
 800dace:	f7f9 fd65 	bl	800759c <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dada:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800dadc:	2300      	movs	r3, #0
 800dade:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800dae0:	7efb      	ldrb	r3, [r7, #27]
 800dae2:	f003 0308 	and.w	r3, r3, #8
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d007      	beq.n	800dafa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800daea:	7efb      	ldrb	r3, [r7, #27]
 800daec:	f023 0308 	bic.w	r3, r3, #8
 800daf0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800daf2:	7ebb      	ldrb	r3, [r7, #26]
 800daf4:	f043 0308 	orr.w	r3, r3, #8
 800daf8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800dafa:	7efb      	ldrb	r3, [r7, #27]
 800dafc:	f003 0301 	and.w	r3, r3, #1
 800db00:	2b00      	cmp	r3, #0
 800db02:	d007      	beq.n	800db14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800db04:	7efb      	ldrb	r3, [r7, #27]
 800db06:	f023 0301 	bic.w	r3, r3, #1
 800db0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800db0c:	7ebb      	ldrb	r3, [r7, #26]
 800db0e:	f043 0301 	orr.w	r3, r3, #1
 800db12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	68db      	ldr	r3, [r3, #12]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f9 fd53 	bl	80075c6 <lwip_htonl>
 800db20:	4602      	mov	r2, r0
 800db22:	887b      	ldrh	r3, [r7, #2]
 800db24:	18d1      	adds	r1, r2, r3
 800db26:	7eba      	ldrb	r2, [r7, #26]
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	460b      	mov	r3, r1
 800db2e:	6939      	ldr	r1, [r7, #16]
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7ff fa51 	bl	800cfd8 <tcp_create_segment>
 800db36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d063      	beq.n	800dc06 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	4618      	mov	r0, r3
 800db44:	f7fb f8f0 	bl	8008d28 <pbuf_clen>
 800db48:	4603      	mov	r3, r0
 800db4a:	461a      	mov	r2, r3
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800db52:	1a9b      	subs	r3, r3, r2
 800db54:	b29a      	uxth	r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	6858      	ldr	r0, [r3, #4]
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	891a      	ldrh	r2, [r3, #8]
 800db66:	89bb      	ldrh	r3, [r7, #12]
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4619      	mov	r1, r3
 800db6e:	f7fa fecd 	bl	800890c <pbuf_realloc>
  useg->len -= remainder;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	891a      	ldrh	r2, [r3, #8]
 800db76:	89bb      	ldrh	r3, [r7, #12]
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	899b      	ldrh	r3, [r3, #12]
 800db86:	b29c      	uxth	r4, r3
 800db88:	7efb      	ldrb	r3, [r7, #27]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7f9 fd05 	bl	800759c <lwip_htons>
 800db92:	4603      	mov	r3, r0
 800db94:	461a      	mov	r2, r3
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	4322      	orrs	r2, r4
 800db9c:	b292      	uxth	r2, r2
 800db9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fb f8bf 	bl	8008d28 <pbuf_clen>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	461a      	mov	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dbb4:	4413      	add	r3, r2
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fb f8b0 	bl	8008d28 <pbuf_clen>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	461a      	mov	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dbd2:	4413      	add	r3, r2
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	69fa      	ldr	r2, [r7, #28]
 800dbe8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d103      	bne.n	800dbfa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e016      	b.n	800dc2c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800dbfe:	bf00      	nop
 800dc00:	e002      	b.n	800dc08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dc02:	bf00      	nop
 800dc04:	e000      	b.n	800dc08 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800dc06:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d006      	beq.n	800dc1c <tcp_split_unsent_seg+0x25c>
 800dc0e:	4b09      	ldr	r3, [pc, #36]	@ (800dc34 <tcp_split_unsent_seg+0x274>)
 800dc10:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800dc14:	490d      	ldr	r1, [pc, #52]	@ (800dc4c <tcp_split_unsent_seg+0x28c>)
 800dc16:	4809      	ldr	r0, [pc, #36]	@ (800dc3c <tcp_split_unsent_seg+0x27c>)
 800dc18:	f003 ff56 	bl	8011ac8 <iprintf>
  if (p != NULL) {
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800dc22:	6938      	ldr	r0, [r7, #16]
 800dc24:	f7fa fff8 	bl	8008c18 <pbuf_free>
  }

  return ERR_MEM;
 800dc28:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3724      	adds	r7, #36	@ 0x24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd90      	pop	{r4, r7, pc}
 800dc34:	08014098 	.word	0x08014098
 800dc38:	0801442c 	.word	0x0801442c
 800dc3c:	080140ec 	.word	0x080140ec
 800dc40:	08014450 	.word	0x08014450
 800dc44:	08014474 	.word	0x08014474
 800dc48:	08014484 	.word	0x08014484
 800dc4c:	08014494 	.word	0x08014494

0800dc50 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800dc50:	b590      	push	{r4, r7, lr}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <tcp_send_fin+0x1c>
 800dc5e:	4b21      	ldr	r3, [pc, #132]	@ (800dce4 <tcp_send_fin+0x94>)
 800dc60:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800dc64:	4920      	ldr	r1, [pc, #128]	@ (800dce8 <tcp_send_fin+0x98>)
 800dc66:	4821      	ldr	r0, [pc, #132]	@ (800dcec <tcp_send_fin+0x9c>)
 800dc68:	f003 ff2e 	bl	8011ac8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d02e      	beq.n	800dcd2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc78:	60fb      	str	r3, [r7, #12]
 800dc7a:	e002      	b.n	800dc82 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1f8      	bne.n	800dc7c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	899b      	ldrh	r3, [r3, #12]
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7f9 fc82 	bl	800759c <lwip_htons>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	f003 0307 	and.w	r3, r3, #7
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d116      	bne.n	800dcd2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	899b      	ldrh	r3, [r3, #12]
 800dcaa:	b29c      	uxth	r4, r3
 800dcac:	2001      	movs	r0, #1
 800dcae:	f7f9 fc75 	bl	800759c <lwip_htons>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	4322      	orrs	r2, r4
 800dcbc:	b292      	uxth	r2, r2
 800dcbe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	8b5b      	ldrh	r3, [r3, #26]
 800dcc4:	f043 0320 	orr.w	r3, r3, #32
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e004      	b.n	800dcdc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dcd2:	2101      	movs	r1, #1
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f80b 	bl	800dcf0 <tcp_enqueue_flags>
 800dcda:	4603      	mov	r3, r0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd90      	pop	{r4, r7, pc}
 800dce4:	08014098 	.word	0x08014098
 800dce8:	080144a0 	.word	0x080144a0
 800dcec:	080140ec 	.word	0x080140ec

0800dcf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08a      	sub	sp, #40	@ 0x28
 800dcf4:	af02      	add	r7, sp, #8
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dd00:	2300      	movs	r3, #0
 800dd02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dd04:	78fb      	ldrb	r3, [r7, #3]
 800dd06:	f003 0303 	and.w	r3, r3, #3
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d106      	bne.n	800dd1c <tcp_enqueue_flags+0x2c>
 800dd0e:	4b67      	ldr	r3, [pc, #412]	@ (800deac <tcp_enqueue_flags+0x1bc>)
 800dd10:	f240 4211 	movw	r2, #1041	@ 0x411
 800dd14:	4966      	ldr	r1, [pc, #408]	@ (800deb0 <tcp_enqueue_flags+0x1c0>)
 800dd16:	4867      	ldr	r0, [pc, #412]	@ (800deb4 <tcp_enqueue_flags+0x1c4>)
 800dd18:	f003 fed6 	bl	8011ac8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <tcp_enqueue_flags+0x40>
 800dd22:	4b62      	ldr	r3, [pc, #392]	@ (800deac <tcp_enqueue_flags+0x1bc>)
 800dd24:	f240 4213 	movw	r2, #1043	@ 0x413
 800dd28:	4963      	ldr	r1, [pc, #396]	@ (800deb8 <tcp_enqueue_flags+0x1c8>)
 800dd2a:	4862      	ldr	r0, [pc, #392]	@ (800deb4 <tcp_enqueue_flags+0x1c4>)
 800dd2c:	f003 fecc 	bl	8011ac8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dd30:	78fb      	ldrb	r3, [r7, #3]
 800dd32:	f003 0302 	and.w	r3, r3, #2
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dd3e:	7ffb      	ldrb	r3, [r7, #31]
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dd52:	4619      	mov	r1, r3
 800dd54:	2036      	movs	r0, #54	@ 0x36
 800dd56:	f7fa fc7b 	bl	8008650 <pbuf_alloc>
 800dd5a:	6138      	str	r0, [r7, #16]
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d109      	bne.n	800dd76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	8b5b      	ldrh	r3, [r3, #26]
 800dd66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dd70:	f04f 33ff 	mov.w	r3, #4294967295
 800dd74:	e095      	b.n	800dea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	895a      	ldrh	r2, [r3, #10]
 800dd7a:	7dfb      	ldrb	r3, [r7, #23]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d206      	bcs.n	800dd90 <tcp_enqueue_flags+0xa0>
 800dd82:	4b4a      	ldr	r3, [pc, #296]	@ (800deac <tcp_enqueue_flags+0x1bc>)
 800dd84:	f240 4239 	movw	r2, #1081	@ 0x439
 800dd88:	494c      	ldr	r1, [pc, #304]	@ (800debc <tcp_enqueue_flags+0x1cc>)
 800dd8a:	484a      	ldr	r0, [pc, #296]	@ (800deb4 <tcp_enqueue_flags+0x1c4>)
 800dd8c:	f003 fe9c 	bl	8011ac8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800dd94:	78fa      	ldrb	r2, [r7, #3]
 800dd96:	7ffb      	ldrb	r3, [r7, #31]
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	6939      	ldr	r1, [r7, #16]
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff f91a 	bl	800cfd8 <tcp_create_segment>
 800dda4:	60f8      	str	r0, [r7, #12]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d109      	bne.n	800ddc0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	8b5b      	ldrh	r3, [r3, #26]
 800ddb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ddba:	f04f 33ff 	mov.w	r3, #4294967295
 800ddbe:	e070      	b.n	800dea2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	f003 0303 	and.w	r3, r3, #3
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d006      	beq.n	800ddda <tcp_enqueue_flags+0xea>
 800ddcc:	4b37      	ldr	r3, [pc, #220]	@ (800deac <tcp_enqueue_flags+0x1bc>)
 800ddce:	f240 4242 	movw	r2, #1090	@ 0x442
 800ddd2:	493b      	ldr	r1, [pc, #236]	@ (800dec0 <tcp_enqueue_flags+0x1d0>)
 800ddd4:	4837      	ldr	r0, [pc, #220]	@ (800deb4 <tcp_enqueue_flags+0x1c4>)
 800ddd6:	f003 fe77 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	891b      	ldrh	r3, [r3, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d006      	beq.n	800ddf0 <tcp_enqueue_flags+0x100>
 800dde2:	4b32      	ldr	r3, [pc, #200]	@ (800deac <tcp_enqueue_flags+0x1bc>)
 800dde4:	f240 4243 	movw	r2, #1091	@ 0x443
 800dde8:	4936      	ldr	r1, [pc, #216]	@ (800dec4 <tcp_enqueue_flags+0x1d4>)
 800ddea:	4832      	ldr	r0, [pc, #200]	@ (800deb4 <tcp_enqueue_flags+0x1c4>)
 800ddec:	f003 fe6c 	bl	8011ac8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d103      	bne.n	800de00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ddfe:	e00d      	b.n	800de1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de04:	61bb      	str	r3, [r7, #24]
 800de06:	e002      	b.n	800de0e <tcp_enqueue_flags+0x11e>
 800de08:	69bb      	ldr	r3, [r7, #24]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	61bb      	str	r3, [r7, #24]
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1f8      	bne.n	800de08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800de24:	78fb      	ldrb	r3, [r7, #3]
 800de26:	f003 0302 	and.w	r3, r3, #2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <tcp_enqueue_flags+0x148>
 800de2e:	78fb      	ldrb	r3, [r7, #3]
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d004      	beq.n	800de42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de3c:	1c5a      	adds	r2, r3, #1
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800de42:	78fb      	ldrb	r3, [r7, #3]
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d006      	beq.n	800de5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f043 0320 	orr.w	r3, r3, #32
 800de54:	b29a      	uxth	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fa ff62 	bl	8008d28 <pbuf_clen>
 800de64:	4603      	mov	r3, r0
 800de66:	461a      	mov	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800de6e:	4413      	add	r3, r2
 800de70:	b29a      	uxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00e      	beq.n	800dea0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de86:	2b00      	cmp	r3, #0
 800de88:	d10a      	bne.n	800dea0 <tcp_enqueue_flags+0x1b0>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <tcp_enqueue_flags+0x1b0>
 800de92:	4b06      	ldr	r3, [pc, #24]	@ (800deac <tcp_enqueue_flags+0x1bc>)
 800de94:	f240 4265 	movw	r2, #1125	@ 0x465
 800de98:	490b      	ldr	r1, [pc, #44]	@ (800dec8 <tcp_enqueue_flags+0x1d8>)
 800de9a:	4806      	ldr	r0, [pc, #24]	@ (800deb4 <tcp_enqueue_flags+0x1c4>)
 800de9c:	f003 fe14 	bl	8011ac8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3720      	adds	r7, #32
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	08014098 	.word	0x08014098
 800deb0:	080144bc 	.word	0x080144bc
 800deb4:	080140ec 	.word	0x080140ec
 800deb8:	08014514 	.word	0x08014514
 800debc:	08014534 	.word	0x08014534
 800dec0:	08014570 	.word	0x08014570
 800dec4:	08014588 	.word	0x08014588
 800dec8:	080145b4 	.word	0x080145b4

0800decc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800decc:	b5b0      	push	{r4, r5, r7, lr}
 800dece:	b08a      	sub	sp, #40	@ 0x28
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d106      	bne.n	800dee8 <tcp_output+0x1c>
 800deda:	4b8a      	ldr	r3, [pc, #552]	@ (800e104 <tcp_output+0x238>)
 800dedc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800dee0:	4989      	ldr	r1, [pc, #548]	@ (800e108 <tcp_output+0x23c>)
 800dee2:	488a      	ldr	r0, [pc, #552]	@ (800e10c <tcp_output+0x240>)
 800dee4:	f003 fdf0 	bl	8011ac8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	7d1b      	ldrb	r3, [r3, #20]
 800deec:	2b01      	cmp	r3, #1
 800deee:	d106      	bne.n	800defe <tcp_output+0x32>
 800def0:	4b84      	ldr	r3, [pc, #528]	@ (800e104 <tcp_output+0x238>)
 800def2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800def6:	4986      	ldr	r1, [pc, #536]	@ (800e110 <tcp_output+0x244>)
 800def8:	4884      	ldr	r0, [pc, #528]	@ (800e10c <tcp_output+0x240>)
 800defa:	f003 fde5 	bl	8011ac8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800defe:	4b85      	ldr	r3, [pc, #532]	@ (800e114 <tcp_output+0x248>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d101      	bne.n	800df0c <tcp_output+0x40>
    return ERR_OK;
 800df08:	2300      	movs	r3, #0
 800df0a:	e1ce      	b.n	800e2aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df18:	4293      	cmp	r3, r2
 800df1a:	bf28      	it	cs
 800df1c:	4613      	movcs	r3, r2
 800df1e:	b29b      	uxth	r3, r3
 800df20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df26:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800df28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10b      	bne.n	800df46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	8b5b      	ldrh	r3, [r3, #26]
 800df32:	f003 0302 	and.w	r3, r3, #2
 800df36:	2b00      	cmp	r3, #0
 800df38:	f000 81aa 	beq.w	800e290 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fdcb 	bl	800ead8 <tcp_send_empty_ack>
 800df42:	4603      	mov	r3, r0
 800df44:	e1b1      	b.n	800e2aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800df46:	6879      	ldr	r1, [r7, #4]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	3304      	adds	r3, #4
 800df4c:	461a      	mov	r2, r3
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f7ff f826 	bl	800cfa0 <tcp_route>
 800df54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <tcp_output+0x96>
    return ERR_RTE;
 800df5c:	f06f 0303 	mvn.w	r3, #3
 800df60:	e1a3      	b.n	800e2aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d003      	beq.n	800df70 <tcp_output+0xa4>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d111      	bne.n	800df94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d002      	beq.n	800df7c <tcp_output+0xb0>
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	3304      	adds	r3, #4
 800df7a:	e000      	b.n	800df7e <tcp_output+0xb2>
 800df7c:	2300      	movs	r3, #0
 800df7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d102      	bne.n	800df8c <tcp_output+0xc0>
      return ERR_RTE;
 800df86:	f06f 0303 	mvn.w	r3, #3
 800df8a:	e18e      	b.n	800e2aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800df94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7f9 fb13 	bl	80075c6 <lwip_htonl>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfa6:	1ad3      	subs	r3, r2, r3
 800dfa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfaa:	8912      	ldrh	r2, [r2, #8]
 800dfac:	4413      	add	r3, r2
 800dfae:	69ba      	ldr	r2, [r7, #24]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d227      	bcs.n	800e004 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dfba:	461a      	mov	r2, r3
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d114      	bne.n	800dfec <tcp_output+0x120>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d110      	bne.n	800dfec <tcp_output+0x120>
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10b      	bne.n	800dfec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8b5b      	ldrh	r3, [r3, #26]
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f000 814d 	beq.w	800e294 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 fd6c 	bl	800ead8 <tcp_send_empty_ack>
 800e000:	4603      	mov	r3, r0
 800e002:	e152      	b.n	800e2aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e010:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e012:	6a3b      	ldr	r3, [r7, #32]
 800e014:	2b00      	cmp	r3, #0
 800e016:	f000 811c 	beq.w	800e252 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e01a:	e002      	b.n	800e022 <tcp_output+0x156>
 800e01c:	6a3b      	ldr	r3, [r7, #32]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	623b      	str	r3, [r7, #32]
 800e022:	6a3b      	ldr	r3, [r7, #32]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1f8      	bne.n	800e01c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e02a:	e112      	b.n	800e252 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	899b      	ldrh	r3, [r3, #12]
 800e032:	b29b      	uxth	r3, r3
 800e034:	4618      	mov	r0, r3
 800e036:	f7f9 fab1 	bl	800759c <lwip_htons>
 800e03a:	4603      	mov	r3, r0
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	f003 0304 	and.w	r3, r3, #4
 800e042:	2b00      	cmp	r3, #0
 800e044:	d006      	beq.n	800e054 <tcp_output+0x188>
 800e046:	4b2f      	ldr	r3, [pc, #188]	@ (800e104 <tcp_output+0x238>)
 800e048:	f240 5236 	movw	r2, #1334	@ 0x536
 800e04c:	4932      	ldr	r1, [pc, #200]	@ (800e118 <tcp_output+0x24c>)
 800e04e:	482f      	ldr	r0, [pc, #188]	@ (800e10c <tcp_output+0x240>)
 800e050:	f003 fd3a 	bl	8011ac8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01f      	beq.n	800e09c <tcp_output+0x1d0>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	8b5b      	ldrh	r3, [r3, #26]
 800e060:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e064:	2b00      	cmp	r3, #0
 800e066:	d119      	bne.n	800e09c <tcp_output+0x1d0>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00b      	beq.n	800e088 <tcp_output+0x1bc>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d110      	bne.n	800e09c <tcp_output+0x1d0>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e07e:	891a      	ldrh	r2, [r3, #8]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e084:	429a      	cmp	r2, r3
 800e086:	d209      	bcs.n	800e09c <tcp_output+0x1d0>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d004      	beq.n	800e09c <tcp_output+0x1d0>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e098:	2b08      	cmp	r3, #8
 800e09a:	d901      	bls.n	800e0a0 <tcp_output+0x1d4>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <tcp_output+0x1d6>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d106      	bne.n	800e0b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	8b5b      	ldrh	r3, [r3, #26]
 800e0aa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 80e4 	beq.w	800e27c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7d1b      	ldrb	r3, [r3, #20]
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d00d      	beq.n	800e0d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	b29c      	uxth	r4, r3
 800e0c4:	2010      	movs	r0, #16
 800e0c6:	f7f9 fa69 	bl	800759c <lwip_htons>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	4322      	orrs	r2, r4
 800e0d4:	b292      	uxth	r2, r2
 800e0d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	6879      	ldr	r1, [r7, #4]
 800e0dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0de:	f000 f909 	bl	800e2f4 <tcp_output_segment>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d016      	beq.n	800e11c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	8b5b      	ldrh	r3, [r3, #26]
 800e0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	835a      	strh	r2, [r3, #26]
      return err;
 800e0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e100:	e0d3      	b.n	800e2aa <tcp_output+0x3de>
 800e102:	bf00      	nop
 800e104:	08014098 	.word	0x08014098
 800e108:	080145dc 	.word	0x080145dc
 800e10c:	080140ec 	.word	0x080140ec
 800e110:	080145f4 	.word	0x080145f4
 800e114:	2000892c 	.word	0x2000892c
 800e118:	0801461c 	.word	0x0801461c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7d1b      	ldrb	r3, [r3, #20]
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d006      	beq.n	800e13a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8b5b      	ldrh	r3, [r3, #26]
 800e130:	f023 0303 	bic.w	r3, r3, #3
 800e134:	b29a      	uxth	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	f7f9 fa40 	bl	80075c6 <lwip_htonl>
 800e146:	4604      	mov	r4, r0
 800e148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e14a:	891b      	ldrh	r3, [r3, #8]
 800e14c:	461d      	mov	r5, r3
 800e14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	899b      	ldrh	r3, [r3, #12]
 800e154:	b29b      	uxth	r3, r3
 800e156:	4618      	mov	r0, r3
 800e158:	f7f9 fa20 	bl	800759c <lwip_htons>
 800e15c:	4603      	mov	r3, r0
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	f003 0303 	and.w	r3, r3, #3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <tcp_output+0x2a0>
 800e168:	2301      	movs	r3, #1
 800e16a:	e000      	b.n	800e16e <tcp_output+0x2a2>
 800e16c:	2300      	movs	r3, #0
 800e16e:	442b      	add	r3, r5
 800e170:	4423      	add	r3, r4
 800e172:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	da02      	bge.n	800e186 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	68ba      	ldr	r2, [r7, #8]
 800e184:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e188:	891b      	ldrh	r3, [r3, #8]
 800e18a:	461c      	mov	r4, r3
 800e18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	899b      	ldrh	r3, [r3, #12]
 800e192:	b29b      	uxth	r3, r3
 800e194:	4618      	mov	r0, r3
 800e196:	f7f9 fa01 	bl	800759c <lwip_htons>
 800e19a:	4603      	mov	r3, r0
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	f003 0303 	and.w	r3, r3, #3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <tcp_output+0x2de>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <tcp_output+0x2e0>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	4423      	add	r3, r4
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d049      	beq.n	800e246 <tcp_output+0x37a>
      seg->next = NULL;
 800e1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d105      	bne.n	800e1cc <tcp_output+0x300>
        pcb->unacked = seg;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1c4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c8:	623b      	str	r3, [r7, #32]
 800e1ca:	e03f      	b.n	800e24c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	685b      	ldr	r3, [r3, #4]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7f9 f9f7 	bl	80075c6 <lwip_htonl>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	6a3b      	ldr	r3, [r7, #32]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7f9 f9f0 	bl	80075c6 <lwip_htonl>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	1ae3      	subs	r3, r4, r3
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	da24      	bge.n	800e238 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3370      	adds	r3, #112	@ 0x70
 800e1f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e1f4:	e002      	b.n	800e1fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e1f6:	69fb      	ldr	r3, [r7, #28]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d011      	beq.n	800e228 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7f9 f9da 	bl	80075c6 <lwip_htonl>
 800e212:	4604      	mov	r4, r0
 800e214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7f9 f9d3 	bl	80075c6 <lwip_htonl>
 800e220:	4603      	mov	r3, r0
 800e222:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e224:	2b00      	cmp	r3, #0
 800e226:	dbe6      	blt.n	800e1f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	e009      	b.n	800e24c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e23c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	623b      	str	r3, [r7, #32]
 800e244:	e002      	b.n	800e24c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e246:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e248:	f7fb ffed 	bl	800a226 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e254:	2b00      	cmp	r3, #0
 800e256:	d012      	beq.n	800e27e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7f9 f9b1 	bl	80075c6 <lwip_htonl>
 800e264:	4602      	mov	r2, r0
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e26e:	8912      	ldrh	r2, [r2, #8]
 800e270:	4413      	add	r3, r2
  while (seg != NULL &&
 800e272:	69ba      	ldr	r2, [r7, #24]
 800e274:	429a      	cmp	r2, r3
 800e276:	f4bf aed9 	bcs.w	800e02c <tcp_output+0x160>
 800e27a:	e000      	b.n	800e27e <tcp_output+0x3b2>
      break;
 800e27c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e282:	2b00      	cmp	r3, #0
 800e284:	d108      	bne.n	800e298 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e28e:	e004      	b.n	800e29a <tcp_output+0x3ce>
    goto output_done;
 800e290:	bf00      	nop
 800e292:	e002      	b.n	800e29a <tcp_output+0x3ce>
    goto output_done;
 800e294:	bf00      	nop
 800e296:	e000      	b.n	800e29a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e298:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8b5b      	ldrh	r3, [r3, #26]
 800e29e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3728      	adds	r7, #40	@ 0x28
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e2b2:	bf00      	nop

0800e2b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b082      	sub	sp, #8
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d106      	bne.n	800e2d0 <tcp_output_segment_busy+0x1c>
 800e2c2:	4b09      	ldr	r3, [pc, #36]	@ (800e2e8 <tcp_output_segment_busy+0x34>)
 800e2c4:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e2c8:	4908      	ldr	r1, [pc, #32]	@ (800e2ec <tcp_output_segment_busy+0x38>)
 800e2ca:	4809      	ldr	r0, [pc, #36]	@ (800e2f0 <tcp_output_segment_busy+0x3c>)
 800e2cc:	f003 fbfc 	bl	8011ac8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	7b9b      	ldrb	r3, [r3, #14]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d001      	beq.n	800e2de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e000      	b.n	800e2e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	08014098 	.word	0x08014098
 800e2ec:	08014634 	.word	0x08014634
 800e2f0:	080140ec 	.word	0x080140ec

0800e2f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e2f4:	b5b0      	push	{r4, r5, r7, lr}
 800e2f6:	b08c      	sub	sp, #48	@ 0x30
 800e2f8:	af04      	add	r7, sp, #16
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <tcp_output_segment+0x20>
 800e306:	4b64      	ldr	r3, [pc, #400]	@ (800e498 <tcp_output_segment+0x1a4>)
 800e308:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e30c:	4963      	ldr	r1, [pc, #396]	@ (800e49c <tcp_output_segment+0x1a8>)
 800e30e:	4864      	ldr	r0, [pc, #400]	@ (800e4a0 <tcp_output_segment+0x1ac>)
 800e310:	f003 fbda 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d106      	bne.n	800e328 <tcp_output_segment+0x34>
 800e31a:	4b5f      	ldr	r3, [pc, #380]	@ (800e498 <tcp_output_segment+0x1a4>)
 800e31c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e320:	4960      	ldr	r1, [pc, #384]	@ (800e4a4 <tcp_output_segment+0x1b0>)
 800e322:	485f      	ldr	r0, [pc, #380]	@ (800e4a0 <tcp_output_segment+0x1ac>)
 800e324:	f003 fbd0 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d106      	bne.n	800e33c <tcp_output_segment+0x48>
 800e32e:	4b5a      	ldr	r3, [pc, #360]	@ (800e498 <tcp_output_segment+0x1a4>)
 800e330:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e334:	495c      	ldr	r1, [pc, #368]	@ (800e4a8 <tcp_output_segment+0x1b4>)
 800e336:	485a      	ldr	r0, [pc, #360]	@ (800e4a0 <tcp_output_segment+0x1ac>)
 800e338:	f003 fbc6 	bl	8011ac8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f7ff ffb9 	bl	800e2b4 <tcp_output_segment_busy>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d001      	beq.n	800e34c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	e0a1      	b.n	800e490 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68dc      	ldr	r4, [r3, #12]
 800e354:	4610      	mov	r0, r2
 800e356:	f7f9 f936 	bl	80075c6 <lwip_htonl>
 800e35a:	4603      	mov	r3, r0
 800e35c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	68dc      	ldr	r4, [r3, #12]
 800e366:	4610      	mov	r0, r2
 800e368:	f7f9 f918 	bl	800759c <lwip_htons>
 800e36c:	4603      	mov	r3, r0
 800e36e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e378:	441a      	add	r2, r3
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	3314      	adds	r3, #20
 800e384:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	7a9b      	ldrb	r3, [r3, #10]
 800e38a:	f003 0301 	and.w	r3, r3, #1
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d015      	beq.n	800e3be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	3304      	adds	r3, #4
 800e396:	461a      	mov	r2, r3
 800e398:	6879      	ldr	r1, [r7, #4]
 800e39a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e39e:	f7fc fa39 	bl	800a814 <tcp_eff_send_mss_netif>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e3a6:	8b7b      	ldrh	r3, [r7, #26]
 800e3a8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7f9 f90a 	bl	80075c6 <lwip_htonl>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	da02      	bge.n	800e3ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d10c      	bne.n	800e3f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e3d6:	4b35      	ldr	r3, [pc, #212]	@ (800e4ac <tcp_output_segment+0x1b8>)
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7f9 f8ee 	bl	80075c6 <lwip_htonl>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	68da      	ldr	r2, [r3, #12]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	1ad3      	subs	r3, r2, r3
 800e3fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	685b      	ldr	r3, [r3, #4]
 800e402:	8959      	ldrh	r1, [r3, #10]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	8b3a      	ldrh	r2, [r7, #24]
 800e40a:	1a8a      	subs	r2, r1, r2
 800e40c:	b292      	uxth	r2, r2
 800e40e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	685b      	ldr	r3, [r3, #4]
 800e414:	8919      	ldrh	r1, [r3, #8]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	8b3a      	ldrh	r2, [r7, #24]
 800e41c:	1a8a      	subs	r2, r1, r2
 800e41e:	b292      	uxth	r2, r2
 800e420:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	68fa      	ldr	r2, [r7, #12]
 800e428:	68d2      	ldr	r2, [r2, #12]
 800e42a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	741a      	strb	r2, [r3, #16]
 800e434:	2200      	movs	r2, #0
 800e436:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	68da      	ldr	r2, [r3, #12]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	7a9b      	ldrb	r3, [r3, #10]
 800e440:	f003 0301 	and.w	r3, r3, #1
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <tcp_output_segment+0x158>
 800e448:	2318      	movs	r3, #24
 800e44a:	e000      	b.n	800e44e <tcp_output_segment+0x15a>
 800e44c:	2314      	movs	r3, #20
 800e44e:	4413      	add	r3, r2
 800e450:	69fa      	ldr	r2, [r7, #28]
 800e452:	429a      	cmp	r2, r3
 800e454:	d006      	beq.n	800e464 <tcp_output_segment+0x170>
 800e456:	4b10      	ldr	r3, [pc, #64]	@ (800e498 <tcp_output_segment+0x1a4>)
 800e458:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e45c:	4914      	ldr	r1, [pc, #80]	@ (800e4b0 <tcp_output_segment+0x1bc>)
 800e45e:	4810      	ldr	r0, [pc, #64]	@ (800e4a0 <tcp_output_segment+0x1ac>)
 800e460:	f003 fb32 	bl	8011ac8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6858      	ldr	r0, [r3, #4]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	1d1c      	adds	r4, r3, #4
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	7add      	ldrb	r5, [r3, #11]
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	7a9b      	ldrb	r3, [r3, #10]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	9202      	str	r2, [sp, #8]
 800e47a:	2206      	movs	r2, #6
 800e47c:	9201      	str	r2, [sp, #4]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	462b      	mov	r3, r5
 800e482:	4622      	mov	r2, r4
 800e484:	f002 f9f2 	bl	801086c <ip4_output_if>
 800e488:	4603      	mov	r3, r0
 800e48a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e48c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3720      	adds	r7, #32
 800e494:	46bd      	mov	sp, r7
 800e496:	bdb0      	pop	{r4, r5, r7, pc}
 800e498:	08014098 	.word	0x08014098
 800e49c:	0801465c 	.word	0x0801465c
 800e4a0:	080140ec 	.word	0x080140ec
 800e4a4:	0801467c 	.word	0x0801467c
 800e4a8:	0801469c 	.word	0x0801469c
 800e4ac:	200088e0 	.word	0x200088e0
 800e4b0:	080146c0 	.word	0x080146c0

0800e4b4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e4b4:	b5b0      	push	{r4, r5, r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d106      	bne.n	800e4d0 <tcp_rexmit_rto_prepare+0x1c>
 800e4c2:	4b31      	ldr	r3, [pc, #196]	@ (800e588 <tcp_rexmit_rto_prepare+0xd4>)
 800e4c4:	f240 6263 	movw	r2, #1635	@ 0x663
 800e4c8:	4930      	ldr	r1, [pc, #192]	@ (800e58c <tcp_rexmit_rto_prepare+0xd8>)
 800e4ca:	4831      	ldr	r0, [pc, #196]	@ (800e590 <tcp_rexmit_rto_prepare+0xdc>)
 800e4cc:	f003 fafc 	bl	8011ac8 <iprintf>

  if (pcb->unacked == NULL) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e4d8:	f06f 0305 	mvn.w	r3, #5
 800e4dc:	e050      	b.n	800e580 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e00b      	b.n	800e4fe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f7ff fee4 	bl	800e2b4 <tcp_output_segment_busy>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d002      	beq.n	800e4f8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e4f2:	f06f 0305 	mvn.w	r3, #5
 800e4f6:	e043      	b.n	800e580 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60fb      	str	r3, [r7, #12]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1ef      	bne.n	800e4e6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7ff fed4 	bl	800e2b4 <tcp_output_segment_busy>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d002      	beq.n	800e518 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e512:	f06f 0305 	mvn.w	r3, #5
 800e516:	e033      	b.n	800e580 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	8b5b      	ldrh	r3, [r3, #26]
 800e532:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	4618      	mov	r0, r3
 800e544:	f7f9 f83f 	bl	80075c6 <lwip_htonl>
 800e548:	4604      	mov	r4, r0
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	891b      	ldrh	r3, [r3, #8]
 800e54e:	461d      	mov	r5, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	899b      	ldrh	r3, [r3, #12]
 800e556:	b29b      	uxth	r3, r3
 800e558:	4618      	mov	r0, r3
 800e55a:	f7f9 f81f 	bl	800759c <lwip_htons>
 800e55e:	4603      	mov	r3, r0
 800e560:	b2db      	uxtb	r3, r3
 800e562:	f003 0303 	and.w	r3, r3, #3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <tcp_rexmit_rto_prepare+0xba>
 800e56a:	2301      	movs	r3, #1
 800e56c:	e000      	b.n	800e570 <tcp_rexmit_rto_prepare+0xbc>
 800e56e:	2300      	movs	r3, #0
 800e570:	442b      	add	r3, r5
 800e572:	18e2      	adds	r2, r4, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bdb0      	pop	{r4, r5, r7, pc}
 800e588:	08014098 	.word	0x08014098
 800e58c:	080146d4 	.word	0x080146d4
 800e590:	080140ec 	.word	0x080140ec

0800e594 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <tcp_rexmit_rto_commit+0x1c>
 800e5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e5d8 <tcp_rexmit_rto_commit+0x44>)
 800e5a4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e5a8:	490c      	ldr	r1, [pc, #48]	@ (800e5dc <tcp_rexmit_rto_commit+0x48>)
 800e5aa:	480d      	ldr	r0, [pc, #52]	@ (800e5e0 <tcp_rexmit_rto_commit+0x4c>)
 800e5ac:	f003 fa8c 	bl	8011ac8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5b6:	2bff      	cmp	r3, #255	@ 0xff
 800e5b8:	d007      	beq.n	800e5ca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	b2da      	uxtb	r2, r3
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff fc7e 	bl	800decc <tcp_output>
}
 800e5d0:	bf00      	nop
 800e5d2:	3708      	adds	r7, #8
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	08014098 	.word	0x08014098
 800e5dc:	080146f8 	.word	0x080146f8
 800e5e0:	080140ec 	.word	0x080140ec

0800e5e4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <tcp_rexmit_rto+0x1c>
 800e5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e61c <tcp_rexmit_rto+0x38>)
 800e5f4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e5f8:	4909      	ldr	r1, [pc, #36]	@ (800e620 <tcp_rexmit_rto+0x3c>)
 800e5fa:	480a      	ldr	r0, [pc, #40]	@ (800e624 <tcp_rexmit_rto+0x40>)
 800e5fc:	f003 fa64 	bl	8011ac8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff ff57 	bl	800e4b4 <tcp_rexmit_rto_prepare>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff ffc1 	bl	800e594 <tcp_rexmit_rto_commit>
  }
}
 800e612:	bf00      	nop
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	08014098 	.word	0x08014098
 800e620:	0801471c 	.word	0x0801471c
 800e624:	080140ec 	.word	0x080140ec

0800e628 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <tcp_rexmit+0x1c>
 800e636:	4b2f      	ldr	r3, [pc, #188]	@ (800e6f4 <tcp_rexmit+0xcc>)
 800e638:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e63c:	492e      	ldr	r1, [pc, #184]	@ (800e6f8 <tcp_rexmit+0xd0>)
 800e63e:	482f      	ldr	r0, [pc, #188]	@ (800e6fc <tcp_rexmit+0xd4>)
 800e640:	f003 fa42 	bl	8011ac8 <iprintf>

  if (pcb->unacked == NULL) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e64c:	f06f 0305 	mvn.w	r3, #5
 800e650:	e04c      	b.n	800e6ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e656:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e658:	68b8      	ldr	r0, [r7, #8]
 800e65a:	f7ff fe2b 	bl	800e2b4 <tcp_output_segment_busy>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d002      	beq.n	800e66a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e664:	f06f 0305 	mvn.w	r3, #5
 800e668:	e040      	b.n	800e6ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	336c      	adds	r3, #108	@ 0x6c
 800e676:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e678:	e002      	b.n	800e680 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d011      	beq.n	800e6ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	4618      	mov	r0, r3
 800e692:	f7f8 ff98 	bl	80075c6 <lwip_htonl>
 800e696:	4604      	mov	r4, r0
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7f8 ff91 	bl	80075c6 <lwip_htonl>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dbe6      	blt.n	800e67a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	68ba      	ldr	r2, [r7, #8]
 800e6b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d103      	bne.n	800e6ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6d0:	2bff      	cmp	r3, #255	@ 0xff
 800e6d2:	d007      	beq.n	800e6e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6da:	3301      	adds	r3, #1
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3714      	adds	r7, #20
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd90      	pop	{r4, r7, pc}
 800e6f4:	08014098 	.word	0x08014098
 800e6f8:	08014738 	.word	0x08014738
 800e6fc:	080140ec 	.word	0x080140ec

0800e700 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d106      	bne.n	800e71c <tcp_rexmit_fast+0x1c>
 800e70e:	4b2a      	ldr	r3, [pc, #168]	@ (800e7b8 <tcp_rexmit_fast+0xb8>)
 800e710:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e714:	4929      	ldr	r1, [pc, #164]	@ (800e7bc <tcp_rexmit_fast+0xbc>)
 800e716:	482a      	ldr	r0, [pc, #168]	@ (800e7c0 <tcp_rexmit_fast+0xc0>)
 800e718:	f003 f9d6 	bl	8011ac8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e720:	2b00      	cmp	r3, #0
 800e722:	d044      	beq.n	800e7ae <tcp_rexmit_fast+0xae>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	8b5b      	ldrh	r3, [r3, #26]
 800e728:	f003 0304 	and.w	r3, r3, #4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d13e      	bne.n	800e7ae <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7ff ff79 	bl	800e628 <tcp_rexmit>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d138      	bne.n	800e7ae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e748:	4293      	cmp	r3, r2
 800e74a:	bf28      	it	cs
 800e74c:	4613      	movcs	r3, r2
 800e74e:	b29b      	uxth	r3, r3
 800e750:	0fda      	lsrs	r2, r3, #31
 800e752:	4413      	add	r3, r2
 800e754:	105b      	asrs	r3, r3, #1
 800e756:	b29a      	uxth	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e764:	461a      	mov	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e76a:	005b      	lsls	r3, r3, #1
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d206      	bcs.n	800e77e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e774:	005b      	lsls	r3, r3, #1
 800e776:	b29a      	uxth	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e788:	4619      	mov	r1, r3
 800e78a:	0049      	lsls	r1, r1, #1
 800e78c:	440b      	add	r3, r1
 800e78e:	b29b      	uxth	r3, r3
 800e790:	4413      	add	r3, r2
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	8b5b      	ldrh	r3, [r3, #26]
 800e79e:	f043 0304 	orr.w	r3, r3, #4
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e7ae:	bf00      	nop
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	08014098 	.word	0x08014098
 800e7bc:	08014750 	.word	0x08014750
 800e7c0:	080140ec 	.word	0x080140ec

0800e7c4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	607b      	str	r3, [r7, #4]
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	817b      	strh	r3, [r7, #10]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e7d6:	897a      	ldrh	r2, [r7, #10]
 800e7d8:	893b      	ldrh	r3, [r7, #8]
 800e7da:	4413      	add	r3, r2
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	3314      	adds	r3, #20
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	2022      	movs	r0, #34	@ 0x22
 800e7ea:	f7f9 ff31 	bl	8008650 <pbuf_alloc>
 800e7ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d04d      	beq.n	800e892 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e7f6:	897b      	ldrh	r3, [r7, #10]
 800e7f8:	3313      	adds	r3, #19
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	8952      	ldrh	r2, [r2, #10]
 800e7fe:	4293      	cmp	r3, r2
 800e800:	db06      	blt.n	800e810 <tcp_output_alloc_header_common+0x4c>
 800e802:	4b26      	ldr	r3, [pc, #152]	@ (800e89c <tcp_output_alloc_header_common+0xd8>)
 800e804:	f240 7223 	movw	r2, #1827	@ 0x723
 800e808:	4925      	ldr	r1, [pc, #148]	@ (800e8a0 <tcp_output_alloc_header_common+0xdc>)
 800e80a:	4826      	ldr	r0, [pc, #152]	@ (800e8a4 <tcp_output_alloc_header_common+0xe0>)
 800e80c:	f003 f95c 	bl	8011ac8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e816:	8c3b      	ldrh	r3, [r7, #32]
 800e818:	4618      	mov	r0, r3
 800e81a:	f7f8 febf 	bl	800759c <lwip_htons>
 800e81e:	4603      	mov	r3, r0
 800e820:	461a      	mov	r2, r3
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e826:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e828:	4618      	mov	r0, r3
 800e82a:	f7f8 feb7 	bl	800759c <lwip_htons>
 800e82e:	4603      	mov	r3, r0
 800e830:	461a      	mov	r2, r3
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7f8 fec2 	bl	80075c6 <lwip_htonl>
 800e842:	4602      	mov	r2, r0
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e848:	897b      	ldrh	r3, [r7, #10]
 800e84a:	089b      	lsrs	r3, r3, #2
 800e84c:	b29b      	uxth	r3, r3
 800e84e:	3305      	adds	r3, #5
 800e850:	b29b      	uxth	r3, r3
 800e852:	031b      	lsls	r3, r3, #12
 800e854:	b29a      	uxth	r2, r3
 800e856:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	4313      	orrs	r3, r2
 800e85e:	b29b      	uxth	r3, r3
 800e860:	4618      	mov	r0, r3
 800e862:	f7f8 fe9b 	bl	800759c <lwip_htons>
 800e866:	4603      	mov	r3, r0
 800e868:	461a      	mov	r2, r3
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e86e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e870:	4618      	mov	r0, r3
 800e872:	f7f8 fe93 	bl	800759c <lwip_htons>
 800e876:	4603      	mov	r3, r0
 800e878:	461a      	mov	r2, r3
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	2200      	movs	r2, #0
 800e882:	741a      	strb	r2, [r3, #16]
 800e884:	2200      	movs	r2, #0
 800e886:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	2200      	movs	r2, #0
 800e88c:	749a      	strb	r2, [r3, #18]
 800e88e:	2200      	movs	r2, #0
 800e890:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e892:	697b      	ldr	r3, [r7, #20]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3718      	adds	r7, #24
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	08014098 	.word	0x08014098
 800e8a0:	08014770 	.word	0x08014770
 800e8a4:	080140ec 	.word	0x080140ec

0800e8a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e8a8:	b5b0      	push	{r4, r5, r7, lr}
 800e8aa:	b08a      	sub	sp, #40	@ 0x28
 800e8ac:	af04      	add	r7, sp, #16
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	607b      	str	r3, [r7, #4]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	817b      	strh	r3, [r7, #10]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d106      	bne.n	800e8ce <tcp_output_alloc_header+0x26>
 800e8c0:	4b15      	ldr	r3, [pc, #84]	@ (800e918 <tcp_output_alloc_header+0x70>)
 800e8c2:	f240 7242 	movw	r2, #1858	@ 0x742
 800e8c6:	4915      	ldr	r1, [pc, #84]	@ (800e91c <tcp_output_alloc_header+0x74>)
 800e8c8:	4815      	ldr	r0, [pc, #84]	@ (800e920 <tcp_output_alloc_header+0x78>)
 800e8ca:	f003 f8fd 	bl	8011ac8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	8adb      	ldrh	r3, [r3, #22]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	8b12      	ldrh	r2, [r2, #24]
 800e8da:	68f9      	ldr	r1, [r7, #12]
 800e8dc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e8de:	893d      	ldrh	r5, [r7, #8]
 800e8e0:	897c      	ldrh	r4, [r7, #10]
 800e8e2:	9103      	str	r1, [sp, #12]
 800e8e4:	2110      	movs	r1, #16
 800e8e6:	9102      	str	r1, [sp, #8]
 800e8e8:	9201      	str	r2, [sp, #4]
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	462a      	mov	r2, r5
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	f7ff ff67 	bl	800e7c4 <tcp_output_alloc_header_common>
 800e8f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d006      	beq.n	800e90c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e906:	441a      	add	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e90c:	697b      	ldr	r3, [r7, #20]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3718      	adds	r7, #24
 800e912:	46bd      	mov	sp, r7
 800e914:	bdb0      	pop	{r4, r5, r7, pc}
 800e916:	bf00      	nop
 800e918:	08014098 	.word	0x08014098
 800e91c:	080147a0 	.word	0x080147a0
 800e920:	080140ec 	.word	0x080140ec

0800e924 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b088      	sub	sp, #32
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4611      	mov	r1, r2
 800e930:	461a      	mov	r2, r3
 800e932:	460b      	mov	r3, r1
 800e934:	71fb      	strb	r3, [r7, #7]
 800e936:	4613      	mov	r3, r2
 800e938:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d106      	bne.n	800e952 <tcp_output_fill_options+0x2e>
 800e944:	4b12      	ldr	r3, [pc, #72]	@ (800e990 <tcp_output_fill_options+0x6c>)
 800e946:	f240 7256 	movw	r2, #1878	@ 0x756
 800e94a:	4912      	ldr	r1, [pc, #72]	@ (800e994 <tcp_output_fill_options+0x70>)
 800e94c:	4812      	ldr	r0, [pc, #72]	@ (800e998 <tcp_output_fill_options+0x74>)
 800e94e:	f003 f8bb 	bl	8011ac8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	3314      	adds	r3, #20
 800e95c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e95e:	8bfb      	ldrh	r3, [r7, #30]
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	461a      	mov	r2, r3
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	f003 0304 	and.w	r3, r3, #4
 800e96c:	4413      	add	r3, r2
 800e96e:	3314      	adds	r3, #20
 800e970:	69ba      	ldr	r2, [r7, #24]
 800e972:	4413      	add	r3, r2
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	429a      	cmp	r2, r3
 800e978:	d006      	beq.n	800e988 <tcp_output_fill_options+0x64>
 800e97a:	4b05      	ldr	r3, [pc, #20]	@ (800e990 <tcp_output_fill_options+0x6c>)
 800e97c:	f240 7275 	movw	r2, #1909	@ 0x775
 800e980:	4906      	ldr	r1, [pc, #24]	@ (800e99c <tcp_output_fill_options+0x78>)
 800e982:	4805      	ldr	r0, [pc, #20]	@ (800e998 <tcp_output_fill_options+0x74>)
 800e984:	f003 f8a0 	bl	8011ac8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e988:	bf00      	nop
 800e98a:	3720      	adds	r7, #32
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	08014098 	.word	0x08014098
 800e994:	080147c8 	.word	0x080147c8
 800e998:	080140ec 	.word	0x080140ec
 800e99c:	080146c0 	.word	0x080146c0

0800e9a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b08a      	sub	sp, #40	@ 0x28
 800e9a4:	af04      	add	r7, sp, #16
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	607a      	str	r2, [r7, #4]
 800e9ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d106      	bne.n	800e9c2 <tcp_output_control_segment+0x22>
 800e9b4:	4b1c      	ldr	r3, [pc, #112]	@ (800ea28 <tcp_output_control_segment+0x88>)
 800e9b6:	f240 7287 	movw	r2, #1927	@ 0x787
 800e9ba:	491c      	ldr	r1, [pc, #112]	@ (800ea2c <tcp_output_control_segment+0x8c>)
 800e9bc:	481c      	ldr	r0, [pc, #112]	@ (800ea30 <tcp_output_control_segment+0x90>)
 800e9be:	f003 f883 	bl	8011ac8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	6879      	ldr	r1, [r7, #4]
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7fe faea 	bl	800cfa0 <tcp_route>
 800e9cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d102      	bne.n	800e9da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e9d4:	23fc      	movs	r3, #252	@ 0xfc
 800e9d6:	75fb      	strb	r3, [r7, #23]
 800e9d8:	e01c      	b.n	800ea14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	7adb      	ldrb	r3, [r3, #11]
 800e9e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	7a9b      	ldrb	r3, [r3, #10]
 800e9ea:	757b      	strb	r3, [r7, #21]
 800e9ec:	e003      	b.n	800e9f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e9ee:	23ff      	movs	r3, #255	@ 0xff
 800e9f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e9f6:	7dba      	ldrb	r2, [r7, #22]
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	9302      	str	r3, [sp, #8]
 800e9fc:	2306      	movs	r3, #6
 800e9fe:	9301      	str	r3, [sp, #4]
 800ea00:	7d7b      	ldrb	r3, [r7, #21]
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	4613      	mov	r3, r2
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	6879      	ldr	r1, [r7, #4]
 800ea0a:	68b8      	ldr	r0, [r7, #8]
 800ea0c:	f001 ff2e 	bl	801086c <ip4_output_if>
 800ea10:	4603      	mov	r3, r0
 800ea12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ea14:	68b8      	ldr	r0, [r7, #8]
 800ea16:	f7fa f8ff 	bl	8008c18 <pbuf_free>
  return err;
 800ea1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	08014098 	.word	0x08014098
 800ea2c:	080147f0 	.word	0x080147f0
 800ea30:	080140ec 	.word	0x080140ec

0800ea34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ea34:	b590      	push	{r4, r7, lr}
 800ea36:	b08b      	sub	sp, #44	@ 0x2c
 800ea38:	af04      	add	r7, sp, #16
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
 800ea40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d106      	bne.n	800ea56 <tcp_rst+0x22>
 800ea48:	4b1f      	ldr	r3, [pc, #124]	@ (800eac8 <tcp_rst+0x94>)
 800ea4a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800ea4e:	491f      	ldr	r1, [pc, #124]	@ (800eacc <tcp_rst+0x98>)
 800ea50:	481f      	ldr	r0, [pc, #124]	@ (800ead0 <tcp_rst+0x9c>)
 800ea52:	f003 f839 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ea56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d106      	bne.n	800ea6a <tcp_rst+0x36>
 800ea5c:	4b1a      	ldr	r3, [pc, #104]	@ (800eac8 <tcp_rst+0x94>)
 800ea5e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800ea62:	491c      	ldr	r1, [pc, #112]	@ (800ead4 <tcp_rst+0xa0>)
 800ea64:	481a      	ldr	r0, [pc, #104]	@ (800ead0 <tcp_rst+0x9c>)
 800ea66:	f003 f82f 	bl	8011ac8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ea6e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800ea72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
 800ea76:	b29c      	uxth	r4, r3
 800ea78:	68b8      	ldr	r0, [r7, #8]
 800ea7a:	f7f8 fda4 	bl	80075c6 <lwip_htonl>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	8abb      	ldrh	r3, [r7, #20]
 800ea82:	9303      	str	r3, [sp, #12]
 800ea84:	2314      	movs	r3, #20
 800ea86:	9302      	str	r3, [sp, #8]
 800ea88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ea8a:	9301      	str	r3, [sp, #4]
 800ea8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	4613      	mov	r3, r2
 800ea92:	2200      	movs	r2, #0
 800ea94:	4621      	mov	r1, r4
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7ff fe94 	bl	800e7c4 <tcp_output_alloc_header_common>
 800ea9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00c      	beq.n	800eabe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	6939      	ldr	r1, [r7, #16]
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f7ff ff3a 	bl	800e924 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800eab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	6939      	ldr	r1, [r7, #16]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f7ff ff72 	bl	800e9a0 <tcp_output_control_segment>
 800eabc:	e000      	b.n	800eac0 <tcp_rst+0x8c>
    return;
 800eabe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800eac0:	371c      	adds	r7, #28
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd90      	pop	{r4, r7, pc}
 800eac6:	bf00      	nop
 800eac8:	08014098 	.word	0x08014098
 800eacc:	0801481c 	.word	0x0801481c
 800ead0:	080140ec 	.word	0x080140ec
 800ead4:	08014838 	.word	0x08014838

0800ead8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ead8:	b590      	push	{r4, r7, lr}
 800eada:	b087      	sub	sp, #28
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800eae0:	2300      	movs	r3, #0
 800eae2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800eae4:	2300      	movs	r3, #0
 800eae6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d106      	bne.n	800eafc <tcp_send_empty_ack+0x24>
 800eaee:	4b28      	ldr	r3, [pc, #160]	@ (800eb90 <tcp_send_empty_ack+0xb8>)
 800eaf0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800eaf4:	4927      	ldr	r1, [pc, #156]	@ (800eb94 <tcp_send_empty_ack+0xbc>)
 800eaf6:	4828      	ldr	r0, [pc, #160]	@ (800eb98 <tcp_send_empty_ack+0xc0>)
 800eaf8:	f002 ffe6 	bl	8011ac8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800eafc:	7dfb      	ldrb	r3, [r7, #23]
 800eafe:	009b      	lsls	r3, r3, #2
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	f003 0304 	and.w	r3, r3, #4
 800eb06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800eb08:	7d7b      	ldrb	r3, [r7, #21]
 800eb0a:	b29c      	uxth	r4, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7f8 fd58 	bl	80075c6 <lwip_htonl>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2200      	movs	r2, #0
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff fec3 	bl	800e8a8 <tcp_output_alloc_header>
 800eb22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d109      	bne.n	800eb3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	8b5b      	ldrh	r3, [r3, #26]
 800eb2e:	f043 0303 	orr.w	r3, r3, #3
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800eb38:	f06f 0301 	mvn.w	r3, #1
 800eb3c:	e023      	b.n	800eb86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800eb3e:	7dbb      	ldrb	r3, [r7, #22]
 800eb40:	7dfa      	ldrb	r2, [r7, #23]
 800eb42:	6939      	ldr	r1, [r7, #16]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff feed 	bl	800e924 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	6939      	ldr	r1, [r7, #16]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7ff ff24 	bl	800e9a0 <tcp_output_control_segment>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eb5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d007      	beq.n	800eb74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	8b5b      	ldrh	r3, [r3, #26]
 800eb68:	f043 0303 	orr.w	r3, r3, #3
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	835a      	strh	r2, [r3, #26]
 800eb72:	e006      	b.n	800eb82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	8b5b      	ldrh	r3, [r3, #26]
 800eb78:	f023 0303 	bic.w	r3, r3, #3
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800eb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	371c      	adds	r7, #28
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd90      	pop	{r4, r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	08014098 	.word	0x08014098
 800eb94:	08014854 	.word	0x08014854
 800eb98:	080140ec 	.word	0x080140ec

0800eb9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eb9c:	b590      	push	{r4, r7, lr}
 800eb9e:	b087      	sub	sp, #28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eba4:	2300      	movs	r3, #0
 800eba6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d106      	bne.n	800ebbc <tcp_keepalive+0x20>
 800ebae:	4b18      	ldr	r3, [pc, #96]	@ (800ec10 <tcp_keepalive+0x74>)
 800ebb0:	f640 0224 	movw	r2, #2084	@ 0x824
 800ebb4:	4917      	ldr	r1, [pc, #92]	@ (800ec14 <tcp_keepalive+0x78>)
 800ebb6:	4818      	ldr	r0, [pc, #96]	@ (800ec18 <tcp_keepalive+0x7c>)
 800ebb8:	f002 ff86 	bl	8011ac8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	b29c      	uxth	r4, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f8 fcfd 	bl	80075c6 <lwip_htonl>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2200      	movs	r2, #0
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7ff fe68 	bl	800e8a8 <tcp_output_alloc_header>
 800ebd8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d102      	bne.n	800ebe6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ebe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe4:	e010      	b.n	800ec08 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	6939      	ldr	r1, [r7, #16]
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff fe99 	bl	800e924 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	6939      	ldr	r1, [r7, #16]
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff fed0 	bl	800e9a0 <tcp_output_control_segment>
 800ec00:	4603      	mov	r3, r0
 800ec02:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ec04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	371c      	adds	r7, #28
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd90      	pop	{r4, r7, pc}
 800ec10:	08014098 	.word	0x08014098
 800ec14:	08014874 	.word	0x08014874
 800ec18:	080140ec 	.word	0x080140ec

0800ec1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ec1c:	b590      	push	{r4, r7, lr}
 800ec1e:	b08b      	sub	sp, #44	@ 0x2c
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <tcp_zero_window_probe+0x22>
 800ec30:	4b4c      	ldr	r3, [pc, #304]	@ (800ed64 <tcp_zero_window_probe+0x148>)
 800ec32:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ec36:	494c      	ldr	r1, [pc, #304]	@ (800ed68 <tcp_zero_window_probe+0x14c>)
 800ec38:	484c      	ldr	r0, [pc, #304]	@ (800ed6c <tcp_zero_window_probe+0x150>)
 800ec3a:	f002 ff45 	bl	8011ac8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec42:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ec44:	6a3b      	ldr	r3, [r7, #32]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d101      	bne.n	800ec4e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	e086      	b.n	800ed5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ec54:	2bff      	cmp	r3, #255	@ 0xff
 800ec56:	d007      	beq.n	800ec68 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ec5e:	3301      	adds	r3, #1
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ec68:	6a3b      	ldr	r3, [r7, #32]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	899b      	ldrh	r3, [r3, #12]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f8 fc93 	bl	800759c <lwip_htons>
 800ec76:	4603      	mov	r3, r0
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	f003 0301 	and.w	r3, r3, #1
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d005      	beq.n	800ec8e <tcp_zero_window_probe+0x72>
 800ec82:	6a3b      	ldr	r3, [r7, #32]
 800ec84:	891b      	ldrh	r3, [r3, #8]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <tcp_zero_window_probe+0x72>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e000      	b.n	800ec90 <tcp_zero_window_probe+0x74>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ec92:	7ffb      	ldrb	r3, [r7, #31]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bf0c      	ite	eq
 800ec98:	2301      	moveq	r3, #1
 800ec9a:	2300      	movne	r3, #0
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800eca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eca4:	b299      	uxth	r1, r3
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	68db      	ldr	r3, [r3, #12]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	8bba      	ldrh	r2, [r7, #28]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7ff fdfa 	bl	800e8a8 <tcp_output_alloc_header>
 800ecb4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ecb6:	69bb      	ldr	r3, [r7, #24]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d102      	bne.n	800ecc2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ecbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc0:	e04c      	b.n	800ed5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ecc8:	7ffb      	ldrb	r3, [r7, #31]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d011      	beq.n	800ecf2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	899b      	ldrh	r3, [r3, #12]
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	b21b      	sxth	r3, r3
 800ecd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ecda:	b21c      	sxth	r4, r3
 800ecdc:	2011      	movs	r0, #17
 800ecde:	f7f8 fc5d 	bl	800759c <lwip_htons>
 800ece2:	4603      	mov	r3, r0
 800ece4:	b21b      	sxth	r3, r3
 800ece6:	4323      	orrs	r3, r4
 800ece8:	b21b      	sxth	r3, r3
 800ecea:	b29a      	uxth	r2, r3
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	819a      	strh	r2, [r3, #12]
 800ecf0:	e010      	b.n	800ed14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	3314      	adds	r3, #20
 800ecf8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	6858      	ldr	r0, [r3, #4]
 800ecfe:	6a3b      	ldr	r3, [r7, #32]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	891a      	ldrh	r2, [r3, #8]
 800ed04:	6a3b      	ldr	r3, [r7, #32]
 800ed06:	891b      	ldrh	r3, [r3, #8]
 800ed08:	1ad3      	subs	r3, r2, r3
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	6939      	ldr	r1, [r7, #16]
 800ed10:	f7fa f96c 	bl	8008fec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ed14:	6a3b      	ldr	r3, [r7, #32]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7f8 fc53 	bl	80075c6 <lwip_htonl>
 800ed20:	4603      	mov	r3, r0
 800ed22:	3301      	adds	r3, #1
 800ed24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	da02      	bge.n	800ed38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ed38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	69b9      	ldr	r1, [r7, #24]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7ff fdef 	bl	800e924 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	69b9      	ldr	r1, [r7, #24]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff fe26 	bl	800e9a0 <tcp_output_control_segment>
 800ed54:	4603      	mov	r3, r0
 800ed56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ed58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	372c      	adds	r7, #44	@ 0x2c
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd90      	pop	{r4, r7, pc}
 800ed64:	08014098 	.word	0x08014098
 800ed68:	08014890 	.word	0x08014890
 800ed6c:	080140ec 	.word	0x080140ec

0800ed70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ed78:	f7fa fab8 	bl	80092ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ed7c:	4b0a      	ldr	r3, [pc, #40]	@ (800eda8 <tcpip_tcp_timer+0x38>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d103      	bne.n	800ed8c <tcpip_tcp_timer+0x1c>
 800ed84:	4b09      	ldr	r3, [pc, #36]	@ (800edac <tcpip_tcp_timer+0x3c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	4908      	ldr	r1, [pc, #32]	@ (800edb0 <tcpip_tcp_timer+0x40>)
 800ed90:	20fa      	movs	r0, #250	@ 0xfa
 800ed92:	f000 f8f3 	bl	800ef7c <sys_timeout>
 800ed96:	e003      	b.n	800eda0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ed98:	4b06      	ldr	r3, [pc, #24]	@ (800edb4 <tcpip_tcp_timer+0x44>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	601a      	str	r2, [r3, #0]
  }
}
 800ed9e:	bf00      	nop
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	200088ec 	.word	0x200088ec
 800edac:	200088f0 	.word	0x200088f0
 800edb0:	0800ed71 	.word	0x0800ed71
 800edb4:	20008938 	.word	0x20008938

0800edb8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800edbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ede8 <tcp_timer_needed+0x30>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10f      	bne.n	800ede4 <tcp_timer_needed+0x2c>
 800edc4:	4b09      	ldr	r3, [pc, #36]	@ (800edec <tcp_timer_needed+0x34>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d103      	bne.n	800edd4 <tcp_timer_needed+0x1c>
 800edcc:	4b08      	ldr	r3, [pc, #32]	@ (800edf0 <tcp_timer_needed+0x38>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d007      	beq.n	800ede4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800edd4:	4b04      	ldr	r3, [pc, #16]	@ (800ede8 <tcp_timer_needed+0x30>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800edda:	2200      	movs	r2, #0
 800eddc:	4905      	ldr	r1, [pc, #20]	@ (800edf4 <tcp_timer_needed+0x3c>)
 800edde:	20fa      	movs	r0, #250	@ 0xfa
 800ede0:	f000 f8cc 	bl	800ef7c <sys_timeout>
  }
}
 800ede4:	bf00      	nop
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	20008938 	.word	0x20008938
 800edec:	200088ec 	.word	0x200088ec
 800edf0:	200088f0 	.word	0x200088f0
 800edf4:	0800ed71 	.word	0x0800ed71

0800edf8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ee04:	2006      	movs	r0, #6
 800ee06:	f7f9 f841 	bl	8007e8c <memp_malloc>
 800ee0a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d109      	bne.n	800ee26 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d151      	bne.n	800eebc <sys_timeout_abs+0xc4>
 800ee18:	4b2a      	ldr	r3, [pc, #168]	@ (800eec4 <sys_timeout_abs+0xcc>)
 800ee1a:	22be      	movs	r2, #190	@ 0xbe
 800ee1c:	492a      	ldr	r1, [pc, #168]	@ (800eec8 <sys_timeout_abs+0xd0>)
 800ee1e:	482b      	ldr	r0, [pc, #172]	@ (800eecc <sys_timeout_abs+0xd4>)
 800ee20:	f002 fe52 	bl	8011ac8 <iprintf>
    return;
 800ee24:	e04a      	b.n	800eebc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	68ba      	ldr	r2, [r7, #8]
 800ee30:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ee3e:	4b24      	ldr	r3, [pc, #144]	@ (800eed0 <sys_timeout_abs+0xd8>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d103      	bne.n	800ee4e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ee46:	4a22      	ldr	r2, [pc, #136]	@ (800eed0 <sys_timeout_abs+0xd8>)
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	6013      	str	r3, [r2, #0]
    return;
 800ee4c:	e037      	b.n	800eebe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	685a      	ldr	r2, [r3, #4]
 800ee52:	4b1f      	ldr	r3, [pc, #124]	@ (800eed0 <sys_timeout_abs+0xd8>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	0fdb      	lsrs	r3, r3, #31
 800ee5c:	f003 0301 	and.w	r3, r3, #1
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d007      	beq.n	800ee76 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ee66:	4b1a      	ldr	r3, [pc, #104]	@ (800eed0 <sys_timeout_abs+0xd8>)
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ee6e:	4a18      	ldr	r2, [pc, #96]	@ (800eed0 <sys_timeout_abs+0xd8>)
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	6013      	str	r3, [r2, #0]
 800ee74:	e023      	b.n	800eebe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ee76:	4b16      	ldr	r3, [pc, #88]	@ (800eed0 <sys_timeout_abs+0xd8>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	617b      	str	r3, [r7, #20]
 800ee7c:	e01a      	b.n	800eeb4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00b      	beq.n	800ee9e <sys_timeout_abs+0xa6>
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	0fdb      	lsrs	r3, r3, #31
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d007      	beq.n	800eeae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	601a      	str	r2, [r3, #0]
        break;
 800eeac:	e007      	b.n	800eebe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	617b      	str	r3, [r7, #20]
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d1e1      	bne.n	800ee7e <sys_timeout_abs+0x86>
 800eeba:	e000      	b.n	800eebe <sys_timeout_abs+0xc6>
    return;
 800eebc:	bf00      	nop
      }
    }
  }
}
 800eebe:	3718      	adds	r7, #24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	080148b4 	.word	0x080148b4
 800eec8:	080148e8 	.word	0x080148e8
 800eecc:	08014928 	.word	0x08014928
 800eed0:	20008930 	.word	0x20008930

0800eed4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	4798      	blx	r3

  now = sys_now();
 800eee6:	f7f8 f981 	bl	80071ec <sys_now>
 800eeea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	4b0f      	ldr	r3, [pc, #60]	@ (800ef30 <lwip_cyclic_timer+0x5c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4413      	add	r3, r2
 800eef6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	0fdb      	lsrs	r3, r3, #31
 800ef00:	f003 0301 	and.w	r3, r3, #1
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d009      	beq.n	800ef1e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	4413      	add	r3, r2
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	4907      	ldr	r1, [pc, #28]	@ (800ef34 <lwip_cyclic_timer+0x60>)
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff ff6e 	bl	800edf8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ef1c:	e004      	b.n	800ef28 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	4904      	ldr	r1, [pc, #16]	@ (800ef34 <lwip_cyclic_timer+0x60>)
 800ef22:	68f8      	ldr	r0, [r7, #12]
 800ef24:	f7ff ff68 	bl	800edf8 <sys_timeout_abs>
}
 800ef28:	bf00      	nop
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20008934 	.word	0x20008934
 800ef34:	0800eed5 	.word	0x0800eed5

0800ef38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ef3e:	2301      	movs	r3, #1
 800ef40:	607b      	str	r3, [r7, #4]
 800ef42:	e00e      	b.n	800ef62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ef44:	4a0b      	ldr	r2, [pc, #44]	@ (800ef74 <sys_timeouts_init+0x3c>)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	4a08      	ldr	r2, [pc, #32]	@ (800ef74 <sys_timeouts_init+0x3c>)
 800ef52:	4413      	add	r3, r2
 800ef54:	461a      	mov	r2, r3
 800ef56:	4908      	ldr	r1, [pc, #32]	@ (800ef78 <sys_timeouts_init+0x40>)
 800ef58:	f000 f810 	bl	800ef7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	607b      	str	r3, [r7, #4]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d9ed      	bls.n	800ef44 <sys_timeouts_init+0xc>
  }
}
 800ef68:	bf00      	nop
 800ef6a:	bf00      	nop
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	080154a8 	.word	0x080154a8
 800ef78:	0800eed5 	.word	0x0800eed5

0800ef7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef8e:	d306      	bcc.n	800ef9e <sys_timeout+0x22>
 800ef90:	4b0a      	ldr	r3, [pc, #40]	@ (800efbc <sys_timeout+0x40>)
 800ef92:	f240 1229 	movw	r2, #297	@ 0x129
 800ef96:	490a      	ldr	r1, [pc, #40]	@ (800efc0 <sys_timeout+0x44>)
 800ef98:	480a      	ldr	r0, [pc, #40]	@ (800efc4 <sys_timeout+0x48>)
 800ef9a:	f002 fd95 	bl	8011ac8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef9e:	f7f8 f925 	bl	80071ec <sys_now>
 800efa2:	4602      	mov	r2, r0
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efaa:	687a      	ldr	r2, [r7, #4]
 800efac:	68b9      	ldr	r1, [r7, #8]
 800efae:	6978      	ldr	r0, [r7, #20]
 800efb0:	f7ff ff22 	bl	800edf8 <sys_timeout_abs>
#endif
}
 800efb4:	bf00      	nop
 800efb6:	3718      	adds	r7, #24
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	080148b4 	.word	0x080148b4
 800efc0:	08014950 	.word	0x08014950
 800efc4:	08014928 	.word	0x08014928

0800efc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800efcc:	f002 fc7c 	bl	80118c8 <rand>
 800efd0:	4603      	mov	r3, r0
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800efd8:	b29b      	uxth	r3, r3
 800efda:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800efde:	b29a      	uxth	r2, r3
 800efe0:	4b01      	ldr	r3, [pc, #4]	@ (800efe8 <udp_init+0x20>)
 800efe2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800efe4:	bf00      	nop
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	20000028 	.word	0x20000028

0800efec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	4613      	mov	r3, r2
 800eff8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d105      	bne.n	800f00c <udp_input_local_match+0x20>
 800f000:	4b27      	ldr	r3, [pc, #156]	@ (800f0a0 <udp_input_local_match+0xb4>)
 800f002:	2287      	movs	r2, #135	@ 0x87
 800f004:	4927      	ldr	r1, [pc, #156]	@ (800f0a4 <udp_input_local_match+0xb8>)
 800f006:	4828      	ldr	r0, [pc, #160]	@ (800f0a8 <udp_input_local_match+0xbc>)
 800f008:	f002 fd5e 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d105      	bne.n	800f01e <udp_input_local_match+0x32>
 800f012:	4b23      	ldr	r3, [pc, #140]	@ (800f0a0 <udp_input_local_match+0xb4>)
 800f014:	2288      	movs	r2, #136	@ 0x88
 800f016:	4925      	ldr	r1, [pc, #148]	@ (800f0ac <udp_input_local_match+0xc0>)
 800f018:	4823      	ldr	r0, [pc, #140]	@ (800f0a8 <udp_input_local_match+0xbc>)
 800f01a:	f002 fd55 	bl	8011ac8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	7a1b      	ldrb	r3, [r3, #8]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00b      	beq.n	800f03e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	7a1a      	ldrb	r2, [r3, #8]
 800f02a:	4b21      	ldr	r3, [pc, #132]	@ (800f0b0 <udp_input_local_match+0xc4>)
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f032:	3301      	adds	r3, #1
 800f034:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f036:	429a      	cmp	r2, r3
 800f038:	d001      	beq.n	800f03e <udp_input_local_match+0x52>
    return 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	e02b      	b.n	800f096 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f03e:	79fb      	ldrb	r3, [r7, #7]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d018      	beq.n	800f076 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d013      	beq.n	800f072 <udp_input_local_match+0x86>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00f      	beq.n	800f072 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f052:	4b17      	ldr	r3, [pc, #92]	@ (800f0b0 <udp_input_local_match+0xc4>)
 800f054:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05a:	d00a      	beq.n	800f072 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	4b13      	ldr	r3, [pc, #76]	@ (800f0b0 <udp_input_local_match+0xc4>)
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	405a      	eors	r2, r3
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	3308      	adds	r3, #8
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d110      	bne.n	800f094 <udp_input_local_match+0xa8>
          return 1;
 800f072:	2301      	movs	r3, #1
 800f074:	e00f      	b.n	800f096 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d009      	beq.n	800f090 <udp_input_local_match+0xa4>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d005      	beq.n	800f090 <udp_input_local_match+0xa4>
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	4b09      	ldr	r3, [pc, #36]	@ (800f0b0 <udp_input_local_match+0xc4>)
 800f08a:	695b      	ldr	r3, [r3, #20]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d101      	bne.n	800f094 <udp_input_local_match+0xa8>
        return 1;
 800f090:	2301      	movs	r3, #1
 800f092:	e000      	b.n	800f096 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f094:	2300      	movs	r3, #0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	0801499c 	.word	0x0801499c
 800f0a4:	080149cc 	.word	0x080149cc
 800f0a8:	080149f0 	.word	0x080149f0
 800f0ac:	08014a18 	.word	0x08014a18
 800f0b0:	20005370 	.word	0x20005370

0800f0b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f0b4:	b590      	push	{r4, r7, lr}
 800f0b6:	b08d      	sub	sp, #52	@ 0x34
 800f0b8:	af02      	add	r7, sp, #8
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d105      	bne.n	800f0d4 <udp_input+0x20>
 800f0c8:	4b7c      	ldr	r3, [pc, #496]	@ (800f2bc <udp_input+0x208>)
 800f0ca:	22cf      	movs	r2, #207	@ 0xcf
 800f0cc:	497c      	ldr	r1, [pc, #496]	@ (800f2c0 <udp_input+0x20c>)
 800f0ce:	487d      	ldr	r0, [pc, #500]	@ (800f2c4 <udp_input+0x210>)
 800f0d0:	f002 fcfa 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d105      	bne.n	800f0e6 <udp_input+0x32>
 800f0da:	4b78      	ldr	r3, [pc, #480]	@ (800f2bc <udp_input+0x208>)
 800f0dc:	22d0      	movs	r2, #208	@ 0xd0
 800f0de:	497a      	ldr	r1, [pc, #488]	@ (800f2c8 <udp_input+0x214>)
 800f0e0:	4878      	ldr	r0, [pc, #480]	@ (800f2c4 <udp_input+0x210>)
 800f0e2:	f002 fcf1 	bl	8011ac8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	895b      	ldrh	r3, [r3, #10]
 800f0ea:	2b07      	cmp	r3, #7
 800f0ec:	d803      	bhi.n	800f0f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7f9 fd92 	bl	8008c18 <pbuf_free>
    goto end;
 800f0f4:	e0de      	b.n	800f2b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f0fc:	4b73      	ldr	r3, [pc, #460]	@ (800f2cc <udp_input+0x218>)
 800f0fe:	695b      	ldr	r3, [r3, #20]
 800f100:	4a72      	ldr	r2, [pc, #456]	@ (800f2cc <udp_input+0x218>)
 800f102:	6812      	ldr	r2, [r2, #0]
 800f104:	4611      	mov	r1, r2
 800f106:	4618      	mov	r0, r3
 800f108:	f001 fc88 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 800f10c:	4603      	mov	r3, r0
 800f10e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	b29b      	uxth	r3, r3
 800f116:	4618      	mov	r0, r3
 800f118:	f7f8 fa40 	bl	800759c <lwip_htons>
 800f11c:	4603      	mov	r3, r0
 800f11e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	885b      	ldrh	r3, [r3, #2]
 800f124:	b29b      	uxth	r3, r3
 800f126:	4618      	mov	r0, r3
 800f128:	f7f8 fa38 	bl	800759c <lwip_htons>
 800f12c:	4603      	mov	r3, r0
 800f12e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f130:	2300      	movs	r3, #0
 800f132:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f134:	2300      	movs	r3, #0
 800f136:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f138:	2300      	movs	r3, #0
 800f13a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f13c:	4b64      	ldr	r3, [pc, #400]	@ (800f2d0 <udp_input+0x21c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	627b      	str	r3, [r7, #36]	@ 0x24
 800f142:	e054      	b.n	800f1ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f146:	8a5b      	ldrh	r3, [r3, #18]
 800f148:	89fa      	ldrh	r2, [r7, #14]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d14a      	bne.n	800f1e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f14e:	7cfb      	ldrb	r3, [r7, #19]
 800f150:	461a      	mov	r2, r3
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f156:	f7ff ff49 	bl	800efec <udp_input_local_match>
 800f15a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d041      	beq.n	800f1e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f162:	7c1b      	ldrb	r3, [r3, #16]
 800f164:	f003 0304 	and.w	r3, r3, #4
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d11d      	bne.n	800f1a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d102      	bne.n	800f178 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f174:	61fb      	str	r3, [r7, #28]
 800f176:	e017      	b.n	800f1a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f178:	7cfb      	ldrb	r3, [r7, #19]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d014      	beq.n	800f1a8 <udp_input+0xf4>
 800f17e:	4b53      	ldr	r3, [pc, #332]	@ (800f2cc <udp_input+0x218>)
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f186:	d10f      	bne.n	800f1a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	3304      	adds	r3, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	429a      	cmp	r2, r3
 800f194:	d008      	beq.n	800f1a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	3304      	adds	r3, #4
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d101      	bne.n	800f1a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1aa:	8a9b      	ldrh	r3, [r3, #20]
 800f1ac:	8a3a      	ldrh	r2, [r7, #16]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d118      	bne.n	800f1e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d005      	beq.n	800f1c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	4b43      	ldr	r3, [pc, #268]	@ (800f2cc <udp_input+0x218>)
 800f1c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d10e      	bne.n	800f1e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d014      	beq.n	800f1f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ce:	68da      	ldr	r2, [r3, #12]
 800f1d0:	6a3b      	ldr	r3, [r7, #32]
 800f1d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f1d4:	4b3e      	ldr	r3, [pc, #248]	@ (800f2d0 <udp_input+0x21c>)
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f1dc:	4a3c      	ldr	r2, [pc, #240]	@ (800f2d0 <udp_input+0x21c>)
 800f1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f1e2:	e008      	b.n	800f1f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1a7      	bne.n	800f144 <udp_input+0x90>
 800f1f4:	e000      	b.n	800f1f8 <udp_input+0x144>
        break;
 800f1f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d101      	bne.n	800f202 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <udp_input+0x15a>
    for_us = 1;
 800f208:	2301      	movs	r3, #1
 800f20a:	76fb      	strb	r3, [r7, #27]
 800f20c:	e00a      	b.n	800f224 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	3304      	adds	r3, #4
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	4b2d      	ldr	r3, [pc, #180]	@ (800f2cc <udp_input+0x218>)
 800f216:	695b      	ldr	r3, [r3, #20]
 800f218:	429a      	cmp	r2, r3
 800f21a:	bf0c      	ite	eq
 800f21c:	2301      	moveq	r3, #1
 800f21e:	2300      	movne	r3, #0
 800f220:	b2db      	uxtb	r3, r3
 800f222:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f224:	7efb      	ldrb	r3, [r7, #27]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d041      	beq.n	800f2ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f22a:	2108      	movs	r1, #8
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7f9 fc6d 	bl	8008b0c <pbuf_remove_header>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00a      	beq.n	800f24e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f238:	4b20      	ldr	r3, [pc, #128]	@ (800f2bc <udp_input+0x208>)
 800f23a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f23e:	4925      	ldr	r1, [pc, #148]	@ (800f2d4 <udp_input+0x220>)
 800f240:	4820      	ldr	r0, [pc, #128]	@ (800f2c4 <udp_input+0x210>)
 800f242:	f002 fc41 	bl	8011ac8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f7f9 fce6 	bl	8008c18 <pbuf_free>
      goto end;
 800f24c:	e032      	b.n	800f2b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f250:	2b00      	cmp	r3, #0
 800f252:	d012      	beq.n	800f27a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25e:	699c      	ldr	r4, [r3, #24]
 800f260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f262:	69d8      	ldr	r0, [r3, #28]
 800f264:	8a3b      	ldrh	r3, [r7, #16]
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	4b1b      	ldr	r3, [pc, #108]	@ (800f2d8 <udp_input+0x224>)
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f26e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f270:	e021      	b.n	800f2b6 <udp_input+0x202>
        pbuf_free(p);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7f9 fcd0 	bl	8008c18 <pbuf_free>
        goto end;
 800f278:	e01c      	b.n	800f2b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f27a:	7cfb      	ldrb	r3, [r7, #19]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d112      	bne.n	800f2a6 <udp_input+0x1f2>
 800f280:	4b12      	ldr	r3, [pc, #72]	@ (800f2cc <udp_input+0x218>)
 800f282:	695b      	ldr	r3, [r3, #20]
 800f284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f288:	2be0      	cmp	r3, #224	@ 0xe0
 800f28a:	d00c      	beq.n	800f2a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f28c:	4b0f      	ldr	r3, [pc, #60]	@ (800f2cc <udp_input+0x218>)
 800f28e:	899b      	ldrh	r3, [r3, #12]
 800f290:	3308      	adds	r3, #8
 800f292:	b29b      	uxth	r3, r3
 800f294:	b21b      	sxth	r3, r3
 800f296:	4619      	mov	r1, r3
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7f9 fcaa 	bl	8008bf2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f29e:	2103      	movs	r1, #3
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f001 f89b 	bl	80103dc <icmp_dest_unreach>
      pbuf_free(p);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7f9 fcb6 	bl	8008c18 <pbuf_free>
  return;
 800f2ac:	e003      	b.n	800f2b6 <udp_input+0x202>
    pbuf_free(p);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7f9 fcb2 	bl	8008c18 <pbuf_free>
  return;
 800f2b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f2b6:	372c      	adds	r7, #44	@ 0x2c
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd90      	pop	{r4, r7, pc}
 800f2bc:	0801499c 	.word	0x0801499c
 800f2c0:	08014a40 	.word	0x08014a40
 800f2c4:	080149f0 	.word	0x080149f0
 800f2c8:	08014a58 	.word	0x08014a58
 800f2cc:	20005370 	.word	0x20005370
 800f2d0:	2000893c 	.word	0x2000893c
 800f2d4:	08014a74 	.word	0x08014a74
 800f2d8:	20005380 	.word	0x20005380

0800f2dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d01e      	beq.n	800f32a <udp_netif_ip_addr_changed+0x4e>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d01a      	beq.n	800f32a <udp_netif_ip_addr_changed+0x4e>
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d017      	beq.n	800f32a <udp_netif_ip_addr_changed+0x4e>
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d013      	beq.n	800f32a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f302:	4b0d      	ldr	r3, [pc, #52]	@ (800f338 <udp_netif_ip_addr_changed+0x5c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	60fb      	str	r3, [r7, #12]
 800f308:	e00c      	b.n	800f324 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	429a      	cmp	r2, r3
 800f314:	d103      	bne.n	800f31e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	60fb      	str	r3, [r7, #12]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1ef      	bne.n	800f30a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f32a:	bf00      	nop
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	2000893c 	.word	0x2000893c

0800f33c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f344:	4915      	ldr	r1, [pc, #84]	@ (800f39c <etharp_free_entry+0x60>)
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	4613      	mov	r3, r2
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	4413      	add	r3, r2
 800f34e:	00db      	lsls	r3, r3, #3
 800f350:	440b      	add	r3, r1
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d013      	beq.n	800f380 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f358:	4910      	ldr	r1, [pc, #64]	@ (800f39c <etharp_free_entry+0x60>)
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	4613      	mov	r3, r2
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	4413      	add	r3, r2
 800f362:	00db      	lsls	r3, r3, #3
 800f364:	440b      	add	r3, r1
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f9 fc55 	bl	8008c18 <pbuf_free>
    arp_table[i].q = NULL;
 800f36e:	490b      	ldr	r1, [pc, #44]	@ (800f39c <etharp_free_entry+0x60>)
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	4613      	mov	r3, r2
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	4413      	add	r3, r2
 800f378:	00db      	lsls	r3, r3, #3
 800f37a:	440b      	add	r3, r1
 800f37c:	2200      	movs	r2, #0
 800f37e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f380:	4906      	ldr	r1, [pc, #24]	@ (800f39c <etharp_free_entry+0x60>)
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	4613      	mov	r3, r2
 800f386:	005b      	lsls	r3, r3, #1
 800f388:	4413      	add	r3, r2
 800f38a:	00db      	lsls	r3, r3, #3
 800f38c:	440b      	add	r3, r1
 800f38e:	3314      	adds	r3, #20
 800f390:	2200      	movs	r2, #0
 800f392:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f394:	bf00      	nop
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	20008940 	.word	0x20008940

0800f3a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	607b      	str	r3, [r7, #4]
 800f3aa:	e096      	b.n	800f4da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f3ac:	494f      	ldr	r1, [pc, #316]	@ (800f4ec <etharp_tmr+0x14c>)
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	4413      	add	r3, r2
 800f3b6:	00db      	lsls	r3, r3, #3
 800f3b8:	440b      	add	r3, r1
 800f3ba:	3314      	adds	r3, #20
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f3c0:	78fb      	ldrb	r3, [r7, #3]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f000 8086 	beq.w	800f4d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f3c8:	4948      	ldr	r1, [pc, #288]	@ (800f4ec <etharp_tmr+0x14c>)
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	4413      	add	r3, r2
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	440b      	add	r3, r1
 800f3d6:	3312      	adds	r3, #18
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	b298      	uxth	r0, r3
 800f3de:	4943      	ldr	r1, [pc, #268]	@ (800f4ec <etharp_tmr+0x14c>)
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	005b      	lsls	r3, r3, #1
 800f3e6:	4413      	add	r3, r2
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	440b      	add	r3, r1
 800f3ec:	3312      	adds	r3, #18
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f3f2:	493e      	ldr	r1, [pc, #248]	@ (800f4ec <etharp_tmr+0x14c>)
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	4413      	add	r3, r2
 800f3fc:	00db      	lsls	r3, r3, #3
 800f3fe:	440b      	add	r3, r1
 800f400:	3312      	adds	r3, #18
 800f402:	881b      	ldrh	r3, [r3, #0]
 800f404:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800f408:	d215      	bcs.n	800f436 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f40a:	4938      	ldr	r1, [pc, #224]	@ (800f4ec <etharp_tmr+0x14c>)
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	4613      	mov	r3, r2
 800f410:	005b      	lsls	r3, r3, #1
 800f412:	4413      	add	r3, r2
 800f414:	00db      	lsls	r3, r3, #3
 800f416:	440b      	add	r3, r1
 800f418:	3314      	adds	r3, #20
 800f41a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d10e      	bne.n	800f43e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f420:	4932      	ldr	r1, [pc, #200]	@ (800f4ec <etharp_tmr+0x14c>)
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	4613      	mov	r3, r2
 800f426:	005b      	lsls	r3, r3, #1
 800f428:	4413      	add	r3, r2
 800f42a:	00db      	lsls	r3, r3, #3
 800f42c:	440b      	add	r3, r1
 800f42e:	3312      	adds	r3, #18
 800f430:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f432:	2b04      	cmp	r3, #4
 800f434:	d903      	bls.n	800f43e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff ff80 	bl	800f33c <etharp_free_entry>
 800f43c:	e04a      	b.n	800f4d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f43e:	492b      	ldr	r1, [pc, #172]	@ (800f4ec <etharp_tmr+0x14c>)
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	4613      	mov	r3, r2
 800f444:	005b      	lsls	r3, r3, #1
 800f446:	4413      	add	r3, r2
 800f448:	00db      	lsls	r3, r3, #3
 800f44a:	440b      	add	r3, r1
 800f44c:	3314      	adds	r3, #20
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	2b03      	cmp	r3, #3
 800f452:	d10a      	bne.n	800f46a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f454:	4925      	ldr	r1, [pc, #148]	@ (800f4ec <etharp_tmr+0x14c>)
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	4613      	mov	r3, r2
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	4413      	add	r3, r2
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	440b      	add	r3, r1
 800f462:	3314      	adds	r3, #20
 800f464:	2204      	movs	r2, #4
 800f466:	701a      	strb	r2, [r3, #0]
 800f468:	e034      	b.n	800f4d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f46a:	4920      	ldr	r1, [pc, #128]	@ (800f4ec <etharp_tmr+0x14c>)
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	4613      	mov	r3, r2
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	4413      	add	r3, r2
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	440b      	add	r3, r1
 800f478:	3314      	adds	r3, #20
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	2b04      	cmp	r3, #4
 800f47e:	d10a      	bne.n	800f496 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f480:	491a      	ldr	r1, [pc, #104]	@ (800f4ec <etharp_tmr+0x14c>)
 800f482:	687a      	ldr	r2, [r7, #4]
 800f484:	4613      	mov	r3, r2
 800f486:	005b      	lsls	r3, r3, #1
 800f488:	4413      	add	r3, r2
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	440b      	add	r3, r1
 800f48e:	3314      	adds	r3, #20
 800f490:	2202      	movs	r2, #2
 800f492:	701a      	strb	r2, [r3, #0]
 800f494:	e01e      	b.n	800f4d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f496:	4915      	ldr	r1, [pc, #84]	@ (800f4ec <etharp_tmr+0x14c>)
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	4613      	mov	r3, r2
 800f49c:	005b      	lsls	r3, r3, #1
 800f49e:	4413      	add	r3, r2
 800f4a0:	00db      	lsls	r3, r3, #3
 800f4a2:	440b      	add	r3, r1
 800f4a4:	3314      	adds	r3, #20
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d113      	bne.n	800f4d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f4ac:	490f      	ldr	r1, [pc, #60]	@ (800f4ec <etharp_tmr+0x14c>)
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	005b      	lsls	r3, r3, #1
 800f4b4:	4413      	add	r3, r2
 800f4b6:	00db      	lsls	r3, r3, #3
 800f4b8:	440b      	add	r3, r1
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	6818      	ldr	r0, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	005b      	lsls	r3, r3, #1
 800f4c4:	4413      	add	r3, r2
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	4a08      	ldr	r2, [pc, #32]	@ (800f4ec <etharp_tmr+0x14c>)
 800f4ca:	4413      	add	r3, r2
 800f4cc:	3304      	adds	r3, #4
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	f000 fe6e 	bl	80101b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	607b      	str	r3, [r7, #4]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b09      	cmp	r3, #9
 800f4de:	f77f af65 	ble.w	800f3ac <etharp_tmr+0xc>
      }
    }
  }
}
 800f4e2:	bf00      	nop
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	20008940 	.word	0x20008940

0800f4f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08a      	sub	sp, #40	@ 0x28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	607a      	str	r2, [r7, #4]
 800f4fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f4fe:	230a      	movs	r3, #10
 800f500:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f502:	230a      	movs	r3, #10
 800f504:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f506:	230a      	movs	r3, #10
 800f508:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800f50a:	2300      	movs	r3, #0
 800f50c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f50e:	230a      	movs	r3, #10
 800f510:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	83bb      	strh	r3, [r7, #28]
 800f516:	2300      	movs	r3, #0
 800f518:	837b      	strh	r3, [r7, #26]
 800f51a:	2300      	movs	r3, #0
 800f51c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f51e:	2300      	movs	r3, #0
 800f520:	843b      	strh	r3, [r7, #32]
 800f522:	e0ae      	b.n	800f682 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f528:	49a6      	ldr	r1, [pc, #664]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f52a:	4613      	mov	r3, r2
 800f52c:	005b      	lsls	r3, r3, #1
 800f52e:	4413      	add	r3, r2
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	440b      	add	r3, r1
 800f534:	3314      	adds	r3, #20
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f53a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f53e:	2b0a      	cmp	r3, #10
 800f540:	d105      	bne.n	800f54e <etharp_find_entry+0x5e>
 800f542:	7dfb      	ldrb	r3, [r7, #23]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d102      	bne.n	800f54e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f548:	8c3b      	ldrh	r3, [r7, #32]
 800f54a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f54c:	e095      	b.n	800f67a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f54e:	7dfb      	ldrb	r3, [r7, #23]
 800f550:	2b00      	cmp	r3, #0
 800f552:	f000 8092 	beq.w	800f67a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f556:	7dfb      	ldrb	r3, [r7, #23]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d009      	beq.n	800f570 <etharp_find_entry+0x80>
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d806      	bhi.n	800f570 <etharp_find_entry+0x80>
 800f562:	4b99      	ldr	r3, [pc, #612]	@ (800f7c8 <etharp_find_entry+0x2d8>)
 800f564:	f240 1223 	movw	r2, #291	@ 0x123
 800f568:	4998      	ldr	r1, [pc, #608]	@ (800f7cc <etharp_find_entry+0x2dc>)
 800f56a:	4899      	ldr	r0, [pc, #612]	@ (800f7d0 <etharp_find_entry+0x2e0>)
 800f56c:	f002 faac 	bl	8011ac8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d020      	beq.n	800f5b8 <etharp_find_entry+0xc8>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6819      	ldr	r1, [r3, #0]
 800f57a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f57e:	4891      	ldr	r0, [pc, #580]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f580:	4613      	mov	r3, r2
 800f582:	005b      	lsls	r3, r3, #1
 800f584:	4413      	add	r3, r2
 800f586:	00db      	lsls	r3, r3, #3
 800f588:	4403      	add	r3, r0
 800f58a:	3304      	adds	r3, #4
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4299      	cmp	r1, r3
 800f590:	d112      	bne.n	800f5b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00c      	beq.n	800f5b2 <etharp_find_entry+0xc2>
 800f598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f59c:	4989      	ldr	r1, [pc, #548]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f59e:	4613      	mov	r3, r2
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	4413      	add	r3, r2
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	440b      	add	r3, r1
 800f5a8:	3308      	adds	r3, #8
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d102      	bne.n	800f5b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f5b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f5b6:	e100      	b.n	800f7ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f5b8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d140      	bne.n	800f640 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f5be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5c2:	4980      	ldr	r1, [pc, #512]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	4413      	add	r3, r2
 800f5ca:	00db      	lsls	r3, r3, #3
 800f5cc:	440b      	add	r3, r1
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d01a      	beq.n	800f60a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f5d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5d8:	497a      	ldr	r1, [pc, #488]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f5da:	4613      	mov	r3, r2
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	4413      	add	r3, r2
 800f5e0:	00db      	lsls	r3, r3, #3
 800f5e2:	440b      	add	r3, r1
 800f5e4:	3312      	adds	r3, #18
 800f5e6:	881b      	ldrh	r3, [r3, #0]
 800f5e8:	8bba      	ldrh	r2, [r7, #28]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d845      	bhi.n	800f67a <etharp_find_entry+0x18a>
            old_queue = i;
 800f5ee:	8c3b      	ldrh	r3, [r7, #32]
 800f5f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f5f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f5f6:	4973      	ldr	r1, [pc, #460]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	4413      	add	r3, r2
 800f5fe:	00db      	lsls	r3, r3, #3
 800f600:	440b      	add	r3, r1
 800f602:	3312      	adds	r3, #18
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	83bb      	strh	r3, [r7, #28]
 800f608:	e037      	b.n	800f67a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f60a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f60e:	496d      	ldr	r1, [pc, #436]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f610:	4613      	mov	r3, r2
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	4413      	add	r3, r2
 800f616:	00db      	lsls	r3, r3, #3
 800f618:	440b      	add	r3, r1
 800f61a:	3312      	adds	r3, #18
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	8b7a      	ldrh	r2, [r7, #26]
 800f620:	429a      	cmp	r2, r3
 800f622:	d82a      	bhi.n	800f67a <etharp_find_entry+0x18a>
            old_pending = i;
 800f624:	8c3b      	ldrh	r3, [r7, #32]
 800f626:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800f628:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f62c:	4965      	ldr	r1, [pc, #404]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f62e:	4613      	mov	r3, r2
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	4413      	add	r3, r2
 800f634:	00db      	lsls	r3, r3, #3
 800f636:	440b      	add	r3, r1
 800f638:	3312      	adds	r3, #18
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	837b      	strh	r3, [r7, #26]
 800f63e:	e01c      	b.n	800f67a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f640:	7dfb      	ldrb	r3, [r7, #23]
 800f642:	2b01      	cmp	r3, #1
 800f644:	d919      	bls.n	800f67a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f64a:	495e      	ldr	r1, [pc, #376]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f64c:	4613      	mov	r3, r2
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	4413      	add	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	440b      	add	r3, r1
 800f656:	3312      	adds	r3, #18
 800f658:	881b      	ldrh	r3, [r3, #0]
 800f65a:	8b3a      	ldrh	r2, [r7, #24]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d80c      	bhi.n	800f67a <etharp_find_entry+0x18a>
            old_stable = i;
 800f660:	8c3b      	ldrh	r3, [r7, #32]
 800f662:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800f664:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f668:	4956      	ldr	r1, [pc, #344]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f66a:	4613      	mov	r3, r2
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	4413      	add	r3, r2
 800f670:	00db      	lsls	r3, r3, #3
 800f672:	440b      	add	r3, r1
 800f674:	3312      	adds	r3, #18
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f67a:	8c3b      	ldrh	r3, [r7, #32]
 800f67c:	3301      	adds	r3, #1
 800f67e:	b29b      	uxth	r3, r3
 800f680:	843b      	strh	r3, [r7, #32]
 800f682:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f686:	2b09      	cmp	r3, #9
 800f688:	f77f af4c 	ble.w	800f524 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f68c:	7afb      	ldrb	r3, [r7, #11]
 800f68e:	f003 0302 	and.w	r3, r3, #2
 800f692:	2b00      	cmp	r3, #0
 800f694:	d108      	bne.n	800f6a8 <etharp_find_entry+0x1b8>
 800f696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f69a:	2b0a      	cmp	r3, #10
 800f69c:	d107      	bne.n	800f6ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f69e:	7afb      	ldrb	r3, [r7, #11]
 800f6a0:	f003 0301 	and.w	r3, r3, #1
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d102      	bne.n	800f6ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f6ac:	e085      	b.n	800f7ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f6ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f6b2:	2b09      	cmp	r3, #9
 800f6b4:	dc02      	bgt.n	800f6bc <etharp_find_entry+0x1cc>
    i = empty;
 800f6b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f6b8:	843b      	strh	r3, [r7, #32]
 800f6ba:	e039      	b.n	800f730 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f6bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f6c0:	2b09      	cmp	r3, #9
 800f6c2:	dc14      	bgt.n	800f6ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f6c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f6c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f6c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f6cc:	493d      	ldr	r1, [pc, #244]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	4413      	add	r3, r2
 800f6d4:	00db      	lsls	r3, r3, #3
 800f6d6:	440b      	add	r3, r1
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d018      	beq.n	800f710 <etharp_find_entry+0x220>
 800f6de:	4b3a      	ldr	r3, [pc, #232]	@ (800f7c8 <etharp_find_entry+0x2d8>)
 800f6e0:	f240 126d 	movw	r2, #365	@ 0x16d
 800f6e4:	493b      	ldr	r1, [pc, #236]	@ (800f7d4 <etharp_find_entry+0x2e4>)
 800f6e6:	483a      	ldr	r0, [pc, #232]	@ (800f7d0 <etharp_find_entry+0x2e0>)
 800f6e8:	f002 f9ee 	bl	8011ac8 <iprintf>
 800f6ec:	e010      	b.n	800f710 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f6ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f6f2:	2b09      	cmp	r3, #9
 800f6f4:	dc02      	bgt.n	800f6fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f6f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f6f8:	843b      	strh	r3, [r7, #32]
 800f6fa:	e009      	b.n	800f710 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f6fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f700:	2b09      	cmp	r3, #9
 800f702:	dc02      	bgt.n	800f70a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f704:	8bfb      	ldrh	r3, [r7, #30]
 800f706:	843b      	strh	r3, [r7, #32]
 800f708:	e002      	b.n	800f710 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f70a:	f04f 33ff 	mov.w	r3, #4294967295
 800f70e:	e054      	b.n	800f7ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f710:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f714:	2b09      	cmp	r3, #9
 800f716:	dd06      	ble.n	800f726 <etharp_find_entry+0x236>
 800f718:	4b2b      	ldr	r3, [pc, #172]	@ (800f7c8 <etharp_find_entry+0x2d8>)
 800f71a:	f240 127f 	movw	r2, #383	@ 0x17f
 800f71e:	492e      	ldr	r1, [pc, #184]	@ (800f7d8 <etharp_find_entry+0x2e8>)
 800f720:	482b      	ldr	r0, [pc, #172]	@ (800f7d0 <etharp_find_entry+0x2e0>)
 800f722:	f002 f9d1 	bl	8011ac8 <iprintf>
    etharp_free_entry(i);
 800f726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff fe06 	bl	800f33c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f730:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f734:	2b09      	cmp	r3, #9
 800f736:	dd06      	ble.n	800f746 <etharp_find_entry+0x256>
 800f738:	4b23      	ldr	r3, [pc, #140]	@ (800f7c8 <etharp_find_entry+0x2d8>)
 800f73a:	f240 1283 	movw	r2, #387	@ 0x183
 800f73e:	4926      	ldr	r1, [pc, #152]	@ (800f7d8 <etharp_find_entry+0x2e8>)
 800f740:	4823      	ldr	r0, [pc, #140]	@ (800f7d0 <etharp_find_entry+0x2e0>)
 800f742:	f002 f9c1 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f74a:	491e      	ldr	r1, [pc, #120]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f74c:	4613      	mov	r3, r2
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	4413      	add	r3, r2
 800f752:	00db      	lsls	r3, r3, #3
 800f754:	440b      	add	r3, r1
 800f756:	3314      	adds	r3, #20
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d006      	beq.n	800f76c <etharp_find_entry+0x27c>
 800f75e:	4b1a      	ldr	r3, [pc, #104]	@ (800f7c8 <etharp_find_entry+0x2d8>)
 800f760:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f764:	491d      	ldr	r1, [pc, #116]	@ (800f7dc <etharp_find_entry+0x2ec>)
 800f766:	481a      	ldr	r0, [pc, #104]	@ (800f7d0 <etharp_find_entry+0x2e0>)
 800f768:	f002 f9ae 	bl	8011ac8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00b      	beq.n	800f78a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f772:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6819      	ldr	r1, [r3, #0]
 800f77a:	4812      	ldr	r0, [pc, #72]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	00db      	lsls	r3, r3, #3
 800f784:	4403      	add	r3, r0
 800f786:	3304      	adds	r3, #4
 800f788:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f78a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f78e:	490d      	ldr	r1, [pc, #52]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f790:	4613      	mov	r3, r2
 800f792:	005b      	lsls	r3, r3, #1
 800f794:	4413      	add	r3, r2
 800f796:	00db      	lsls	r3, r3, #3
 800f798:	440b      	add	r3, r1
 800f79a:	3312      	adds	r3, #18
 800f79c:	2200      	movs	r2, #0
 800f79e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f7a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f7a4:	4907      	ldr	r1, [pc, #28]	@ (800f7c4 <etharp_find_entry+0x2d4>)
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	4413      	add	r3, r2
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	440b      	add	r3, r1
 800f7b0:	3308      	adds	r3, #8
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f7b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3728      	adds	r7, #40	@ 0x28
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20008940 	.word	0x20008940
 800f7c8:	08014d00 	.word	0x08014d00
 800f7cc:	08014d38 	.word	0x08014d38
 800f7d0:	08014d78 	.word	0x08014d78
 800f7d4:	08014da0 	.word	0x08014da0
 800f7d8:	08014db8 	.word	0x08014db8
 800f7dc:	08014dcc 	.word	0x08014dcc

0800f7e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b088      	sub	sp, #32
 800f7e4:	af02      	add	r7, sp, #8
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	607a      	str	r2, [r7, #4]
 800f7ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f7f4:	2b06      	cmp	r3, #6
 800f7f6:	d006      	beq.n	800f806 <etharp_update_arp_entry+0x26>
 800f7f8:	4b48      	ldr	r3, [pc, #288]	@ (800f91c <etharp_update_arp_entry+0x13c>)
 800f7fa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f7fe:	4948      	ldr	r1, [pc, #288]	@ (800f920 <etharp_update_arp_entry+0x140>)
 800f800:	4848      	ldr	r0, [pc, #288]	@ (800f924 <etharp_update_arp_entry+0x144>)
 800f802:	f002 f961 	bl	8011ac8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d012      	beq.n	800f832 <etharp_update_arp_entry+0x52>
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00e      	beq.n	800f832 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68f9      	ldr	r1, [r7, #12]
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 f8fe 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 800f820:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f822:	2b00      	cmp	r3, #0
 800f824:	d105      	bne.n	800f832 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f82e:	2be0      	cmp	r3, #224	@ 0xe0
 800f830:	d102      	bne.n	800f838 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f832:	f06f 030f 	mvn.w	r3, #15
 800f836:	e06c      	b.n	800f912 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f838:	78fb      	ldrb	r3, [r7, #3]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	4619      	mov	r1, r3
 800f83e:	68b8      	ldr	r0, [r7, #8]
 800f840:	f7ff fe56 	bl	800f4f0 <etharp_find_entry>
 800f844:	4603      	mov	r3, r0
 800f846:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f848:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	da02      	bge.n	800f856 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f850:	8afb      	ldrh	r3, [r7, #22]
 800f852:	b25b      	sxtb	r3, r3
 800f854:	e05d      	b.n	800f912 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f856:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f85a:	4933      	ldr	r1, [pc, #204]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f85c:	4613      	mov	r3, r2
 800f85e:	005b      	lsls	r3, r3, #1
 800f860:	4413      	add	r3, r2
 800f862:	00db      	lsls	r3, r3, #3
 800f864:	440b      	add	r3, r1
 800f866:	3314      	adds	r3, #20
 800f868:	2202      	movs	r2, #2
 800f86a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f86c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f870:	492d      	ldr	r1, [pc, #180]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f872:	4613      	mov	r3, r2
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	4413      	add	r3, r2
 800f878:	00db      	lsls	r3, r3, #3
 800f87a:	440b      	add	r3, r1
 800f87c:	3308      	adds	r3, #8
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f886:	4613      	mov	r3, r2
 800f888:	005b      	lsls	r3, r3, #1
 800f88a:	4413      	add	r3, r2
 800f88c:	00db      	lsls	r3, r3, #3
 800f88e:	3308      	adds	r3, #8
 800f890:	4a25      	ldr	r2, [pc, #148]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f892:	4413      	add	r3, r2
 800f894:	3304      	adds	r3, #4
 800f896:	2206      	movs	r2, #6
 800f898:	6879      	ldr	r1, [r7, #4]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f002 fae1 	bl	8011e62 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f8a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8a4:	4920      	ldr	r1, [pc, #128]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	005b      	lsls	r3, r3, #1
 800f8aa:	4413      	add	r3, r2
 800f8ac:	00db      	lsls	r3, r3, #3
 800f8ae:	440b      	add	r3, r1
 800f8b0:	3312      	adds	r3, #18
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f8b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8ba:	491b      	ldr	r1, [pc, #108]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f8bc:	4613      	mov	r3, r2
 800f8be:	005b      	lsls	r3, r3, #1
 800f8c0:	4413      	add	r3, r2
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	440b      	add	r3, r1
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d021      	beq.n	800f910 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f8cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8d0:	4915      	ldr	r1, [pc, #84]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f8d2:	4613      	mov	r3, r2
 800f8d4:	005b      	lsls	r3, r3, #1
 800f8d6:	4413      	add	r3, r2
 800f8d8:	00db      	lsls	r3, r3, #3
 800f8da:	440b      	add	r3, r1
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f8e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f8e4:	4910      	ldr	r1, [pc, #64]	@ (800f928 <etharp_update_arp_entry+0x148>)
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	005b      	lsls	r3, r3, #1
 800f8ea:	4413      	add	r3, r2
 800f8ec:	00db      	lsls	r3, r3, #3
 800f8ee:	440b      	add	r3, r1
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f8fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6939      	ldr	r1, [r7, #16]
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f001 ff97 	bl	8011838 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f90a:	6938      	ldr	r0, [r7, #16]
 800f90c:	f7f9 f984 	bl	8008c18 <pbuf_free>
  }
  return ERR_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3718      	adds	r7, #24
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	08014d00 	.word	0x08014d00
 800f920:	08014df8 	.word	0x08014df8
 800f924:	08014d78 	.word	0x08014d78
 800f928:	20008940 	.word	0x20008940

0800f92c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f934:	2300      	movs	r3, #0
 800f936:	60fb      	str	r3, [r7, #12]
 800f938:	e01e      	b.n	800f978 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f93a:	4913      	ldr	r1, [pc, #76]	@ (800f988 <etharp_cleanup_netif+0x5c>)
 800f93c:	68fa      	ldr	r2, [r7, #12]
 800f93e:	4613      	mov	r3, r2
 800f940:	005b      	lsls	r3, r3, #1
 800f942:	4413      	add	r3, r2
 800f944:	00db      	lsls	r3, r3, #3
 800f946:	440b      	add	r3, r1
 800f948:	3314      	adds	r3, #20
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f94e:	7afb      	ldrb	r3, [r7, #11]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00e      	beq.n	800f972 <etharp_cleanup_netif+0x46>
 800f954:	490c      	ldr	r1, [pc, #48]	@ (800f988 <etharp_cleanup_netif+0x5c>)
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	4613      	mov	r3, r2
 800f95a:	005b      	lsls	r3, r3, #1
 800f95c:	4413      	add	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	440b      	add	r3, r1
 800f962:	3308      	adds	r3, #8
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d102      	bne.n	800f972 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7ff fce5 	bl	800f33c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	3301      	adds	r3, #1
 800f976:	60fb      	str	r3, [r7, #12]
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	2b09      	cmp	r3, #9
 800f97c:	dddd      	ble.n	800f93a <etharp_cleanup_netif+0xe>
    }
  }
}
 800f97e:	bf00      	nop
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	20008940 	.word	0x20008940

0800f98c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f98c:	b5b0      	push	{r4, r5, r7, lr}
 800f98e:	b08a      	sub	sp, #40	@ 0x28
 800f990:	af04      	add	r7, sp, #16
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d107      	bne.n	800f9ac <etharp_input+0x20>
 800f99c:	4b3d      	ldr	r3, [pc, #244]	@ (800fa94 <etharp_input+0x108>)
 800f99e:	f240 228a 	movw	r2, #650	@ 0x28a
 800f9a2:	493d      	ldr	r1, [pc, #244]	@ (800fa98 <etharp_input+0x10c>)
 800f9a4:	483d      	ldr	r0, [pc, #244]	@ (800fa9c <etharp_input+0x110>)
 800f9a6:	f002 f88f 	bl	8011ac8 <iprintf>
 800f9aa:	e06f      	b.n	800fa8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9bc:	d10c      	bne.n	800f9d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f9c2:	2b06      	cmp	r3, #6
 800f9c4:	d108      	bne.n	800f9d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f9ca:	2b04      	cmp	r3, #4
 800f9cc:	d104      	bne.n	800f9d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	885b      	ldrh	r3, [r3, #2]
 800f9d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f9d4:	2b08      	cmp	r3, #8
 800f9d6:	d003      	beq.n	800f9e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7f9 f91d 	bl	8008c18 <pbuf_free>
    return;
 800f9de:	e055      	b.n	800fa8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	330e      	adds	r3, #14
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f9e8:	693b      	ldr	r3, [r7, #16]
 800f9ea:	3318      	adds	r3, #24
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d102      	bne.n	800fa00 <etharp_input+0x74>
    for_us = 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	75fb      	strb	r3, [r7, #23]
 800f9fe:	e009      	b.n	800fa14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	3304      	adds	r3, #4
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	bf0c      	ite	eq
 800fa0c:	2301      	moveq	r3, #1
 800fa0e:	2300      	movne	r3, #0
 800fa10:	b2db      	uxtb	r3, r3
 800fa12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	f103 0208 	add.w	r2, r3, #8
 800fa1a:	7dfb      	ldrb	r3, [r7, #23]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d001      	beq.n	800fa24 <etharp_input+0x98>
 800fa20:	2301      	movs	r3, #1
 800fa22:	e000      	b.n	800fa26 <etharp_input+0x9a>
 800fa24:	2302      	movs	r3, #2
 800fa26:	f107 010c 	add.w	r1, r7, #12
 800fa2a:	6838      	ldr	r0, [r7, #0]
 800fa2c:	f7ff fed8 	bl	800f7e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	88db      	ldrh	r3, [r3, #6]
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa3a:	d003      	beq.n	800fa44 <etharp_input+0xb8>
 800fa3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa40:	d01e      	beq.n	800fa80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800fa42:	e020      	b.n	800fa86 <etharp_input+0xfa>
      if (for_us) {
 800fa44:	7dfb      	ldrb	r3, [r7, #23]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d01c      	beq.n	800fa84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	3208      	adds	r2, #8
        etharp_raw(netif,
 800fa64:	2102      	movs	r1, #2
 800fa66:	9103      	str	r1, [sp, #12]
 800fa68:	f107 010c 	add.w	r1, r7, #12
 800fa6c:	9102      	str	r1, [sp, #8]
 800fa6e:	9201      	str	r2, [sp, #4]
 800fa70:	9300      	str	r3, [sp, #0]
 800fa72:	462b      	mov	r3, r5
 800fa74:	4622      	mov	r2, r4
 800fa76:	4601      	mov	r1, r0
 800fa78:	6838      	ldr	r0, [r7, #0]
 800fa7a:	f000 faeb 	bl	8010054 <etharp_raw>
      break;
 800fa7e:	e001      	b.n	800fa84 <etharp_input+0xf8>
      break;
 800fa80:	bf00      	nop
 800fa82:	e000      	b.n	800fa86 <etharp_input+0xfa>
      break;
 800fa84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7f9 f8c6 	bl	8008c18 <pbuf_free>
}
 800fa8c:	3718      	adds	r7, #24
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bdb0      	pop	{r4, r5, r7, pc}
 800fa92:	bf00      	nop
 800fa94:	08014d00 	.word	0x08014d00
 800fa98:	08014e50 	.word	0x08014e50
 800fa9c:	08014d78 	.word	0x08014d78

0800faa0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af02      	add	r7, sp, #8
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	4613      	mov	r3, r2
 800faac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800faae:	79fa      	ldrb	r2, [r7, #7]
 800fab0:	4944      	ldr	r1, [pc, #272]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fab2:	4613      	mov	r3, r2
 800fab4:	005b      	lsls	r3, r3, #1
 800fab6:	4413      	add	r3, r2
 800fab8:	00db      	lsls	r3, r3, #3
 800faba:	440b      	add	r3, r1
 800fabc:	3314      	adds	r3, #20
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d806      	bhi.n	800fad2 <etharp_output_to_arp_index+0x32>
 800fac4:	4b40      	ldr	r3, [pc, #256]	@ (800fbc8 <etharp_output_to_arp_index+0x128>)
 800fac6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800faca:	4940      	ldr	r1, [pc, #256]	@ (800fbcc <etharp_output_to_arp_index+0x12c>)
 800facc:	4840      	ldr	r0, [pc, #256]	@ (800fbd0 <etharp_output_to_arp_index+0x130>)
 800face:	f001 fffb 	bl	8011ac8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800fad2:	79fa      	ldrb	r2, [r7, #7]
 800fad4:	493b      	ldr	r1, [pc, #236]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	3314      	adds	r3, #20
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	d153      	bne.n	800fb90 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fae8:	79fa      	ldrb	r2, [r7, #7]
 800faea:	4936      	ldr	r1, [pc, #216]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800faec:	4613      	mov	r3, r2
 800faee:	005b      	lsls	r3, r3, #1
 800faf0:	4413      	add	r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	440b      	add	r3, r1
 800faf6:	3312      	adds	r3, #18
 800faf8:	881b      	ldrh	r3, [r3, #0]
 800fafa:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800fafe:	d919      	bls.n	800fb34 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fb00:	79fa      	ldrb	r2, [r7, #7]
 800fb02:	4613      	mov	r3, r2
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	4413      	add	r3, r2
 800fb08:	00db      	lsls	r3, r3, #3
 800fb0a:	4a2e      	ldr	r2, [pc, #184]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fb0c:	4413      	add	r3, r2
 800fb0e:	3304      	adds	r3, #4
 800fb10:	4619      	mov	r1, r3
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f000 fb4c 	bl	80101b0 <etharp_request>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d138      	bne.n	800fb90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fb1e:	79fa      	ldrb	r2, [r7, #7]
 800fb20:	4928      	ldr	r1, [pc, #160]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fb22:	4613      	mov	r3, r2
 800fb24:	005b      	lsls	r3, r3, #1
 800fb26:	4413      	add	r3, r2
 800fb28:	00db      	lsls	r3, r3, #3
 800fb2a:	440b      	add	r3, r1
 800fb2c:	3314      	adds	r3, #20
 800fb2e:	2203      	movs	r2, #3
 800fb30:	701a      	strb	r2, [r3, #0]
 800fb32:	e02d      	b.n	800fb90 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fb34:	79fa      	ldrb	r2, [r7, #7]
 800fb36:	4923      	ldr	r1, [pc, #140]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fb38:	4613      	mov	r3, r2
 800fb3a:	005b      	lsls	r3, r3, #1
 800fb3c:	4413      	add	r3, r2
 800fb3e:	00db      	lsls	r3, r3, #3
 800fb40:	440b      	add	r3, r1
 800fb42:	3312      	adds	r3, #18
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800fb4a:	d321      	bcc.n	800fb90 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fb4c:	79fa      	ldrb	r2, [r7, #7]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	005b      	lsls	r3, r3, #1
 800fb52:	4413      	add	r3, r2
 800fb54:	00db      	lsls	r3, r3, #3
 800fb56:	4a1b      	ldr	r2, [pc, #108]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fb58:	4413      	add	r3, r2
 800fb5a:	1d19      	adds	r1, r3, #4
 800fb5c:	79fa      	ldrb	r2, [r7, #7]
 800fb5e:	4613      	mov	r3, r2
 800fb60:	005b      	lsls	r3, r3, #1
 800fb62:	4413      	add	r3, r2
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	3308      	adds	r3, #8
 800fb68:	4a16      	ldr	r2, [pc, #88]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fb6a:	4413      	add	r3, r2
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	461a      	mov	r2, r3
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f000 fafb 	bl	801016c <etharp_request_dst>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d109      	bne.n	800fb90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fb7c:	79fa      	ldrb	r2, [r7, #7]
 800fb7e:	4911      	ldr	r1, [pc, #68]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fb80:	4613      	mov	r3, r2
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	4413      	add	r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	440b      	add	r3, r1
 800fb8a:	3314      	adds	r3, #20
 800fb8c:	2203      	movs	r2, #3
 800fb8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800fb96:	79fa      	ldrb	r2, [r7, #7]
 800fb98:	4613      	mov	r3, r2
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	4413      	add	r3, r2
 800fb9e:	00db      	lsls	r3, r3, #3
 800fba0:	3308      	adds	r3, #8
 800fba2:	4a08      	ldr	r2, [pc, #32]	@ (800fbc4 <etharp_output_to_arp_index+0x124>)
 800fba4:	4413      	add	r3, r2
 800fba6:	3304      	adds	r3, #4
 800fba8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fbac:	9200      	str	r2, [sp, #0]
 800fbae:	460a      	mov	r2, r1
 800fbb0:	68b9      	ldr	r1, [r7, #8]
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	f001 fe40 	bl	8011838 <ethernet_output>
 800fbb8:	4603      	mov	r3, r0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20008940 	.word	0x20008940
 800fbc8:	08014d00 	.word	0x08014d00
 800fbcc:	08014e70 	.word	0x08014e70
 800fbd0:	08014d78 	.word	0x08014d78

0800fbd4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b08a      	sub	sp, #40	@ 0x28
 800fbd8:	af02      	add	r7, sp, #8
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d106      	bne.n	800fbf8 <etharp_output+0x24>
 800fbea:	4b73      	ldr	r3, [pc, #460]	@ (800fdb8 <etharp_output+0x1e4>)
 800fbec:	f240 321e 	movw	r2, #798	@ 0x31e
 800fbf0:	4972      	ldr	r1, [pc, #456]	@ (800fdbc <etharp_output+0x1e8>)
 800fbf2:	4873      	ldr	r0, [pc, #460]	@ (800fdc0 <etharp_output+0x1ec>)
 800fbf4:	f001 ff68 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d106      	bne.n	800fc0c <etharp_output+0x38>
 800fbfe:	4b6e      	ldr	r3, [pc, #440]	@ (800fdb8 <etharp_output+0x1e4>)
 800fc00:	f240 321f 	movw	r2, #799	@ 0x31f
 800fc04:	496f      	ldr	r1, [pc, #444]	@ (800fdc4 <etharp_output+0x1f0>)
 800fc06:	486e      	ldr	r0, [pc, #440]	@ (800fdc0 <etharp_output+0x1ec>)
 800fc08:	f001 ff5e 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d106      	bne.n	800fc20 <etharp_output+0x4c>
 800fc12:	4b69      	ldr	r3, [pc, #420]	@ (800fdb8 <etharp_output+0x1e4>)
 800fc14:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800fc18:	496b      	ldr	r1, [pc, #428]	@ (800fdc8 <etharp_output+0x1f4>)
 800fc1a:	4869      	ldr	r0, [pc, #420]	@ (800fdc0 <etharp_output+0x1ec>)
 800fc1c:	f001 ff54 	bl	8011ac8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	68f9      	ldr	r1, [r7, #12]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 fef8 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800fc32:	4b66      	ldr	r3, [pc, #408]	@ (800fdcc <etharp_output+0x1f8>)
 800fc34:	61fb      	str	r3, [r7, #28]
 800fc36:	e0af      	b.n	800fd98 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fc40:	2be0      	cmp	r3, #224	@ 0xe0
 800fc42:	d118      	bne.n	800fc76 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fc44:	2301      	movs	r3, #1
 800fc46:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fc4c:	235e      	movs	r3, #94	@ 0x5e
 800fc4e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	3301      	adds	r3, #1
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	3302      	adds	r3, #2
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	3303      	adds	r3, #3
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fc6e:	f107 0310 	add.w	r3, r7, #16
 800fc72:	61fb      	str	r3, [r7, #28]
 800fc74:	e090      	b.n	800fd98 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	3304      	adds	r3, #4
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	405a      	eors	r2, r3
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3308      	adds	r3, #8
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4013      	ands	r3, r2
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d012      	beq.n	800fcb4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fc94:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d00b      	beq.n	800fcb4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	330c      	adds	r3, #12
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d003      	beq.n	800fcae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	330c      	adds	r3, #12
 800fcaa:	61bb      	str	r3, [r7, #24]
 800fcac:	e002      	b.n	800fcb4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fcae:	f06f 0303 	mvn.w	r3, #3
 800fcb2:	e07d      	b.n	800fdb0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fcb4:	4b46      	ldr	r3, [pc, #280]	@ (800fdd0 <etharp_output+0x1fc>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	4619      	mov	r1, r3
 800fcba:	4a46      	ldr	r2, [pc, #280]	@ (800fdd4 <etharp_output+0x200>)
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	005b      	lsls	r3, r3, #1
 800fcc0:	440b      	add	r3, r1
 800fcc2:	00db      	lsls	r3, r3, #3
 800fcc4:	4413      	add	r3, r2
 800fcc6:	3314      	adds	r3, #20
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d925      	bls.n	800fd1a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fcce:	4b40      	ldr	r3, [pc, #256]	@ (800fdd0 <etharp_output+0x1fc>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	4619      	mov	r1, r3
 800fcd4:	4a3f      	ldr	r2, [pc, #252]	@ (800fdd4 <etharp_output+0x200>)
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	440b      	add	r3, r1
 800fcdc:	00db      	lsls	r3, r3, #3
 800fcde:	4413      	add	r3, r2
 800fce0:	3308      	adds	r3, #8
 800fce2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fce4:	68fa      	ldr	r2, [r7, #12]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d117      	bne.n	800fd1a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	4b38      	ldr	r3, [pc, #224]	@ (800fdd0 <etharp_output+0x1fc>)
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	4937      	ldr	r1, [pc, #220]	@ (800fdd4 <etharp_output+0x200>)
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	4403      	add	r3, r0
 800fcfc:	00db      	lsls	r3, r3, #3
 800fcfe:	440b      	add	r3, r1
 800fd00:	3304      	adds	r3, #4
 800fd02:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d108      	bne.n	800fd1a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fd08:	4b31      	ldr	r3, [pc, #196]	@ (800fdd0 <etharp_output+0x1fc>)
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	68b9      	ldr	r1, [r7, #8]
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f7ff fec5 	bl	800faa0 <etharp_output_to_arp_index>
 800fd16:	4603      	mov	r3, r0
 800fd18:	e04a      	b.n	800fdb0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	75fb      	strb	r3, [r7, #23]
 800fd1e:	e031      	b.n	800fd84 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd20:	7dfa      	ldrb	r2, [r7, #23]
 800fd22:	492c      	ldr	r1, [pc, #176]	@ (800fdd4 <etharp_output+0x200>)
 800fd24:	4613      	mov	r3, r2
 800fd26:	005b      	lsls	r3, r3, #1
 800fd28:	4413      	add	r3, r2
 800fd2a:	00db      	lsls	r3, r3, #3
 800fd2c:	440b      	add	r3, r1
 800fd2e:	3314      	adds	r3, #20
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d923      	bls.n	800fd7e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fd36:	7dfa      	ldrb	r2, [r7, #23]
 800fd38:	4926      	ldr	r1, [pc, #152]	@ (800fdd4 <etharp_output+0x200>)
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	005b      	lsls	r3, r3, #1
 800fd3e:	4413      	add	r3, r2
 800fd40:	00db      	lsls	r3, r3, #3
 800fd42:	440b      	add	r3, r1
 800fd44:	3308      	adds	r3, #8
 800fd46:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd48:	68fa      	ldr	r2, [r7, #12]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d117      	bne.n	800fd7e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	6819      	ldr	r1, [r3, #0]
 800fd52:	7dfa      	ldrb	r2, [r7, #23]
 800fd54:	481f      	ldr	r0, [pc, #124]	@ (800fdd4 <etharp_output+0x200>)
 800fd56:	4613      	mov	r3, r2
 800fd58:	005b      	lsls	r3, r3, #1
 800fd5a:	4413      	add	r3, r2
 800fd5c:	00db      	lsls	r3, r3, #3
 800fd5e:	4403      	add	r3, r0
 800fd60:	3304      	adds	r3, #4
 800fd62:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fd64:	4299      	cmp	r1, r3
 800fd66:	d10a      	bne.n	800fd7e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fd68:	4a19      	ldr	r2, [pc, #100]	@ (800fdd0 <etharp_output+0x1fc>)
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	461a      	mov	r2, r3
 800fd72:	68b9      	ldr	r1, [r7, #8]
 800fd74:	68f8      	ldr	r0, [r7, #12]
 800fd76:	f7ff fe93 	bl	800faa0 <etharp_output_to_arp_index>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	e018      	b.n	800fdb0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	3301      	adds	r3, #1
 800fd82:	75fb      	strb	r3, [r7, #23]
 800fd84:	7dfb      	ldrb	r3, [r7, #23]
 800fd86:	2b09      	cmp	r3, #9
 800fd88:	d9ca      	bls.n	800fd20 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	69b9      	ldr	r1, [r7, #24]
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f000 f822 	bl	800fdd8 <etharp_query>
 800fd94:	4603      	mov	r3, r0
 800fd96:	e00b      	b.n	800fdb0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800fd9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	69fb      	ldr	r3, [r7, #28]
 800fda6:	68b9      	ldr	r1, [r7, #8]
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f001 fd45 	bl	8011838 <ethernet_output>
 800fdae:	4603      	mov	r3, r0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3720      	adds	r7, #32
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	08014d00 	.word	0x08014d00
 800fdbc:	08014e50 	.word	0x08014e50
 800fdc0:	08014d78 	.word	0x08014d78
 800fdc4:	08014ea0 	.word	0x08014ea0
 800fdc8:	08014e40 	.word	0x08014e40
 800fdcc:	080154c4 	.word	0x080154c4
 800fdd0:	20008a30 	.word	0x20008a30
 800fdd4:	20008940 	.word	0x20008940

0800fdd8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08c      	sub	sp, #48	@ 0x30
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	3326      	adds	r3, #38	@ 0x26
 800fde8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fdea:	23ff      	movs	r3, #255	@ 0xff
 800fdec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	68f9      	ldr	r1, [r7, #12]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 fe0e 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10c      	bne.n	800fe20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe0e:	2be0      	cmp	r3, #224	@ 0xe0
 800fe10:	d006      	beq.n	800fe20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d003      	beq.n	800fe20 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d102      	bne.n	800fe26 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fe20:	f06f 030f 	mvn.w	r3, #15
 800fe24:	e101      	b.n	801002a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	2101      	movs	r1, #1
 800fe2a:	68b8      	ldr	r0, [r7, #8]
 800fe2c:	f7ff fb60 	bl	800f4f0 <etharp_find_entry>
 800fe30:	4603      	mov	r3, r0
 800fe32:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fe34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	da02      	bge.n	800fe42 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fe3c:	8a7b      	ldrh	r3, [r7, #18]
 800fe3e:	b25b      	sxtb	r3, r3
 800fe40:	e0f3      	b.n	801002a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fe42:	8a7b      	ldrh	r3, [r7, #18]
 800fe44:	2b7e      	cmp	r3, #126	@ 0x7e
 800fe46:	d906      	bls.n	800fe56 <etharp_query+0x7e>
 800fe48:	4b7a      	ldr	r3, [pc, #488]	@ (8010034 <etharp_query+0x25c>)
 800fe4a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800fe4e:	497a      	ldr	r1, [pc, #488]	@ (8010038 <etharp_query+0x260>)
 800fe50:	487a      	ldr	r0, [pc, #488]	@ (801003c <etharp_query+0x264>)
 800fe52:	f001 fe39 	bl	8011ac8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fe56:	8a7b      	ldrh	r3, [r7, #18]
 800fe58:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fe5a:	7c7a      	ldrb	r2, [r7, #17]
 800fe5c:	4978      	ldr	r1, [pc, #480]	@ (8010040 <etharp_query+0x268>)
 800fe5e:	4613      	mov	r3, r2
 800fe60:	005b      	lsls	r3, r3, #1
 800fe62:	4413      	add	r3, r2
 800fe64:	00db      	lsls	r3, r3, #3
 800fe66:	440b      	add	r3, r1
 800fe68:	3314      	adds	r3, #20
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d115      	bne.n	800fe9c <etharp_query+0xc4>
    is_new_entry = 1;
 800fe70:	2301      	movs	r3, #1
 800fe72:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fe74:	7c7a      	ldrb	r2, [r7, #17]
 800fe76:	4972      	ldr	r1, [pc, #456]	@ (8010040 <etharp_query+0x268>)
 800fe78:	4613      	mov	r3, r2
 800fe7a:	005b      	lsls	r3, r3, #1
 800fe7c:	4413      	add	r3, r2
 800fe7e:	00db      	lsls	r3, r3, #3
 800fe80:	440b      	add	r3, r1
 800fe82:	3314      	adds	r3, #20
 800fe84:	2201      	movs	r2, #1
 800fe86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fe88:	7c7a      	ldrb	r2, [r7, #17]
 800fe8a:	496d      	ldr	r1, [pc, #436]	@ (8010040 <etharp_query+0x268>)
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	005b      	lsls	r3, r3, #1
 800fe90:	4413      	add	r3, r2
 800fe92:	00db      	lsls	r3, r3, #3
 800fe94:	440b      	add	r3, r1
 800fe96:	3308      	adds	r3, #8
 800fe98:	68fa      	ldr	r2, [r7, #12]
 800fe9a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fe9c:	7c7a      	ldrb	r2, [r7, #17]
 800fe9e:	4968      	ldr	r1, [pc, #416]	@ (8010040 <etharp_query+0x268>)
 800fea0:	4613      	mov	r3, r2
 800fea2:	005b      	lsls	r3, r3, #1
 800fea4:	4413      	add	r3, r2
 800fea6:	00db      	lsls	r3, r3, #3
 800fea8:	440b      	add	r3, r1
 800feaa:	3314      	adds	r3, #20
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d011      	beq.n	800fed6 <etharp_query+0xfe>
 800feb2:	7c7a      	ldrb	r2, [r7, #17]
 800feb4:	4962      	ldr	r1, [pc, #392]	@ (8010040 <etharp_query+0x268>)
 800feb6:	4613      	mov	r3, r2
 800feb8:	005b      	lsls	r3, r3, #1
 800feba:	4413      	add	r3, r2
 800febc:	00db      	lsls	r3, r3, #3
 800febe:	440b      	add	r3, r1
 800fec0:	3314      	adds	r3, #20
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d806      	bhi.n	800fed6 <etharp_query+0xfe>
 800fec8:	4b5a      	ldr	r3, [pc, #360]	@ (8010034 <etharp_query+0x25c>)
 800feca:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800fece:	495d      	ldr	r1, [pc, #372]	@ (8010044 <etharp_query+0x26c>)
 800fed0:	485a      	ldr	r0, [pc, #360]	@ (801003c <etharp_query+0x264>)
 800fed2:	f001 fdf9 	bl	8011ac8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fed6:	6a3b      	ldr	r3, [r7, #32]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d102      	bne.n	800fee2 <etharp_query+0x10a>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10c      	bne.n	800fefc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fee2:	68b9      	ldr	r1, [r7, #8]
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f963 	bl	80101b0 <etharp_request>
 800feea:	4603      	mov	r3, r0
 800feec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d102      	bne.n	800fefc <etharp_query+0x124>
      return result;
 800fef6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fefa:	e096      	b.n	801002a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <etharp_query+0x138>
 800ff02:	4b4c      	ldr	r3, [pc, #304]	@ (8010034 <etharp_query+0x25c>)
 800ff04:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ff08:	494f      	ldr	r1, [pc, #316]	@ (8010048 <etharp_query+0x270>)
 800ff0a:	484c      	ldr	r0, [pc, #304]	@ (801003c <etharp_query+0x264>)
 800ff0c:	f001 fddc 	bl	8011ac8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ff10:	7c7a      	ldrb	r2, [r7, #17]
 800ff12:	494b      	ldr	r1, [pc, #300]	@ (8010040 <etharp_query+0x268>)
 800ff14:	4613      	mov	r3, r2
 800ff16:	005b      	lsls	r3, r3, #1
 800ff18:	4413      	add	r3, r2
 800ff1a:	00db      	lsls	r3, r3, #3
 800ff1c:	440b      	add	r3, r1
 800ff1e:	3314      	adds	r3, #20
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d917      	bls.n	800ff56 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ff26:	4a49      	ldr	r2, [pc, #292]	@ (801004c <etharp_query+0x274>)
 800ff28:	7c7b      	ldrb	r3, [r7, #17]
 800ff2a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ff2c:	7c7a      	ldrb	r2, [r7, #17]
 800ff2e:	4613      	mov	r3, r2
 800ff30:	005b      	lsls	r3, r3, #1
 800ff32:	4413      	add	r3, r2
 800ff34:	00db      	lsls	r3, r3, #3
 800ff36:	3308      	adds	r3, #8
 800ff38:	4a41      	ldr	r2, [pc, #260]	@ (8010040 <etharp_query+0x268>)
 800ff3a:	4413      	add	r3, r2
 800ff3c:	3304      	adds	r3, #4
 800ff3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ff42:	9200      	str	r2, [sp, #0]
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	6879      	ldr	r1, [r7, #4]
 800ff48:	68f8      	ldr	r0, [r7, #12]
 800ff4a:	f001 fc75 	bl	8011838 <ethernet_output>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ff54:	e067      	b.n	8010026 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ff56:	7c7a      	ldrb	r2, [r7, #17]
 800ff58:	4939      	ldr	r1, [pc, #228]	@ (8010040 <etharp_query+0x268>)
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	005b      	lsls	r3, r3, #1
 800ff5e:	4413      	add	r3, r2
 800ff60:	00db      	lsls	r3, r3, #3
 800ff62:	440b      	add	r3, r1
 800ff64:	3314      	adds	r3, #20
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d15c      	bne.n	8010026 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ff74:	e01c      	b.n	800ffb0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ff76:	69fb      	ldr	r3, [r7, #28]
 800ff78:	895a      	ldrh	r2, [r3, #10]
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	891b      	ldrh	r3, [r3, #8]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d10a      	bne.n	800ff98 <etharp_query+0x1c0>
 800ff82:	69fb      	ldr	r3, [r7, #28]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d006      	beq.n	800ff98 <etharp_query+0x1c0>
 800ff8a:	4b2a      	ldr	r3, [pc, #168]	@ (8010034 <etharp_query+0x25c>)
 800ff8c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800ff90:	492f      	ldr	r1, [pc, #188]	@ (8010050 <etharp_query+0x278>)
 800ff92:	482a      	ldr	r0, [pc, #168]	@ (801003c <etharp_query+0x264>)
 800ff94:	f001 fd98 	bl	8011ac8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	7b1b      	ldrb	r3, [r3, #12]
 800ff9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <etharp_query+0x1d2>
        copy_needed = 1;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	61bb      	str	r3, [r7, #24]
        break;
 800ffa8:	e005      	b.n	800ffb6 <etharp_query+0x1de>
      }
      p = p->next;
 800ffaa:	69fb      	ldr	r3, [r7, #28]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1df      	bne.n	800ff76 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d007      	beq.n	800ffcc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ffc2:	200e      	movs	r0, #14
 800ffc4:	f7f9 f916 	bl	80091f4 <pbuf_clone>
 800ffc8:	61f8      	str	r0, [r7, #28]
 800ffca:	e004      	b.n	800ffd6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ffd0:	69f8      	ldr	r0, [r7, #28]
 800ffd2:	f7f8 fec1 	bl	8008d58 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ffd6:	69fb      	ldr	r3, [r7, #28]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d021      	beq.n	8010020 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ffdc:	7c7a      	ldrb	r2, [r7, #17]
 800ffde:	4918      	ldr	r1, [pc, #96]	@ (8010040 <etharp_query+0x268>)
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	00db      	lsls	r3, r3, #3
 800ffe8:	440b      	add	r3, r1
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00a      	beq.n	8010006 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fff0:	7c7a      	ldrb	r2, [r7, #17]
 800fff2:	4913      	ldr	r1, [pc, #76]	@ (8010040 <etharp_query+0x268>)
 800fff4:	4613      	mov	r3, r2
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	4413      	add	r3, r2
 800fffa:	00db      	lsls	r3, r3, #3
 800fffc:	440b      	add	r3, r1
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4618      	mov	r0, r3
 8010002:	f7f8 fe09 	bl	8008c18 <pbuf_free>
      }
      arp_table[i].q = p;
 8010006:	7c7a      	ldrb	r2, [r7, #17]
 8010008:	490d      	ldr	r1, [pc, #52]	@ (8010040 <etharp_query+0x268>)
 801000a:	4613      	mov	r3, r2
 801000c:	005b      	lsls	r3, r3, #1
 801000e:	4413      	add	r3, r2
 8010010:	00db      	lsls	r3, r3, #3
 8010012:	440b      	add	r3, r1
 8010014:	69fa      	ldr	r2, [r7, #28]
 8010016:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801001e:	e002      	b.n	8010026 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010020:	23ff      	movs	r3, #255	@ 0xff
 8010022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010026:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801002a:	4618      	mov	r0, r3
 801002c:	3728      	adds	r7, #40	@ 0x28
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	08014d00 	.word	0x08014d00
 8010038:	08014eac 	.word	0x08014eac
 801003c:	08014d78 	.word	0x08014d78
 8010040:	20008940 	.word	0x20008940
 8010044:	08014ebc 	.word	0x08014ebc
 8010048:	08014ea0 	.word	0x08014ea0
 801004c:	20008a30 	.word	0x20008a30
 8010050:	08014ee4 	.word	0x08014ee4

08010054 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b08a      	sub	sp, #40	@ 0x28
 8010058:	af02      	add	r7, sp, #8
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
 8010060:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010062:	2300      	movs	r3, #0
 8010064:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d106      	bne.n	801007a <etharp_raw+0x26>
 801006c:	4b3a      	ldr	r3, [pc, #232]	@ (8010158 <etharp_raw+0x104>)
 801006e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010072:	493a      	ldr	r1, [pc, #232]	@ (801015c <etharp_raw+0x108>)
 8010074:	483a      	ldr	r0, [pc, #232]	@ (8010160 <etharp_raw+0x10c>)
 8010076:	f001 fd27 	bl	8011ac8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801007a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801007e:	211c      	movs	r1, #28
 8010080:	200e      	movs	r0, #14
 8010082:	f7f8 fae5 	bl	8008650 <pbuf_alloc>
 8010086:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d102      	bne.n	8010094 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801008e:	f04f 33ff 	mov.w	r3, #4294967295
 8010092:	e05d      	b.n	8010150 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	895b      	ldrh	r3, [r3, #10]
 8010098:	2b1b      	cmp	r3, #27
 801009a:	d806      	bhi.n	80100aa <etharp_raw+0x56>
 801009c:	4b2e      	ldr	r3, [pc, #184]	@ (8010158 <etharp_raw+0x104>)
 801009e:	f240 4262 	movw	r2, #1122	@ 0x462
 80100a2:	4930      	ldr	r1, [pc, #192]	@ (8010164 <etharp_raw+0x110>)
 80100a4:	482e      	ldr	r0, [pc, #184]	@ (8010160 <etharp_raw+0x10c>)
 80100a6:	f001 fd0f 	bl	8011ac8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80100b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7f7 fa72 	bl	800759c <lwip_htons>
 80100b8:	4603      	mov	r3, r0
 80100ba:	461a      	mov	r2, r3
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80100c6:	2b06      	cmp	r3, #6
 80100c8:	d006      	beq.n	80100d8 <etharp_raw+0x84>
 80100ca:	4b23      	ldr	r3, [pc, #140]	@ (8010158 <etharp_raw+0x104>)
 80100cc:	f240 4269 	movw	r2, #1129	@ 0x469
 80100d0:	4925      	ldr	r1, [pc, #148]	@ (8010168 <etharp_raw+0x114>)
 80100d2:	4823      	ldr	r0, [pc, #140]	@ (8010160 <etharp_raw+0x10c>)
 80100d4:	f001 fcf8 	bl	8011ac8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	3308      	adds	r3, #8
 80100dc:	2206      	movs	r2, #6
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f001 febe 	bl	8011e62 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	3312      	adds	r3, #18
 80100ea:	2206      	movs	r2, #6
 80100ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100ee:	4618      	mov	r0, r3
 80100f0:	f001 feb7 	bl	8011e62 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	330e      	adds	r3, #14
 80100f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100fa:	6812      	ldr	r2, [r2, #0]
 80100fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	3318      	adds	r3, #24
 8010102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010104:	6812      	ldr	r2, [r2, #0]
 8010106:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	2200      	movs	r2, #0
 801010c:	701a      	strb	r2, [r3, #0]
 801010e:	2200      	movs	r2, #0
 8010110:	f042 0201 	orr.w	r2, r2, #1
 8010114:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	2200      	movs	r2, #0
 801011a:	f042 0208 	orr.w	r2, r2, #8
 801011e:	709a      	strb	r2, [r3, #2]
 8010120:	2200      	movs	r2, #0
 8010122:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	2206      	movs	r2, #6
 8010128:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2204      	movs	r2, #4
 801012e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010130:	f640 0306 	movw	r3, #2054	@ 0x806
 8010134:	9300      	str	r3, [sp, #0]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	68ba      	ldr	r2, [r7, #8]
 801013a:	69b9      	ldr	r1, [r7, #24]
 801013c:	68f8      	ldr	r0, [r7, #12]
 801013e:	f001 fb7b 	bl	8011838 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010142:	69b8      	ldr	r0, [r7, #24]
 8010144:	f7f8 fd68 	bl	8008c18 <pbuf_free>
  p = NULL;
 8010148:	2300      	movs	r3, #0
 801014a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801014c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3720      	adds	r7, #32
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	08014d00 	.word	0x08014d00
 801015c:	08014e50 	.word	0x08014e50
 8010160:	08014d78 	.word	0x08014d78
 8010164:	08014f00 	.word	0x08014f00
 8010168:	08014f34 	.word	0x08014f34

0801016c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af04      	add	r7, sp, #16
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010188:	2201      	movs	r2, #1
 801018a:	9203      	str	r2, [sp, #12]
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	9202      	str	r2, [sp, #8]
 8010190:	4a06      	ldr	r2, [pc, #24]	@ (80101ac <etharp_request_dst+0x40>)
 8010192:	9201      	str	r2, [sp, #4]
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	4603      	mov	r3, r0
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f7ff ff5a 	bl	8010054 <etharp_raw>
 80101a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	080154cc 	.word	0x080154cc

080101b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80101ba:	4a05      	ldr	r2, [pc, #20]	@ (80101d0 <etharp_request+0x20>)
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff ffd4 	bl	801016c <etharp_request_dst>
 80101c4:	4603      	mov	r3, r0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	080154c4 	.word	0x080154c4

080101d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b08e      	sub	sp, #56	@ 0x38
 80101d8:	af04      	add	r7, sp, #16
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80101de:	4b79      	ldr	r3, [pc, #484]	@ (80103c4 <icmp_input+0x1f0>)
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	f003 030f 	and.w	r3, r3, #15
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80101f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80101f6:	2b13      	cmp	r3, #19
 80101f8:	f240 80cd 	bls.w	8010396 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	895b      	ldrh	r3, [r3, #10]
 8010200:	2b03      	cmp	r3, #3
 8010202:	f240 80ca 	bls.w	801039a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010210:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010214:	2b00      	cmp	r3, #0
 8010216:	f000 80b7 	beq.w	8010388 <icmp_input+0x1b4>
 801021a:	2b08      	cmp	r3, #8
 801021c:	f040 80b7 	bne.w	801038e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010220:	4b69      	ldr	r3, [pc, #420]	@ (80103c8 <icmp_input+0x1f4>)
 8010222:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010224:	4b67      	ldr	r3, [pc, #412]	@ (80103c4 <icmp_input+0x1f0>)
 8010226:	695b      	ldr	r3, [r3, #20]
 8010228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801022c:	2be0      	cmp	r3, #224	@ 0xe0
 801022e:	f000 80bb 	beq.w	80103a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010232:	4b64      	ldr	r3, [pc, #400]	@ (80103c4 <icmp_input+0x1f0>)
 8010234:	695b      	ldr	r3, [r3, #20]
 8010236:	4a63      	ldr	r2, [pc, #396]	@ (80103c4 <icmp_input+0x1f0>)
 8010238:	6812      	ldr	r2, [r2, #0]
 801023a:	4611      	mov	r1, r2
 801023c:	4618      	mov	r0, r3
 801023e:	f000 fbed 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 8010242:	4603      	mov	r3, r0
 8010244:	2b00      	cmp	r3, #0
 8010246:	f040 80b1 	bne.w	80103ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	891b      	ldrh	r3, [r3, #8]
 801024e:	2b07      	cmp	r3, #7
 8010250:	f240 80a5 	bls.w	801039e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010254:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010256:	330e      	adds	r3, #14
 8010258:	4619      	mov	r1, r3
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7f8 fc46 	bl	8008aec <pbuf_add_header>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d04b      	beq.n	80102fe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	891a      	ldrh	r2, [r3, #8]
 801026a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801026c:	4413      	add	r3, r2
 801026e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	891b      	ldrh	r3, [r3, #8]
 8010274:	8b7a      	ldrh	r2, [r7, #26]
 8010276:	429a      	cmp	r2, r3
 8010278:	f0c0 809a 	bcc.w	80103b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801027c:	8b7b      	ldrh	r3, [r7, #26]
 801027e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010282:	4619      	mov	r1, r3
 8010284:	200e      	movs	r0, #14
 8010286:	f7f8 f9e3 	bl	8008650 <pbuf_alloc>
 801028a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 8090 	beq.w	80103b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	895b      	ldrh	r3, [r3, #10]
 8010298:	461a      	mov	r2, r3
 801029a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801029c:	3308      	adds	r3, #8
 801029e:	429a      	cmp	r2, r3
 80102a0:	d203      	bcs.n	80102aa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80102a2:	6978      	ldr	r0, [r7, #20]
 80102a4:	f7f8 fcb8 	bl	8008c18 <pbuf_free>
          goto icmperr;
 80102a8:	e085      	b.n	80103b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80102b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80102b2:	4618      	mov	r0, r3
 80102b4:	f001 fdd5 	bl	8011e62 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80102b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80102ba:	4619      	mov	r1, r3
 80102bc:	6978      	ldr	r0, [r7, #20]
 80102be:	f7f8 fc25 	bl	8008b0c <pbuf_remove_header>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d009      	beq.n	80102dc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80102c8:	4b40      	ldr	r3, [pc, #256]	@ (80103cc <icmp_input+0x1f8>)
 80102ca:	22b6      	movs	r2, #182	@ 0xb6
 80102cc:	4940      	ldr	r1, [pc, #256]	@ (80103d0 <icmp_input+0x1fc>)
 80102ce:	4841      	ldr	r0, [pc, #260]	@ (80103d4 <icmp_input+0x200>)
 80102d0:	f001 fbfa 	bl	8011ac8 <iprintf>
          pbuf_free(r);
 80102d4:	6978      	ldr	r0, [r7, #20]
 80102d6:	f7f8 fc9f 	bl	8008c18 <pbuf_free>
          goto icmperr;
 80102da:	e06c      	b.n	80103b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80102dc:	6879      	ldr	r1, [r7, #4]
 80102de:	6978      	ldr	r0, [r7, #20]
 80102e0:	f7f8 fdb2 	bl	8008e48 <pbuf_copy>
 80102e4:	4603      	mov	r3, r0
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d003      	beq.n	80102f2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80102ea:	6978      	ldr	r0, [r7, #20]
 80102ec:	f7f8 fc94 	bl	8008c18 <pbuf_free>
          goto icmperr;
 80102f0:	e061      	b.n	80103b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f7f8 fc90 	bl	8008c18 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	607b      	str	r3, [r7, #4]
 80102fc:	e00f      	b.n	801031e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80102fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010300:	330e      	adds	r3, #14
 8010302:	4619      	mov	r1, r3
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7f8 fc01 	bl	8008b0c <pbuf_remove_header>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d006      	beq.n	801031e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010310:	4b2e      	ldr	r3, [pc, #184]	@ (80103cc <icmp_input+0x1f8>)
 8010312:	22c7      	movs	r2, #199	@ 0xc7
 8010314:	4930      	ldr	r1, [pc, #192]	@ (80103d8 <icmp_input+0x204>)
 8010316:	482f      	ldr	r0, [pc, #188]	@ (80103d4 <icmp_input+0x200>)
 8010318:	f001 fbd6 	bl	8011ac8 <iprintf>
          goto icmperr;
 801031c:	e04b      	b.n	80103b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010324:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7f8 fbdf 	bl	8008aec <pbuf_add_header>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d12b      	bne.n	801038c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	681a      	ldr	r2, [r3, #0]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010342:	4b20      	ldr	r3, [pc, #128]	@ (80103c4 <icmp_input+0x1f0>)
 8010344:	691a      	ldr	r2, [r3, #16]
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	2200      	movs	r2, #0
 801034e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	2200      	movs	r2, #0
 8010354:	709a      	strb	r2, [r3, #2]
 8010356:	2200      	movs	r2, #0
 8010358:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	22ff      	movs	r2, #255	@ 0xff
 801035e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2200      	movs	r2, #0
 8010364:	729a      	strb	r2, [r3, #10]
 8010366:	2200      	movs	r2, #0
 8010368:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	9302      	str	r3, [sp, #8]
 801036e:	2301      	movs	r3, #1
 8010370:	9301      	str	r3, [sp, #4]
 8010372:	2300      	movs	r3, #0
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	23ff      	movs	r3, #255	@ 0xff
 8010378:	2200      	movs	r2, #0
 801037a:	69f9      	ldr	r1, [r7, #28]
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fa75 	bl	801086c <ip4_output_if>
 8010382:	4603      	mov	r3, r0
 8010384:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010386:	e001      	b.n	801038c <icmp_input+0x1b8>
      break;
 8010388:	bf00      	nop
 801038a:	e000      	b.n	801038e <icmp_input+0x1ba>
      break;
 801038c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7f8 fc42 	bl	8008c18 <pbuf_free>
  return;
 8010394:	e013      	b.n	80103be <icmp_input+0x1ea>
    goto lenerr;
 8010396:	bf00      	nop
 8010398:	e002      	b.n	80103a0 <icmp_input+0x1cc>
    goto lenerr;
 801039a:	bf00      	nop
 801039c:	e000      	b.n	80103a0 <icmp_input+0x1cc>
        goto lenerr;
 801039e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7f8 fc39 	bl	8008c18 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80103a6:	e00a      	b.n	80103be <icmp_input+0x1ea>
        goto icmperr;
 80103a8:	bf00      	nop
 80103aa:	e004      	b.n	80103b6 <icmp_input+0x1e2>
        goto icmperr;
 80103ac:	bf00      	nop
 80103ae:	e002      	b.n	80103b6 <icmp_input+0x1e2>
          goto icmperr;
 80103b0:	bf00      	nop
 80103b2:	e000      	b.n	80103b6 <icmp_input+0x1e2>
          goto icmperr;
 80103b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f7f8 fc2e 	bl	8008c18 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80103bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80103be:	3728      	adds	r7, #40	@ 0x28
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	20005370 	.word	0x20005370
 80103c8:	20005384 	.word	0x20005384
 80103cc:	08014f78 	.word	0x08014f78
 80103d0:	08014fb0 	.word	0x08014fb0
 80103d4:	08014fe8 	.word	0x08014fe8
 80103d8:	08015010 	.word	0x08015010

080103dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	460b      	mov	r3, r1
 80103e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80103e8:	78fb      	ldrb	r3, [r7, #3]
 80103ea:	461a      	mov	r2, r3
 80103ec:	2103      	movs	r1, #3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f814 	bl	801041c <icmp_send_response>
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	460b      	mov	r3, r1
 8010406:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	461a      	mov	r2, r3
 801040c:	210b      	movs	r1, #11
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f804 	bl	801041c <icmp_send_response>
}
 8010414:	bf00      	nop
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b08c      	sub	sp, #48	@ 0x30
 8010420:	af04      	add	r7, sp, #16
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	460b      	mov	r3, r1
 8010426:	70fb      	strb	r3, [r7, #3]
 8010428:	4613      	mov	r3, r2
 801042a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801042c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010430:	2124      	movs	r1, #36	@ 0x24
 8010432:	2022      	movs	r0, #34	@ 0x22
 8010434:	f7f8 f90c 	bl	8008650 <pbuf_alloc>
 8010438:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d04c      	beq.n	80104da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	895b      	ldrh	r3, [r3, #10]
 8010444:	2b23      	cmp	r3, #35	@ 0x23
 8010446:	d806      	bhi.n	8010456 <icmp_send_response+0x3a>
 8010448:	4b26      	ldr	r3, [pc, #152]	@ (80104e4 <icmp_send_response+0xc8>)
 801044a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801044e:	4926      	ldr	r1, [pc, #152]	@ (80104e8 <icmp_send_response+0xcc>)
 8010450:	4826      	ldr	r0, [pc, #152]	@ (80104ec <icmp_send_response+0xd0>)
 8010452:	f001 fb39 	bl	8011ac8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	78fa      	ldrb	r2, [r7, #3]
 8010466:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	78ba      	ldrb	r2, [r7, #2]
 801046c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	2200      	movs	r2, #0
 8010472:	711a      	strb	r2, [r3, #4]
 8010474:	2200      	movs	r2, #0
 8010476:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	2200      	movs	r2, #0
 801047c:	719a      	strb	r2, [r3, #6]
 801047e:	2200      	movs	r2, #0
 8010480:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	f103 0008 	add.w	r0, r3, #8
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	221c      	movs	r2, #28
 8010490:	4619      	mov	r1, r3
 8010492:	f001 fce6 	bl	8011e62 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801049c:	f107 030c 	add.w	r3, r7, #12
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 f825 	bl	80104f0 <ip4_route>
 80104a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d011      	beq.n	80104d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	2200      	movs	r2, #0
 80104b2:	709a      	strb	r2, [r3, #2]
 80104b4:	2200      	movs	r2, #0
 80104b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80104b8:	f107 020c 	add.w	r2, r7, #12
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	9302      	str	r3, [sp, #8]
 80104c0:	2301      	movs	r3, #1
 80104c2:	9301      	str	r3, [sp, #4]
 80104c4:	2300      	movs	r3, #0
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	23ff      	movs	r3, #255	@ 0xff
 80104ca:	2100      	movs	r1, #0
 80104cc:	69f8      	ldr	r0, [r7, #28]
 80104ce:	f000 f9cd 	bl	801086c <ip4_output_if>
  }
  pbuf_free(q);
 80104d2:	69f8      	ldr	r0, [r7, #28]
 80104d4:	f7f8 fba0 	bl	8008c18 <pbuf_free>
 80104d8:	e000      	b.n	80104dc <icmp_send_response+0xc0>
    return;
 80104da:	bf00      	nop
}
 80104dc:	3720      	adds	r7, #32
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	08014f78 	.word	0x08014f78
 80104e8:	08015044 	.word	0x08015044
 80104ec:	08014fe8 	.word	0x08014fe8

080104f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80104f8:	4b33      	ldr	r3, [pc, #204]	@ (80105c8 <ip4_route+0xd8>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	60fb      	str	r3, [r7, #12]
 80104fe:	e036      	b.n	801056e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010506:	f003 0301 	and.w	r3, r3, #1
 801050a:	b2db      	uxtb	r3, r3
 801050c:	2b00      	cmp	r3, #0
 801050e:	d02b      	beq.n	8010568 <ip4_route+0x78>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010516:	089b      	lsrs	r3, r3, #2
 8010518:	f003 0301 	and.w	r3, r3, #1
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b00      	cmp	r3, #0
 8010520:	d022      	beq.n	8010568 <ip4_route+0x78>
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3304      	adds	r3, #4
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d01d      	beq.n	8010568 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3304      	adds	r3, #4
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	405a      	eors	r2, r3
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	3308      	adds	r3, #8
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	4013      	ands	r3, r2
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	e038      	b.n	80105ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801054e:	f003 0302 	and.w	r3, r3, #2
 8010552:	2b00      	cmp	r3, #0
 8010554:	d108      	bne.n	8010568 <ip4_route+0x78>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	330c      	adds	r3, #12
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d101      	bne.n	8010568 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	e028      	b.n	80105ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	60fb      	str	r3, [r7, #12]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d1c5      	bne.n	8010500 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010574:	4b15      	ldr	r3, [pc, #84]	@ (80105cc <ip4_route+0xdc>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d01a      	beq.n	80105b2 <ip4_route+0xc2>
 801057c:	4b13      	ldr	r3, [pc, #76]	@ (80105cc <ip4_route+0xdc>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010584:	f003 0301 	and.w	r3, r3, #1
 8010588:	2b00      	cmp	r3, #0
 801058a:	d012      	beq.n	80105b2 <ip4_route+0xc2>
 801058c:	4b0f      	ldr	r3, [pc, #60]	@ (80105cc <ip4_route+0xdc>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010594:	f003 0304 	and.w	r3, r3, #4
 8010598:	2b00      	cmp	r3, #0
 801059a:	d00a      	beq.n	80105b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801059c:	4b0b      	ldr	r3, [pc, #44]	@ (80105cc <ip4_route+0xdc>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3304      	adds	r3, #4
 80105a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d004      	beq.n	80105b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	b2db      	uxtb	r3, r3
 80105ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80105b0:	d101      	bne.n	80105b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e001      	b.n	80105ba <ip4_route+0xca>
  }

  return netif_default;
 80105b6:	4b05      	ldr	r3, [pc, #20]	@ (80105cc <ip4_route+0xdc>)
 80105b8:	681b      	ldr	r3, [r3, #0]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	200088d4 	.word	0x200088d4
 80105cc:	200088d8 	.word	0x200088d8

080105d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80105de:	f003 0301 	and.w	r3, r3, #1
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d016      	beq.n	8010616 <ip4_input_accept+0x46>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	3304      	adds	r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d011      	beq.n	8010616 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80105f2:	4b0b      	ldr	r3, [pc, #44]	@ (8010620 <ip4_input_accept+0x50>)
 80105f4:	695a      	ldr	r2, [r3, #20]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3304      	adds	r3, #4
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d008      	beq.n	8010612 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010600:	4b07      	ldr	r3, [pc, #28]	@ (8010620 <ip4_input_accept+0x50>)
 8010602:	695b      	ldr	r3, [r3, #20]
 8010604:	6879      	ldr	r1, [r7, #4]
 8010606:	4618      	mov	r0, r3
 8010608:	f000 fa08 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 801060c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010612:	2301      	movs	r3, #1
 8010614:	e000      	b.n	8010618 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010616:	2300      	movs	r3, #0
}
 8010618:	4618      	mov	r0, r3
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20005370 	.word	0x20005370

08010624 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	091b      	lsrs	r3, r3, #4
 801063a:	b2db      	uxtb	r3, r3
 801063c:	2b04      	cmp	r3, #4
 801063e:	d004      	beq.n	801064a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7f8 fae9 	bl	8008c18 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010646:	2300      	movs	r3, #0
 8010648:	e107      	b.n	801085a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	f003 030f 	and.w	r3, r3, #15
 8010652:	b2db      	uxtb	r3, r3
 8010654:	009b      	lsls	r3, r3, #2
 8010656:	b2db      	uxtb	r3, r3
 8010658:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	885b      	ldrh	r3, [r3, #2]
 801065e:	b29b      	uxth	r3, r3
 8010660:	4618      	mov	r0, r3
 8010662:	f7f6 ff9b 	bl	800759c <lwip_htons>
 8010666:	4603      	mov	r3, r0
 8010668:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	891b      	ldrh	r3, [r3, #8]
 801066e:	89ba      	ldrh	r2, [r7, #12]
 8010670:	429a      	cmp	r2, r3
 8010672:	d204      	bcs.n	801067e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010674:	89bb      	ldrh	r3, [r7, #12]
 8010676:	4619      	mov	r1, r3
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7f8 f947 	bl	800890c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	895b      	ldrh	r3, [r3, #10]
 8010682:	89fa      	ldrh	r2, [r7, #14]
 8010684:	429a      	cmp	r2, r3
 8010686:	d807      	bhi.n	8010698 <ip4_input+0x74>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	891b      	ldrh	r3, [r3, #8]
 801068c:	89ba      	ldrh	r2, [r7, #12]
 801068e:	429a      	cmp	r2, r3
 8010690:	d802      	bhi.n	8010698 <ip4_input+0x74>
 8010692:	89fb      	ldrh	r3, [r7, #14]
 8010694:	2b13      	cmp	r3, #19
 8010696:	d804      	bhi.n	80106a2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f7f8 fabd 	bl	8008c18 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	e0db      	b.n	801085a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	691b      	ldr	r3, [r3, #16]
 80106a6:	4a6f      	ldr	r2, [pc, #444]	@ (8010864 <ip4_input+0x240>)
 80106a8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	4a6d      	ldr	r2, [pc, #436]	@ (8010864 <ip4_input+0x240>)
 80106b0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80106b2:	4b6c      	ldr	r3, [pc, #432]	@ (8010864 <ip4_input+0x240>)
 80106b4:	695b      	ldr	r3, [r3, #20]
 80106b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80106ba:	2be0      	cmp	r3, #224	@ 0xe0
 80106bc:	d112      	bne.n	80106e4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d007      	beq.n	80106de <ip4_input+0xba>
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	3304      	adds	r3, #4
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <ip4_input+0xba>
      netif = inp;
 80106d8:	683b      	ldr	r3, [r7, #0]
 80106da:	613b      	str	r3, [r7, #16]
 80106dc:	e02a      	b.n	8010734 <ip4_input+0x110>
    } else {
      netif = NULL;
 80106de:	2300      	movs	r3, #0
 80106e0:	613b      	str	r3, [r7, #16]
 80106e2:	e027      	b.n	8010734 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80106e4:	6838      	ldr	r0, [r7, #0]
 80106e6:	f7ff ff73 	bl	80105d0 <ip4_input_accept>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <ip4_input+0xd2>
      netif = inp;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	613b      	str	r3, [r7, #16]
 80106f4:	e01e      	b.n	8010734 <ip4_input+0x110>
    } else {
      netif = NULL;
 80106f6:	2300      	movs	r3, #0
 80106f8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80106fa:	4b5a      	ldr	r3, [pc, #360]	@ (8010864 <ip4_input+0x240>)
 80106fc:	695b      	ldr	r3, [r3, #20]
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	2b7f      	cmp	r3, #127	@ 0x7f
 8010702:	d017      	beq.n	8010734 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010704:	4b58      	ldr	r3, [pc, #352]	@ (8010868 <ip4_input+0x244>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	613b      	str	r3, [r7, #16]
 801070a:	e00e      	b.n	801072a <ip4_input+0x106>
          if (netif == inp) {
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	429a      	cmp	r2, r3
 8010712:	d006      	beq.n	8010722 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010714:	6938      	ldr	r0, [r7, #16]
 8010716:	f7ff ff5b 	bl	80105d0 <ip4_input_accept>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d108      	bne.n	8010732 <ip4_input+0x10e>
 8010720:	e000      	b.n	8010724 <ip4_input+0x100>
            continue;
 8010722:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	613b      	str	r3, [r7, #16]
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1ed      	bne.n	801070c <ip4_input+0xe8>
 8010730:	e000      	b.n	8010734 <ip4_input+0x110>
            break;
 8010732:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010734:	4b4b      	ldr	r3, [pc, #300]	@ (8010864 <ip4_input+0x240>)
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	6839      	ldr	r1, [r7, #0]
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f96e 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d105      	bne.n	8010752 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010746:	4b47      	ldr	r3, [pc, #284]	@ (8010864 <ip4_input+0x240>)
 8010748:	691b      	ldr	r3, [r3, #16]
 801074a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801074e:	2be0      	cmp	r3, #224	@ 0xe0
 8010750:	d104      	bne.n	801075c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7f8 fa60 	bl	8008c18 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010758:	2300      	movs	r3, #0
 801075a:	e07e      	b.n	801085a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d104      	bne.n	801076c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7f8 fa58 	bl	8008c18 <pbuf_free>
    return ERR_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	e076      	b.n	801085a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	88db      	ldrh	r3, [r3, #6]
 8010770:	b29b      	uxth	r3, r3
 8010772:	461a      	mov	r2, r3
 8010774:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8010778:	4013      	ands	r3, r2
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00b      	beq.n	8010796 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 fc92 	bl	80110a8 <ip4_reass>
 8010784:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d101      	bne.n	8010790 <ip4_input+0x16c>
      return ERR_OK;
 801078c:	2300      	movs	r3, #0
 801078e:	e064      	b.n	801085a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010796:	4a33      	ldr	r2, [pc, #204]	@ (8010864 <ip4_input+0x240>)
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801079c:	4a31      	ldr	r2, [pc, #196]	@ (8010864 <ip4_input+0x240>)
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80107a2:	4a30      	ldr	r2, [pc, #192]	@ (8010864 <ip4_input+0x240>)
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f003 030f 	and.w	r3, r3, #15
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	009b      	lsls	r3, r3, #2
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	461a      	mov	r2, r3
 80107b8:	4b2a      	ldr	r3, [pc, #168]	@ (8010864 <ip4_input+0x240>)
 80107ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80107bc:	89fb      	ldrh	r3, [r7, #14]
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7f8 f9a3 	bl	8008b0c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	7a5b      	ldrb	r3, [r3, #9]
 80107ca:	2b11      	cmp	r3, #17
 80107cc:	d006      	beq.n	80107dc <ip4_input+0x1b8>
 80107ce:	2b11      	cmp	r3, #17
 80107d0:	dc13      	bgt.n	80107fa <ip4_input+0x1d6>
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d00c      	beq.n	80107f0 <ip4_input+0x1cc>
 80107d6:	2b06      	cmp	r3, #6
 80107d8:	d005      	beq.n	80107e6 <ip4_input+0x1c2>
 80107da:	e00e      	b.n	80107fa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7fe fc68 	bl	800f0b4 <udp_input>
        break;
 80107e4:	e026      	b.n	8010834 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80107e6:	6839      	ldr	r1, [r7, #0]
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f7fa f8d1 	bl	800a990 <tcp_input>
        break;
 80107ee:	e021      	b.n	8010834 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80107f0:	6839      	ldr	r1, [r7, #0]
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f7ff fcee 	bl	80101d4 <icmp_input>
        break;
 80107f8:	e01c      	b.n	8010834 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80107fa:	4b1a      	ldr	r3, [pc, #104]	@ (8010864 <ip4_input+0x240>)
 80107fc:	695b      	ldr	r3, [r3, #20]
 80107fe:	6939      	ldr	r1, [r7, #16]
 8010800:	4618      	mov	r0, r3
 8010802:	f000 f90b 	bl	8010a1c <ip4_addr_isbroadcast_u32>
 8010806:	4603      	mov	r3, r0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10f      	bne.n	801082c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801080c:	4b15      	ldr	r3, [pc, #84]	@ (8010864 <ip4_input+0x240>)
 801080e:	695b      	ldr	r3, [r3, #20]
 8010810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010814:	2be0      	cmp	r3, #224	@ 0xe0
 8010816:	d009      	beq.n	801082c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801081c:	4619      	mov	r1, r3
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f7f8 f9e7 	bl	8008bf2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010824:	2102      	movs	r1, #2
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7ff fdd8 	bl	80103dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f7f8 f9f3 	bl	8008c18 <pbuf_free>
        break;
 8010832:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010834:	4b0b      	ldr	r3, [pc, #44]	@ (8010864 <ip4_input+0x240>)
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801083a:	4b0a      	ldr	r3, [pc, #40]	@ (8010864 <ip4_input+0x240>)
 801083c:	2200      	movs	r2, #0
 801083e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010840:	4b08      	ldr	r3, [pc, #32]	@ (8010864 <ip4_input+0x240>)
 8010842:	2200      	movs	r2, #0
 8010844:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010846:	4b07      	ldr	r3, [pc, #28]	@ (8010864 <ip4_input+0x240>)
 8010848:	2200      	movs	r2, #0
 801084a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801084c:	4b05      	ldr	r3, [pc, #20]	@ (8010864 <ip4_input+0x240>)
 801084e:	2200      	movs	r2, #0
 8010850:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010852:	4b04      	ldr	r3, [pc, #16]	@ (8010864 <ip4_input+0x240>)
 8010854:	2200      	movs	r2, #0
 8010856:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010858:	2300      	movs	r3, #0
}
 801085a:	4618      	mov	r0, r3
 801085c:	3718      	adds	r7, #24
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	20005370 	.word	0x20005370
 8010868:	200088d4 	.word	0x200088d4

0801086c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b08a      	sub	sp, #40	@ 0x28
 8010870:	af04      	add	r7, sp, #16
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
 8010878:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d009      	beq.n	8010898 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d003      	beq.n	8010892 <ip4_output_if+0x26>
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d102      	bne.n	8010898 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010894:	3304      	adds	r3, #4
 8010896:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010898:	78fa      	ldrb	r2, [r7, #3]
 801089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801089c:	9302      	str	r3, [sp, #8]
 801089e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	4613      	mov	r3, r2
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	6979      	ldr	r1, [r7, #20]
 80108b0:	68f8      	ldr	r0, [r7, #12]
 80108b2:	f000 f805 	bl	80108c0 <ip4_output_if_src>
 80108b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3718      	adds	r7, #24
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	7b9b      	ldrb	r3, [r3, #14]
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d006      	beq.n	80108e4 <ip4_output_if_src+0x24>
 80108d6:	4b4b      	ldr	r3, [pc, #300]	@ (8010a04 <ip4_output_if_src+0x144>)
 80108d8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80108dc:	494a      	ldr	r1, [pc, #296]	@ (8010a08 <ip4_output_if_src+0x148>)
 80108de:	484b      	ldr	r0, [pc, #300]	@ (8010a0c <ip4_output_if_src+0x14c>)
 80108e0:	f001 f8f2 	bl	8011ac8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d060      	beq.n	80109ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80108ea:	2314      	movs	r3, #20
 80108ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80108ee:	2114      	movs	r1, #20
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	f7f8 f8fb 	bl	8008aec <pbuf_add_header>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80108fc:	f06f 0301 	mvn.w	r3, #1
 8010900:	e07c      	b.n	80109fc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	895b      	ldrh	r3, [r3, #10]
 801090c:	2b13      	cmp	r3, #19
 801090e:	d806      	bhi.n	801091e <ip4_output_if_src+0x5e>
 8010910:	4b3c      	ldr	r3, [pc, #240]	@ (8010a04 <ip4_output_if_src+0x144>)
 8010912:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8010916:	493e      	ldr	r1, [pc, #248]	@ (8010a10 <ip4_output_if_src+0x150>)
 8010918:	483c      	ldr	r0, [pc, #240]	@ (8010a0c <ip4_output_if_src+0x14c>)
 801091a:	f001 f8d5 	bl	8011ac8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	78fa      	ldrb	r2, [r7, #3]
 8010922:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801092a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010934:	8b7b      	ldrh	r3, [r7, #26]
 8010936:	089b      	lsrs	r3, r3, #2
 8010938:	b29b      	uxth	r3, r3
 801093a:	b2db      	uxtb	r3, r3
 801093c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010940:	b2da      	uxtb	r2, r3
 8010942:	69fb      	ldr	r3, [r7, #28]
 8010944:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801094c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	891b      	ldrh	r3, [r3, #8]
 8010952:	4618      	mov	r0, r3
 8010954:	f7f6 fe22 	bl	800759c <lwip_htons>
 8010958:	4603      	mov	r3, r0
 801095a:	461a      	mov	r2, r3
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	2200      	movs	r2, #0
 8010964:	719a      	strb	r2, [r3, #6]
 8010966:	2200      	movs	r2, #0
 8010968:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801096a:	4b2a      	ldr	r3, [pc, #168]	@ (8010a14 <ip4_output_if_src+0x154>)
 801096c:	881b      	ldrh	r3, [r3, #0]
 801096e:	4618      	mov	r0, r3
 8010970:	f7f6 fe14 	bl	800759c <lwip_htons>
 8010974:	4603      	mov	r3, r0
 8010976:	461a      	mov	r2, r3
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801097c:	4b25      	ldr	r3, [pc, #148]	@ (8010a14 <ip4_output_if_src+0x154>)
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	3301      	adds	r3, #1
 8010982:	b29a      	uxth	r2, r3
 8010984:	4b23      	ldr	r3, [pc, #140]	@ (8010a14 <ip4_output_if_src+0x154>)
 8010986:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d104      	bne.n	8010998 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801098e:	4b22      	ldr	r3, [pc, #136]	@ (8010a18 <ip4_output_if_src+0x158>)
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	60da      	str	r2, [r3, #12]
 8010996:	e003      	b.n	80109a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80109a0:	69fb      	ldr	r3, [r7, #28]
 80109a2:	2200      	movs	r2, #0
 80109a4:	729a      	strb	r2, [r3, #10]
 80109a6:	2200      	movs	r2, #0
 80109a8:	72da      	strb	r2, [r3, #11]
 80109aa:	e00f      	b.n	80109cc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	895b      	ldrh	r3, [r3, #10]
 80109b0:	2b13      	cmp	r3, #19
 80109b2:	d802      	bhi.n	80109ba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80109b4:	f06f 0301 	mvn.w	r3, #1
 80109b8:	e020      	b.n	80109fc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	691b      	ldr	r3, [r3, #16]
 80109c4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80109c6:	f107 0314 	add.w	r3, r7, #20
 80109ca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80109cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d00c      	beq.n	80109ee <ip4_output_if_src+0x12e>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	891a      	ldrh	r2, [r3, #8]
 80109d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80109dc:	429a      	cmp	r2, r3
 80109de:	d906      	bls.n	80109ee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f000 fd53 	bl	8011490 <ip4_frag>
 80109ea:	4603      	mov	r3, r0
 80109ec:	e006      	b.n	80109fc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80109ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f0:	695b      	ldr	r3, [r3, #20]
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	68f9      	ldr	r1, [r7, #12]
 80109f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80109f8:	4798      	blx	r3
 80109fa:	4603      	mov	r3, r0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3720      	adds	r7, #32
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	08015070 	.word	0x08015070
 8010a08:	080150a4 	.word	0x080150a4
 8010a0c:	080150b0 	.word	0x080150b0
 8010a10:	080150d8 	.word	0x080150d8
 8010a14:	20008a32 	.word	0x20008a32
 8010a18:	080154c0 	.word	0x080154c0

08010a1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b085      	sub	sp, #20
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a30:	d002      	beq.n	8010a38 <ip4_addr_isbroadcast_u32+0x1c>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d101      	bne.n	8010a3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e02a      	b.n	8010a92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a42:	f003 0302 	and.w	r3, r3, #2
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d101      	bne.n	8010a4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	e021      	b.n	8010a92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	3304      	adds	r3, #4
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d101      	bne.n	8010a5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	e019      	b.n	8010a92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010a5e:	68fa      	ldr	r2, [r7, #12]
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	3304      	adds	r3, #4
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	405a      	eors	r2, r3
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	3308      	adds	r3, #8
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4013      	ands	r3, r2
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d10d      	bne.n	8010a90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	3308      	adds	r3, #8
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	43da      	mvns	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	3308      	adds	r3, #8
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d101      	bne.n	8010a90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	e000      	b.n	8010a92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010a90:	2300      	movs	r3, #0
  }
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3714      	adds	r7, #20
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
	...

08010aa0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010aaa:	4b12      	ldr	r3, [pc, #72]	@ (8010af4 <ip_reass_tmr+0x54>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010ab0:	e018      	b.n	8010ae4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	7fdb      	ldrb	r3, [r3, #31]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00b      	beq.n	8010ad2 <ip_reass_tmr+0x32>
      r->timer--;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	7fdb      	ldrb	r3, [r3, #31]
 8010abe:	3b01      	subs	r3, #1
 8010ac0:	b2da      	uxtb	r2, r3
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	60fb      	str	r3, [r7, #12]
 8010ad0:	e008      	b.n	8010ae4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010adc:	68b9      	ldr	r1, [r7, #8]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f80a 	bl	8010af8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1e3      	bne.n	8010ab2 <ip_reass_tmr+0x12>
    }
  }
}
 8010aea:	bf00      	nop
 8010aec:	bf00      	nop
 8010aee:	3710      	adds	r7, #16
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	20008a34 	.word	0x20008a34

08010af8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b088      	sub	sp, #32
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010b02:	2300      	movs	r3, #0
 8010b04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d105      	bne.n	8010b1a <ip_reass_free_complete_datagram+0x22>
 8010b0e:	4b45      	ldr	r3, [pc, #276]	@ (8010c24 <ip_reass_free_complete_datagram+0x12c>)
 8010b10:	22ab      	movs	r2, #171	@ 0xab
 8010b12:	4945      	ldr	r1, [pc, #276]	@ (8010c28 <ip_reass_free_complete_datagram+0x130>)
 8010b14:	4845      	ldr	r0, [pc, #276]	@ (8010c2c <ip_reass_free_complete_datagram+0x134>)
 8010b16:	f000 ffd7 	bl	8011ac8 <iprintf>
  if (prev != NULL) {
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d00a      	beq.n	8010b36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d005      	beq.n	8010b36 <ip_reass_free_complete_datagram+0x3e>
 8010b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8010c24 <ip_reass_free_complete_datagram+0x12c>)
 8010b2c:	22ad      	movs	r2, #173	@ 0xad
 8010b2e:	4940      	ldr	r1, [pc, #256]	@ (8010c30 <ip_reass_free_complete_datagram+0x138>)
 8010b30:	483e      	ldr	r0, [pc, #248]	@ (8010c2c <ip_reass_free_complete_datagram+0x134>)
 8010b32:	f000 ffc9 	bl	8011ac8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	889b      	ldrh	r3, [r3, #4]
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d12a      	bne.n	8010b9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	6858      	ldr	r0, [r3, #4]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	3308      	adds	r3, #8
 8010b5e:	2214      	movs	r2, #20
 8010b60:	4619      	mov	r1, r3
 8010b62:	f001 f97e 	bl	8011e62 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8010b66:	2101      	movs	r1, #1
 8010b68:	69b8      	ldr	r0, [r7, #24]
 8010b6a:	f7ff fc47 	bl	80103fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010b6e:	69b8      	ldr	r0, [r7, #24]
 8010b70:	f7f8 f8da 	bl	8008d28 <pbuf_clen>
 8010b74:	4603      	mov	r3, r0
 8010b76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010b78:	8bfa      	ldrh	r2, [r7, #30]
 8010b7a:	8a7b      	ldrh	r3, [r7, #18]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b82:	db05      	blt.n	8010b90 <ip_reass_free_complete_datagram+0x98>
 8010b84:	4b27      	ldr	r3, [pc, #156]	@ (8010c24 <ip_reass_free_complete_datagram+0x12c>)
 8010b86:	22bc      	movs	r2, #188	@ 0xbc
 8010b88:	492a      	ldr	r1, [pc, #168]	@ (8010c34 <ip_reass_free_complete_datagram+0x13c>)
 8010b8a:	4828      	ldr	r0, [pc, #160]	@ (8010c2c <ip_reass_free_complete_datagram+0x134>)
 8010b8c:	f000 ff9c 	bl	8011ac8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010b90:	8bfa      	ldrh	r2, [r7, #30]
 8010b92:	8a7b      	ldrh	r3, [r7, #18]
 8010b94:	4413      	add	r3, r2
 8010b96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010b98:	69b8      	ldr	r0, [r7, #24]
 8010b9a:	f7f8 f83d 	bl	8008c18 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8010ba4:	e01f      	b.n	8010be6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010bac:	69bb      	ldr	r3, [r7, #24]
 8010bae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f7f8 f8b6 	bl	8008d28 <pbuf_clen>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010bc0:	8bfa      	ldrh	r2, [r7, #30]
 8010bc2:	8a7b      	ldrh	r3, [r7, #18]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bca:	db05      	blt.n	8010bd8 <ip_reass_free_complete_datagram+0xe0>
 8010bcc:	4b15      	ldr	r3, [pc, #84]	@ (8010c24 <ip_reass_free_complete_datagram+0x12c>)
 8010bce:	22cc      	movs	r2, #204	@ 0xcc
 8010bd0:	4918      	ldr	r1, [pc, #96]	@ (8010c34 <ip_reass_free_complete_datagram+0x13c>)
 8010bd2:	4816      	ldr	r0, [pc, #88]	@ (8010c2c <ip_reass_free_complete_datagram+0x134>)
 8010bd4:	f000 ff78 	bl	8011ac8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010bd8:	8bfa      	ldrh	r2, [r7, #30]
 8010bda:	8a7b      	ldrh	r3, [r7, #18]
 8010bdc:	4413      	add	r3, r2
 8010bde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f7f8 f819 	bl	8008c18 <pbuf_free>
  while (p != NULL) {
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d1dc      	bne.n	8010ba6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010bec:	6839      	ldr	r1, [r7, #0]
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 f8c2 	bl	8010d78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010bf4:	4b10      	ldr	r3, [pc, #64]	@ (8010c38 <ip_reass_free_complete_datagram+0x140>)
 8010bf6:	881b      	ldrh	r3, [r3, #0]
 8010bf8:	8bfa      	ldrh	r2, [r7, #30]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d905      	bls.n	8010c0a <ip_reass_free_complete_datagram+0x112>
 8010bfe:	4b09      	ldr	r3, [pc, #36]	@ (8010c24 <ip_reass_free_complete_datagram+0x12c>)
 8010c00:	22d2      	movs	r2, #210	@ 0xd2
 8010c02:	490e      	ldr	r1, [pc, #56]	@ (8010c3c <ip_reass_free_complete_datagram+0x144>)
 8010c04:	4809      	ldr	r0, [pc, #36]	@ (8010c2c <ip_reass_free_complete_datagram+0x134>)
 8010c06:	f000 ff5f 	bl	8011ac8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010c38 <ip_reass_free_complete_datagram+0x140>)
 8010c0c:	881a      	ldrh	r2, [r3, #0]
 8010c0e:	8bfb      	ldrh	r3, [r7, #30]
 8010c10:	1ad3      	subs	r3, r2, r3
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	4b08      	ldr	r3, [pc, #32]	@ (8010c38 <ip_reass_free_complete_datagram+0x140>)
 8010c16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010c18:	8bfb      	ldrh	r3, [r7, #30]
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3720      	adds	r7, #32
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	08015108 	.word	0x08015108
 8010c28:	08015144 	.word	0x08015144
 8010c2c:	08015150 	.word	0x08015150
 8010c30:	08015178 	.word	0x08015178
 8010c34:	0801518c 	.word	0x0801518c
 8010c38:	20008a38 	.word	0x20008a38
 8010c3c:	080151ac 	.word	0x080151ac

08010c40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b08a      	sub	sp, #40	@ 0x28
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010c52:	2300      	movs	r3, #0
 8010c54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010c56:	2300      	movs	r3, #0
 8010c58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010c5e:	4b28      	ldr	r3, [pc, #160]	@ (8010d00 <ip_reass_remove_oldest_datagram+0xc0>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010c64:	e030      	b.n	8010cc8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c68:	695a      	ldr	r2, [r3, #20]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d10c      	bne.n	8010c8c <ip_reass_remove_oldest_datagram+0x4c>
 8010c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c74:	699a      	ldr	r2, [r3, #24]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	691b      	ldr	r3, [r3, #16]
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d106      	bne.n	8010c8c <ip_reass_remove_oldest_datagram+0x4c>
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c80:	899a      	ldrh	r2, [r3, #12]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	889b      	ldrh	r3, [r3, #4]
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d014      	beq.n	8010cb6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	3301      	adds	r3, #1
 8010c90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d104      	bne.n	8010ca2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010c9c:	69fb      	ldr	r3, [r7, #28]
 8010c9e:	61bb      	str	r3, [r7, #24]
 8010ca0:	e009      	b.n	8010cb6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca4:	7fda      	ldrb	r2, [r3, #31]
 8010ca6:	6a3b      	ldr	r3, [r7, #32]
 8010ca8:	7fdb      	ldrb	r3, [r3, #31]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d803      	bhi.n	8010cb6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d001      	beq.n	8010cc2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1cb      	bne.n	8010c66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d008      	beq.n	8010ce6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010cd4:	69b9      	ldr	r1, [r7, #24]
 8010cd6:	6a38      	ldr	r0, [r7, #32]
 8010cd8:	f7ff ff0e 	bl	8010af8 <ip_reass_free_complete_datagram>
 8010cdc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010ce6:	697a      	ldr	r2, [r7, #20]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	429a      	cmp	r2, r3
 8010cec:	da02      	bge.n	8010cf4 <ip_reass_remove_oldest_datagram+0xb4>
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	dcac      	bgt.n	8010c4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010cf4:	697b      	ldr	r3, [r7, #20]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3728      	adds	r7, #40	@ 0x28
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20008a34 	.word	0x20008a34

08010d04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010d0e:	2004      	movs	r0, #4
 8010d10:	f7f7 f8bc 	bl	8007e8c <memp_malloc>
 8010d14:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d110      	bne.n	8010d3e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010d1c:	6839      	ldr	r1, [r7, #0]
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ff ff8e 	bl	8010c40 <ip_reass_remove_oldest_datagram>
 8010d24:	4602      	mov	r2, r0
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	dc03      	bgt.n	8010d34 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010d2c:	2004      	movs	r0, #4
 8010d2e:	f7f7 f8ad 	bl	8007e8c <memp_malloc>
 8010d32:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d101      	bne.n	8010d3e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e016      	b.n	8010d6c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010d3e:	2220      	movs	r2, #32
 8010d40:	2100      	movs	r1, #0
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f001 f818 	bl	8011d78 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	220f      	movs	r2, #15
 8010d4c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010d4e:	4b09      	ldr	r3, [pc, #36]	@ (8010d74 <ip_reass_enqueue_new_datagram+0x70>)
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010d56:	4a07      	ldr	r2, [pc, #28]	@ (8010d74 <ip_reass_enqueue_new_datagram+0x70>)
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	3308      	adds	r3, #8
 8010d60:	2214      	movs	r2, #20
 8010d62:	6879      	ldr	r1, [r7, #4]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f001 f87c 	bl	8011e62 <memcpy>
  return ipr;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	20008a34 	.word	0x20008a34

08010d78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010d82:	4b10      	ldr	r3, [pc, #64]	@ (8010dc4 <ip_reass_dequeue_datagram+0x4c>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d104      	bne.n	8010d96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a0c      	ldr	r2, [pc, #48]	@ (8010dc4 <ip_reass_dequeue_datagram+0x4c>)
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	e00d      	b.n	8010db2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d106      	bne.n	8010daa <ip_reass_dequeue_datagram+0x32>
 8010d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8010dc8 <ip_reass_dequeue_datagram+0x50>)
 8010d9e:	f240 1245 	movw	r2, #325	@ 0x145
 8010da2:	490a      	ldr	r1, [pc, #40]	@ (8010dcc <ip_reass_dequeue_datagram+0x54>)
 8010da4:	480a      	ldr	r0, [pc, #40]	@ (8010dd0 <ip_reass_dequeue_datagram+0x58>)
 8010da6:	f000 fe8f 	bl	8011ac8 <iprintf>
    prev->next = ipr->next;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681a      	ldr	r2, [r3, #0]
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010db2:	6879      	ldr	r1, [r7, #4]
 8010db4:	2004      	movs	r0, #4
 8010db6:	f7f7 f8d9 	bl	8007f6c <memp_free>
}
 8010dba:	bf00      	nop
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	20008a34 	.word	0x20008a34
 8010dc8:	08015108 	.word	0x08015108
 8010dcc:	080151d0 	.word	0x080151d0
 8010dd0:	08015150 	.word	0x08015150

08010dd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08c      	sub	sp, #48	@ 0x30
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010de0:	2300      	movs	r3, #0
 8010de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010de4:	2301      	movs	r3, #1
 8010de6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	885b      	ldrh	r3, [r3, #2]
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7f6 fbd1 	bl	800759c <lwip_htons>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	f003 030f 	and.w	r3, r3, #15
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010e0c:	7e7b      	ldrb	r3, [r7, #25]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	8b7a      	ldrh	r2, [r7, #26]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d202      	bcs.n	8010e1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010e16:	f04f 33ff 	mov.w	r3, #4294967295
 8010e1a:	e135      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010e1c:	7e7b      	ldrb	r3, [r7, #25]
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	8b7a      	ldrh	r2, [r7, #26]
 8010e22:	1ad3      	subs	r3, r2, r3
 8010e24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	88db      	ldrh	r3, [r3, #6]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7f6 fbb5 	bl	800759c <lwip_htons>
 8010e32:	4603      	mov	r3, r0
 8010e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	00db      	lsls	r3, r3, #3
 8010e3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8010e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e46:	2200      	movs	r2, #0
 8010e48:	701a      	strb	r2, [r3, #0]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	705a      	strb	r2, [r3, #1]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	709a      	strb	r2, [r3, #2]
 8010e52:	2200      	movs	r2, #0
 8010e54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e58:	8afa      	ldrh	r2, [r7, #22]
 8010e5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010e5c:	8afa      	ldrh	r2, [r7, #22]
 8010e5e:	8b7b      	ldrh	r3, [r7, #26]
 8010e60:	4413      	add	r3, r2
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e6a:	88db      	ldrh	r3, [r3, #6]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	8afa      	ldrh	r2, [r7, #22]
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d902      	bls.n	8010e7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010e74:	f04f 33ff 	mov.w	r3, #4294967295
 8010e78:	e106      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	685b      	ldr	r3, [r3, #4]
 8010e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e80:	e068      	b.n	8010f54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e8a:	889b      	ldrh	r3, [r3, #4]
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	889b      	ldrh	r3, [r3, #4]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d235      	bcs.n	8010f04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d020      	beq.n	8010ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea6:	889b      	ldrh	r3, [r3, #4]
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eac:	88db      	ldrh	r3, [r3, #6]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d307      	bcc.n	8010ec4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eb6:	88db      	ldrh	r3, [r3, #6]
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	889b      	ldrh	r3, [r3, #4]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d902      	bls.n	8010eca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec8:	e0de      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ecc:	68ba      	ldr	r2, [r7, #8]
 8010ece:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed2:	88db      	ldrh	r3, [r3, #6]
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed8:	889b      	ldrh	r3, [r3, #4]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	429a      	cmp	r2, r3
 8010ede:	d03d      	beq.n	8010f5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010ee4:	e03a      	b.n	8010f5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee8:	88db      	ldrh	r3, [r3, #6]
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	889b      	ldrh	r3, [r3, #4]
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d902      	bls.n	8010efc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8010efa:	e0c5      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68ba      	ldr	r2, [r7, #8]
 8010f00:	605a      	str	r2, [r3, #4]
      break;
 8010f02:	e02b      	b.n	8010f5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f06:	889b      	ldrh	r3, [r3, #4]
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	889b      	ldrh	r3, [r3, #4]
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d102      	bne.n	8010f1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f14:	f04f 33ff 	mov.w	r3, #4294967295
 8010f18:	e0b6      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f1c:	889b      	ldrh	r3, [r3, #4]
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	88db      	ldrh	r3, [r3, #6]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d202      	bcs.n	8010f30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2e:	e0ab      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d009      	beq.n	8010f4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f38:	88db      	ldrh	r3, [r3, #6]
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	889b      	ldrh	r3, [r3, #4]
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d001      	beq.n	8010f4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010f46:	2300      	movs	r3, #0
 8010f48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8010f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d193      	bne.n	8010e82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010f5a:	e000      	b.n	8010f5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010f5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d12d      	bne.n	8010fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d01c      	beq.n	8010fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f6c:	88db      	ldrh	r3, [r3, #6]
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f72:	889b      	ldrh	r3, [r3, #4]
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d906      	bls.n	8010f88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010f7a:	4b45      	ldr	r3, [pc, #276]	@ (8011090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010f7c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010f80:	4944      	ldr	r1, [pc, #272]	@ (8011094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010f82:	4845      	ldr	r0, [pc, #276]	@ (8011098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010f84:	f000 fda0 	bl	8011ac8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f90:	88db      	ldrh	r3, [r3, #6]
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f96:	889b      	ldrh	r3, [r3, #4]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d010      	beq.n	8010fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	623b      	str	r3, [r7, #32]
 8010fa2:	e00d      	b.n	8010fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d006      	beq.n	8010fba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010fac:	4b38      	ldr	r3, [pc, #224]	@ (8011090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010fae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8010fb2:	493a      	ldr	r1, [pc, #232]	@ (801109c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010fb4:	4838      	ldr	r0, [pc, #224]	@ (8011098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010fb6:	f000 fd87 	bl	8011ac8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d105      	bne.n	8010fd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	7f9b      	ldrb	r3, [r3, #30]
 8010fca:	f003 0301 	and.w	r3, r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d059      	beq.n	8011086 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010fd2:	6a3b      	ldr	r3, [r7, #32]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d04f      	beq.n	8011078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d006      	beq.n	8010fee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	889b      	ldrh	r3, [r3, #4]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d002      	beq.n	8010ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	623b      	str	r3, [r7, #32]
 8010ff2:	e041      	b.n	8011078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8010ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010ffe:	e012      	b.n	8011026 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011008:	88db      	ldrh	r3, [r3, #6]
 801100a:	b29a      	uxth	r2, r3
 801100c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801100e:	889b      	ldrh	r3, [r3, #4]
 8011010:	b29b      	uxth	r3, r3
 8011012:	429a      	cmp	r2, r3
 8011014:	d002      	beq.n	801101c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011016:	2300      	movs	r3, #0
 8011018:	623b      	str	r3, [r7, #32]
            break;
 801101a:	e007      	b.n	801102c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801101c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801101e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1e9      	bne.n	8011000 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d022      	beq.n	8011078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801103a:	4b15      	ldr	r3, [pc, #84]	@ (8011090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801103c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011040:	4917      	ldr	r1, [pc, #92]	@ (80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011042:	4815      	ldr	r0, [pc, #84]	@ (8011098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011044:	f000 fd40 	bl	8011ac8 <iprintf>
          LWIP_ASSERT("sanity check",
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011050:	429a      	cmp	r2, r3
 8011052:	d106      	bne.n	8011062 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011054:	4b0e      	ldr	r3, [pc, #56]	@ (8011090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011056:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801105a:	4911      	ldr	r1, [pc, #68]	@ (80110a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801105c:	480e      	ldr	r0, [pc, #56]	@ (8011098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801105e:	f000 fd33 	bl	8011ac8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d006      	beq.n	8011078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801106a:	4b09      	ldr	r3, [pc, #36]	@ (8011090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801106c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011070:	490c      	ldr	r1, [pc, #48]	@ (80110a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011072:	4809      	ldr	r0, [pc, #36]	@ (8011098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011074:	f000 fd28 	bl	8011ac8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011078:	6a3b      	ldr	r3, [r7, #32]
 801107a:	2b00      	cmp	r3, #0
 801107c:	bf14      	ite	ne
 801107e:	2301      	movne	r3, #1
 8011080:	2300      	moveq	r3, #0
 8011082:	b2db      	uxtb	r3, r3
 8011084:	e000      	b.n	8011088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	3730      	adds	r7, #48	@ 0x30
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	08015108 	.word	0x08015108
 8011094:	080151ec 	.word	0x080151ec
 8011098:	08015150 	.word	0x08015150
 801109c:	0801520c 	.word	0x0801520c
 80110a0:	08015244 	.word	0x08015244
 80110a4:	08015254 	.word	0x08015254

080110a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b08e      	sub	sp, #56	@ 0x38
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80110b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	f003 030f 	and.w	r3, r3, #15
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	2b14      	cmp	r3, #20
 80110c6:	f040 8171 	bne.w	80113ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80110ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110cc:	88db      	ldrh	r3, [r3, #6]
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7f6 fa63 	bl	800759c <lwip_htons>
 80110d6:	4603      	mov	r3, r0
 80110d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80110dc:	b29b      	uxth	r3, r3
 80110de:	00db      	lsls	r3, r3, #3
 80110e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80110e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e4:	885b      	ldrh	r3, [r3, #2]
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7f6 fa57 	bl	800759c <lwip_htons>
 80110ee:	4603      	mov	r3, r0
 80110f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80110f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	f003 030f 	and.w	r3, r3, #15
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011106:	b29b      	uxth	r3, r3
 8011108:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801110a:	429a      	cmp	r2, r3
 801110c:	f0c0 8150 	bcc.w	80113b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011114:	b29b      	uxth	r3, r3
 8011116:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7f7 fe03 	bl	8008d28 <pbuf_clen>
 8011122:	4603      	mov	r3, r0
 8011124:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011126:	4b8c      	ldr	r3, [pc, #560]	@ (8011358 <ip4_reass+0x2b0>)
 8011128:	881b      	ldrh	r3, [r3, #0]
 801112a:	461a      	mov	r2, r3
 801112c:	8c3b      	ldrh	r3, [r7, #32]
 801112e:	4413      	add	r3, r2
 8011130:	2b0a      	cmp	r3, #10
 8011132:	dd10      	ble.n	8011156 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011134:	8c3b      	ldrh	r3, [r7, #32]
 8011136:	4619      	mov	r1, r3
 8011138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801113a:	f7ff fd81 	bl	8010c40 <ip_reass_remove_oldest_datagram>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 8137 	beq.w	80113b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011146:	4b84      	ldr	r3, [pc, #528]	@ (8011358 <ip4_reass+0x2b0>)
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	461a      	mov	r2, r3
 801114c:	8c3b      	ldrh	r3, [r7, #32]
 801114e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011150:	2b0a      	cmp	r3, #10
 8011152:	f300 812f 	bgt.w	80113b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011156:	4b81      	ldr	r3, [pc, #516]	@ (801135c <ip4_reass+0x2b4>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	633b      	str	r3, [r7, #48]	@ 0x30
 801115c:	e015      	b.n	801118a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801115e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011160:	695a      	ldr	r2, [r3, #20]
 8011162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	429a      	cmp	r2, r3
 8011168:	d10c      	bne.n	8011184 <ip4_reass+0xdc>
 801116a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801116c:	699a      	ldr	r2, [r3, #24]
 801116e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	429a      	cmp	r2, r3
 8011174:	d106      	bne.n	8011184 <ip4_reass+0xdc>
 8011176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011178:	899a      	ldrh	r2, [r3, #12]
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	889b      	ldrh	r3, [r3, #4]
 801117e:	b29b      	uxth	r3, r3
 8011180:	429a      	cmp	r2, r3
 8011182:	d006      	beq.n	8011192 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	633b      	str	r3, [r7, #48]	@ 0x30
 801118a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118c:	2b00      	cmp	r3, #0
 801118e:	d1e6      	bne.n	801115e <ip4_reass+0xb6>
 8011190:	e000      	b.n	8011194 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011192:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011196:	2b00      	cmp	r3, #0
 8011198:	d109      	bne.n	80111ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801119a:	8c3b      	ldrh	r3, [r7, #32]
 801119c:	4619      	mov	r1, r3
 801119e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111a0:	f7ff fdb0 	bl	8010d04 <ip_reass_enqueue_new_datagram>
 80111a4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80111a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d11c      	bne.n	80111e6 <ip4_reass+0x13e>
      goto nullreturn;
 80111ac:	e105      	b.n	80113ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80111ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b0:	88db      	ldrh	r3, [r3, #6]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7f6 f9f1 	bl	800759c <lwip_htons>
 80111ba:	4603      	mov	r3, r0
 80111bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d110      	bne.n	80111e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80111c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111c6:	89db      	ldrh	r3, [r3, #14]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7f6 f9e7 	bl	800759c <lwip_htons>
 80111ce:	4603      	mov	r3, r0
 80111d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d006      	beq.n	80111e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80111d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111da:	3308      	adds	r3, #8
 80111dc:	2214      	movs	r2, #20
 80111de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80111e0:	4618      	mov	r0, r3
 80111e2:	f000 fe3e 	bl	8011e62 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80111e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e8:	88db      	ldrh	r3, [r3, #6]
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	f003 0320 	and.w	r3, r3, #32
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	bf0c      	ite	eq
 80111f4:	2301      	moveq	r3, #1
 80111f6:	2300      	movne	r3, #0
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00e      	beq.n	8011220 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011202:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011206:	4413      	add	r3, r2
 8011208:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801120a:	8b7a      	ldrh	r2, [r7, #26]
 801120c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801120e:	429a      	cmp	r2, r3
 8011210:	f0c0 80a0 	bcc.w	8011354 <ip4_reass+0x2ac>
 8011214:	8b7b      	ldrh	r3, [r7, #26]
 8011216:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801121a:	4293      	cmp	r3, r2
 801121c:	f200 809a 	bhi.w	8011354 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011220:	69fa      	ldr	r2, [r7, #28]
 8011222:	6879      	ldr	r1, [r7, #4]
 8011224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011226:	f7ff fdd5 	bl	8010dd4 <ip_reass_chain_frag_into_datagram_and_validate>
 801122a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011232:	f000 809b 	beq.w	801136c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011236:	4b48      	ldr	r3, [pc, #288]	@ (8011358 <ip4_reass+0x2b0>)
 8011238:	881a      	ldrh	r2, [r3, #0]
 801123a:	8c3b      	ldrh	r3, [r7, #32]
 801123c:	4413      	add	r3, r2
 801123e:	b29a      	uxth	r2, r3
 8011240:	4b45      	ldr	r3, [pc, #276]	@ (8011358 <ip4_reass+0x2b0>)
 8011242:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00d      	beq.n	8011266 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801124a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801124c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801124e:	4413      	add	r3, r2
 8011250:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011254:	8a7a      	ldrh	r2, [r7, #18]
 8011256:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801125a:	7f9b      	ldrb	r3, [r3, #30]
 801125c:	f043 0301 	orr.w	r3, r3, #1
 8011260:	b2da      	uxtb	r2, r3
 8011262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011264:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	2b01      	cmp	r3, #1
 801126a:	d171      	bne.n	8011350 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801126c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801126e:	8b9b      	ldrh	r3, [r3, #28]
 8011270:	3314      	adds	r3, #20
 8011272:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	685b      	ldr	r3, [r3, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801127e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011288:	3308      	adds	r3, #8
 801128a:	2214      	movs	r2, #20
 801128c:	4619      	mov	r1, r3
 801128e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011290:	f000 fde7 	bl	8011e62 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011294:	8a3b      	ldrh	r3, [r7, #16]
 8011296:	4618      	mov	r0, r3
 8011298:	f7f6 f980 	bl	800759c <lwip_htons>
 801129c:	4603      	mov	r3, r0
 801129e:	461a      	mov	r2, r3
 80112a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80112a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112a6:	2200      	movs	r2, #0
 80112a8:	719a      	strb	r2, [r3, #6]
 80112aa:	2200      	movs	r2, #0
 80112ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80112ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112b0:	2200      	movs	r2, #0
 80112b2:	729a      	strb	r2, [r3, #10]
 80112b4:	2200      	movs	r2, #0
 80112b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80112b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80112be:	e00d      	b.n	80112dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80112c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80112c6:	2114      	movs	r1, #20
 80112c8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80112ca:	f7f7 fc1f 	bl	8008b0c <pbuf_remove_header>
      pbuf_cat(p, r);
 80112ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7f7 fd63 	bl	8008d9c <pbuf_cat>
      r = iprh->next_pbuf;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80112dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1ee      	bne.n	80112c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80112e2:	4b1e      	ldr	r3, [pc, #120]	@ (801135c <ip4_reass+0x2b4>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d102      	bne.n	80112f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80112ec:	2300      	movs	r3, #0
 80112ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112f0:	e010      	b.n	8011314 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80112f2:	4b1a      	ldr	r3, [pc, #104]	@ (801135c <ip4_reass+0x2b4>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112f8:	e007      	b.n	801130a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80112fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011300:	429a      	cmp	r2, r3
 8011302:	d006      	beq.n	8011312 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801130a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1f4      	bne.n	80112fa <ip4_reass+0x252>
 8011310:	e000      	b.n	8011314 <ip4_reass+0x26c>
          break;
 8011312:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011318:	f7ff fd2e 	bl	8010d78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7f7 fd03 	bl	8008d28 <pbuf_clen>
 8011322:	4603      	mov	r3, r0
 8011324:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011326:	4b0c      	ldr	r3, [pc, #48]	@ (8011358 <ip4_reass+0x2b0>)
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	8c3a      	ldrh	r2, [r7, #32]
 801132c:	429a      	cmp	r2, r3
 801132e:	d906      	bls.n	801133e <ip4_reass+0x296>
 8011330:	4b0b      	ldr	r3, [pc, #44]	@ (8011360 <ip4_reass+0x2b8>)
 8011332:	f240 229b 	movw	r2, #667	@ 0x29b
 8011336:	490b      	ldr	r1, [pc, #44]	@ (8011364 <ip4_reass+0x2bc>)
 8011338:	480b      	ldr	r0, [pc, #44]	@ (8011368 <ip4_reass+0x2c0>)
 801133a:	f000 fbc5 	bl	8011ac8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801133e:	4b06      	ldr	r3, [pc, #24]	@ (8011358 <ip4_reass+0x2b0>)
 8011340:	881a      	ldrh	r2, [r3, #0]
 8011342:	8c3b      	ldrh	r3, [r7, #32]
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	b29a      	uxth	r2, r3
 8011348:	4b03      	ldr	r3, [pc, #12]	@ (8011358 <ip4_reass+0x2b0>)
 801134a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	e038      	b.n	80113c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011350:	2300      	movs	r3, #0
 8011352:	e036      	b.n	80113c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8011354:	bf00      	nop
 8011356:	e00a      	b.n	801136e <ip4_reass+0x2c6>
 8011358:	20008a38 	.word	0x20008a38
 801135c:	20008a34 	.word	0x20008a34
 8011360:	08015108 	.word	0x08015108
 8011364:	08015278 	.word	0x08015278
 8011368:	08015150 	.word	0x08015150
    goto nullreturn_ipr;
 801136c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801136e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011370:	2b00      	cmp	r3, #0
 8011372:	d106      	bne.n	8011382 <ip4_reass+0x2da>
 8011374:	4b15      	ldr	r3, [pc, #84]	@ (80113cc <ip4_reass+0x324>)
 8011376:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801137a:	4915      	ldr	r1, [pc, #84]	@ (80113d0 <ip4_reass+0x328>)
 801137c:	4815      	ldr	r0, [pc, #84]	@ (80113d4 <ip4_reass+0x32c>)
 801137e:	f000 fba3 	bl	8011ac8 <iprintf>
  if (ipr->p == NULL) {
 8011382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d116      	bne.n	80113b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801138a:	4b13      	ldr	r3, [pc, #76]	@ (80113d8 <ip4_reass+0x330>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011390:	429a      	cmp	r2, r3
 8011392:	d006      	beq.n	80113a2 <ip4_reass+0x2fa>
 8011394:	4b0d      	ldr	r3, [pc, #52]	@ (80113cc <ip4_reass+0x324>)
 8011396:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801139a:	4910      	ldr	r1, [pc, #64]	@ (80113dc <ip4_reass+0x334>)
 801139c:	480d      	ldr	r0, [pc, #52]	@ (80113d4 <ip4_reass+0x32c>)
 801139e:	f000 fb93 	bl	8011ac8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80113a2:	2100      	movs	r1, #0
 80113a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80113a6:	f7ff fce7 	bl	8010d78 <ip_reass_dequeue_datagram>
 80113aa:	e006      	b.n	80113ba <ip4_reass+0x312>
    goto nullreturn;
 80113ac:	bf00      	nop
 80113ae:	e004      	b.n	80113ba <ip4_reass+0x312>
    goto nullreturn;
 80113b0:	bf00      	nop
 80113b2:	e002      	b.n	80113ba <ip4_reass+0x312>
      goto nullreturn;
 80113b4:	bf00      	nop
 80113b6:	e000      	b.n	80113ba <ip4_reass+0x312>
  }

nullreturn:
 80113b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7f7 fc2c 	bl	8008c18 <pbuf_free>
  return NULL;
 80113c0:	2300      	movs	r3, #0
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3738      	adds	r7, #56	@ 0x38
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	08015108 	.word	0x08015108
 80113d0:	08015294 	.word	0x08015294
 80113d4:	08015150 	.word	0x08015150
 80113d8:	20008a34 	.word	0x20008a34
 80113dc:	080152a0 	.word	0x080152a0

080113e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80113e4:	2005      	movs	r0, #5
 80113e6:	f7f6 fd51 	bl	8007e8c <memp_malloc>
 80113ea:	4603      	mov	r3, r0
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <ip_frag_free_pbuf_custom_ref+0x1c>
 80113fe:	4b07      	ldr	r3, [pc, #28]	@ (801141c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011400:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011404:	4906      	ldr	r1, [pc, #24]	@ (8011420 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011406:	4807      	ldr	r0, [pc, #28]	@ (8011424 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011408:	f000 fb5e 	bl	8011ac8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801140c:	6879      	ldr	r1, [r7, #4]
 801140e:	2005      	movs	r0, #5
 8011410:	f7f6 fdac 	bl	8007f6c <memp_free>
}
 8011414:	bf00      	nop
 8011416:	3708      	adds	r7, #8
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	08015108 	.word	0x08015108
 8011420:	080152c0 	.word	0x080152c0
 8011424:	08015150 	.word	0x08015150

08011428 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <ipfrag_free_pbuf_custom+0x20>
 801143a:	4b11      	ldr	r3, [pc, #68]	@ (8011480 <ipfrag_free_pbuf_custom+0x58>)
 801143c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011440:	4910      	ldr	r1, [pc, #64]	@ (8011484 <ipfrag_free_pbuf_custom+0x5c>)
 8011442:	4811      	ldr	r0, [pc, #68]	@ (8011488 <ipfrag_free_pbuf_custom+0x60>)
 8011444:	f000 fb40 	bl	8011ac8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011448:	68fa      	ldr	r2, [r7, #12]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	429a      	cmp	r2, r3
 801144e:	d006      	beq.n	801145e <ipfrag_free_pbuf_custom+0x36>
 8011450:	4b0b      	ldr	r3, [pc, #44]	@ (8011480 <ipfrag_free_pbuf_custom+0x58>)
 8011452:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011456:	490d      	ldr	r1, [pc, #52]	@ (801148c <ipfrag_free_pbuf_custom+0x64>)
 8011458:	480b      	ldr	r0, [pc, #44]	@ (8011488 <ipfrag_free_pbuf_custom+0x60>)
 801145a:	f000 fb35 	bl	8011ac8 <iprintf>
  if (pcr->original != NULL) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d004      	beq.n	8011470 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	695b      	ldr	r3, [r3, #20]
 801146a:	4618      	mov	r0, r3
 801146c:	f7f7 fbd4 	bl	8008c18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011470:	68f8      	ldr	r0, [r7, #12]
 8011472:	f7ff ffbd 	bl	80113f0 <ip_frag_free_pbuf_custom_ref>
}
 8011476:	bf00      	nop
 8011478:	3710      	adds	r7, #16
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}
 801147e:	bf00      	nop
 8011480:	08015108 	.word	0x08015108
 8011484:	080152cc 	.word	0x080152cc
 8011488:	08015150 	.word	0x08015150
 801148c:	080152d8 	.word	0x080152d8

08011490 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b094      	sub	sp, #80	@ 0x50
 8011494:	af02      	add	r7, sp, #8
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801149c:	2300      	movs	r3, #0
 801149e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80114a6:	3b14      	subs	r3, #20
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	da00      	bge.n	80114ae <ip4_frag+0x1e>
 80114ac:	3307      	adds	r3, #7
 80114ae:	10db      	asrs	r3, r3, #3
 80114b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80114b2:	2314      	movs	r3, #20
 80114b4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80114bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80114c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	f003 030f 	and.w	r3, r3, #15
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	2b14      	cmp	r3, #20
 80114d0:	d002      	beq.n	80114d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80114d2:	f06f 0305 	mvn.w	r3, #5
 80114d6:	e110      	b.n	80116fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	895b      	ldrh	r3, [r3, #10]
 80114dc:	2b13      	cmp	r3, #19
 80114de:	d809      	bhi.n	80114f4 <ip4_frag+0x64>
 80114e0:	4b88      	ldr	r3, [pc, #544]	@ (8011704 <ip4_frag+0x274>)
 80114e2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80114e6:	4988      	ldr	r1, [pc, #544]	@ (8011708 <ip4_frag+0x278>)
 80114e8:	4888      	ldr	r0, [pc, #544]	@ (801170c <ip4_frag+0x27c>)
 80114ea:	f000 faed 	bl	8011ac8 <iprintf>
 80114ee:	f06f 0305 	mvn.w	r3, #5
 80114f2:	e102      	b.n	80116fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80114f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114f6:	88db      	ldrh	r3, [r3, #6]
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f6 f84e 	bl	800759c <lwip_htons>
 8011500:	4603      	mov	r3, r0
 8011502:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011504:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801150a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801150e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011514:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	891b      	ldrh	r3, [r3, #8]
 801151a:	3b14      	subs	r3, #20
 801151c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011520:	e0e1      	b.n	80116e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011522:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011524:	00db      	lsls	r3, r3, #3
 8011526:	b29b      	uxth	r3, r3
 8011528:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801152c:	4293      	cmp	r3, r2
 801152e:	bf28      	it	cs
 8011530:	4613      	movcs	r3, r2
 8011532:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011534:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011538:	2114      	movs	r1, #20
 801153a:	200e      	movs	r0, #14
 801153c:	f7f7 f888 	bl	8008650 <pbuf_alloc>
 8011540:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	2b00      	cmp	r3, #0
 8011546:	f000 80d5 	beq.w	80116f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154c:	895b      	ldrh	r3, [r3, #10]
 801154e:	2b13      	cmp	r3, #19
 8011550:	d806      	bhi.n	8011560 <ip4_frag+0xd0>
 8011552:	4b6c      	ldr	r3, [pc, #432]	@ (8011704 <ip4_frag+0x274>)
 8011554:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011558:	496d      	ldr	r1, [pc, #436]	@ (8011710 <ip4_frag+0x280>)
 801155a:	486c      	ldr	r0, [pc, #432]	@ (801170c <ip4_frag+0x27c>)
 801155c:	f000 fab4 	bl	8011ac8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	2214      	movs	r2, #20
 8011566:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011568:	4618      	mov	r0, r3
 801156a:	f000 fc7a 	bl	8011e62 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801156e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011574:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011576:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801157a:	e064      	b.n	8011646 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	895a      	ldrh	r2, [r3, #10]
 8011580:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	895b      	ldrh	r3, [r3, #10]
 801158a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801158c:	429a      	cmp	r2, r3
 801158e:	d906      	bls.n	801159e <ip4_frag+0x10e>
 8011590:	4b5c      	ldr	r3, [pc, #368]	@ (8011704 <ip4_frag+0x274>)
 8011592:	f240 322d 	movw	r2, #813	@ 0x32d
 8011596:	495f      	ldr	r1, [pc, #380]	@ (8011714 <ip4_frag+0x284>)
 8011598:	485c      	ldr	r0, [pc, #368]	@ (801170c <ip4_frag+0x27c>)
 801159a:	f000 fa95 	bl	8011ac8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801159e:	8bfa      	ldrh	r2, [r7, #30]
 80115a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80115a4:	4293      	cmp	r3, r2
 80115a6:	bf28      	it	cs
 80115a8:	4613      	movcs	r3, r2
 80115aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80115ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d105      	bne.n	80115c2 <ip4_frag+0x132>
        poff = 0;
 80115b6:	2300      	movs	r3, #0
 80115b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	60fb      	str	r3, [r7, #12]
        continue;
 80115c0:	e041      	b.n	8011646 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80115c2:	f7ff ff0d 	bl	80113e0 <ip_frag_alloc_pbuf_custom_ref>
 80115c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80115c8:	69bb      	ldr	r3, [r7, #24]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d103      	bne.n	80115d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80115ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80115d0:	f7f7 fb22 	bl	8008c18 <pbuf_free>
        goto memerr;
 80115d4:	e08f      	b.n	80116f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80115d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80115dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80115de:	4413      	add	r3, r2
 80115e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80115e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80115e8:	9201      	str	r2, [sp, #4]
 80115ea:	9300      	str	r3, [sp, #0]
 80115ec:	4603      	mov	r3, r0
 80115ee:	2241      	movs	r2, #65	@ 0x41
 80115f0:	2000      	movs	r0, #0
 80115f2:	f7f7 f957 	bl	80088a4 <pbuf_alloced_custom>
 80115f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80115fe:	69b8      	ldr	r0, [r7, #24]
 8011600:	f7ff fef6 	bl	80113f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011604:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011606:	f7f7 fb07 	bl	8008c18 <pbuf_free>
        goto memerr;
 801160a:	e074      	b.n	80116f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7f7 fba3 	bl	8008d58 <pbuf_ref>
      pcr->original = p;
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	68fa      	ldr	r2, [r7, #12]
 8011616:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	4a3f      	ldr	r2, [pc, #252]	@ (8011718 <ip4_frag+0x288>)
 801161c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801161e:	6979      	ldr	r1, [r7, #20]
 8011620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011622:	f7f7 fbbb 	bl	8008d9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011626:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801162a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801162e:	1ad3      	subs	r3, r2, r3
 8011630:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011634:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011638:	2b00      	cmp	r3, #0
 801163a:	d004      	beq.n	8011646 <ip4_frag+0x1b6>
        poff = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011646:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801164a:	2b00      	cmp	r3, #0
 801164c:	d196      	bne.n	801157c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801164e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011650:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011654:	4413      	add	r3, r2
 8011656:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801165c:	f1a3 0213 	sub.w	r2, r3, #19
 8011660:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011664:	429a      	cmp	r2, r3
 8011666:	bfcc      	ite	gt
 8011668:	2301      	movgt	r3, #1
 801166a:	2300      	movle	r3, #0
 801166c:	b2db      	uxtb	r3, r3
 801166e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011670:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011678:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <ip4_frag+0x1f6>
 8011680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011682:	2b00      	cmp	r3, #0
 8011684:	d003      	beq.n	801168e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011686:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011688:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801168c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801168e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011690:	4618      	mov	r0, r3
 8011692:	f7f5 ff83 	bl	800759c <lwip_htons>
 8011696:	4603      	mov	r3, r0
 8011698:	461a      	mov	r2, r3
 801169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801169e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80116a0:	3314      	adds	r3, #20
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7f5 ff79 	bl	800759c <lwip_htons>
 80116aa:	4603      	mov	r3, r0
 80116ac:	461a      	mov	r2, r3
 80116ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80116b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b4:	2200      	movs	r2, #0
 80116b6:	729a      	strb	r2, [r3, #10]
 80116b8:	2200      	movs	r2, #0
 80116ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	695b      	ldr	r3, [r3, #20]
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80116c4:	68b8      	ldr	r0, [r7, #8]
 80116c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80116c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80116ca:	f7f7 faa5 	bl	8008c18 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80116ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80116d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80116da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80116de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80116e0:	4413      	add	r3, r2
 80116e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80116e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f47f af19 	bne.w	8011522 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80116f0:	2300      	movs	r3, #0
 80116f2:	e002      	b.n	80116fa <ip4_frag+0x26a>
      goto memerr;
 80116f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80116f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3748      	adds	r7, #72	@ 0x48
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	08015108 	.word	0x08015108
 8011708:	080152e4 	.word	0x080152e4
 801170c:	08015150 	.word	0x08015150
 8011710:	08015300 	.word	0x08015300
 8011714:	08015320 	.word	0x08015320
 8011718:	08011429 	.word	0x08011429

0801171c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
 8011724:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011726:	230e      	movs	r3, #14
 8011728:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	895b      	ldrh	r3, [r3, #10]
 801172e:	2b0e      	cmp	r3, #14
 8011730:	d96e      	bls.n	8011810 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	7bdb      	ldrb	r3, [r3, #15]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d106      	bne.n	8011748 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011740:	3301      	adds	r3, #1
 8011742:	b2da      	uxtb	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	7b1a      	ldrb	r2, [r3, #12]
 8011752:	7b5b      	ldrb	r3, [r3, #13]
 8011754:	021b      	lsls	r3, r3, #8
 8011756:	4313      	orrs	r3, r2
 8011758:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	f003 0301 	and.w	r3, r3, #1
 8011762:	2b00      	cmp	r3, #0
 8011764:	d023      	beq.n	80117ae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d10f      	bne.n	801178e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	785b      	ldrb	r3, [r3, #1]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d11b      	bne.n	80117ae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801177a:	2b5e      	cmp	r3, #94	@ 0x5e
 801177c:	d117      	bne.n	80117ae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7b5b      	ldrb	r3, [r3, #13]
 8011782:	f043 0310 	orr.w	r3, r3, #16
 8011786:	b2da      	uxtb	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	735a      	strb	r2, [r3, #13]
 801178c:	e00f      	b.n	80117ae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	2206      	movs	r2, #6
 8011792:	4928      	ldr	r1, [pc, #160]	@ (8011834 <ethernet_input+0x118>)
 8011794:	4618      	mov	r0, r3
 8011796:	f000 fadf 	bl	8011d58 <memcmp>
 801179a:	4603      	mov	r3, r0
 801179c:	2b00      	cmp	r3, #0
 801179e:	d106      	bne.n	80117ae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	7b5b      	ldrb	r3, [r3, #13]
 80117a4:	f043 0308 	orr.w	r3, r3, #8
 80117a8:	b2da      	uxtb	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80117ae:	89fb      	ldrh	r3, [r7, #14]
 80117b0:	2b08      	cmp	r3, #8
 80117b2:	d003      	beq.n	80117bc <ethernet_input+0xa0>
 80117b4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80117b8:	d014      	beq.n	80117e4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80117ba:	e032      	b.n	8011822 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80117c2:	f003 0308 	and.w	r3, r3, #8
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d024      	beq.n	8011814 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80117ca:	8afb      	ldrh	r3, [r7, #22]
 80117cc:	4619      	mov	r1, r3
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7f7 f99c 	bl	8008b0c <pbuf_remove_header>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d11e      	bne.n	8011818 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80117da:	6839      	ldr	r1, [r7, #0]
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f7fe ff21 	bl	8010624 <ip4_input>
      break;
 80117e2:	e013      	b.n	801180c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80117ea:	f003 0308 	and.w	r3, r3, #8
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d014      	beq.n	801181c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80117f2:	8afb      	ldrh	r3, [r7, #22]
 80117f4:	4619      	mov	r1, r3
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7f7 f988 	bl	8008b0c <pbuf_remove_header>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d10e      	bne.n	8011820 <ethernet_input+0x104>
        etharp_input(p, netif);
 8011802:	6839      	ldr	r1, [r7, #0]
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7fe f8c1 	bl	800f98c <etharp_input>
      break;
 801180a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801180c:	2300      	movs	r3, #0
 801180e:	e00c      	b.n	801182a <ethernet_input+0x10e>
    goto free_and_return;
 8011810:	bf00      	nop
 8011812:	e006      	b.n	8011822 <ethernet_input+0x106>
        goto free_and_return;
 8011814:	bf00      	nop
 8011816:	e004      	b.n	8011822 <ethernet_input+0x106>
        goto free_and_return;
 8011818:	bf00      	nop
 801181a:	e002      	b.n	8011822 <ethernet_input+0x106>
        goto free_and_return;
 801181c:	bf00      	nop
 801181e:	e000      	b.n	8011822 <ethernet_input+0x106>
        goto free_and_return;
 8011820:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7f7 f9f8 	bl	8008c18 <pbuf_free>
  return ERR_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3718      	adds	r7, #24
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	080154c4 	.word	0x080154c4

08011838 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	607a      	str	r2, [r7, #4]
 8011844:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011846:	8c3b      	ldrh	r3, [r7, #32]
 8011848:	4618      	mov	r0, r3
 801184a:	f7f5 fea7 	bl	800759c <lwip_htons>
 801184e:	4603      	mov	r3, r0
 8011850:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011852:	210e      	movs	r1, #14
 8011854:	68b8      	ldr	r0, [r7, #8]
 8011856:	f7f7 f949 	bl	8008aec <pbuf_add_header>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d125      	bne.n	80118ac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011866:	693b      	ldr	r3, [r7, #16]
 8011868:	8afa      	ldrh	r2, [r7, #22]
 801186a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	2206      	movs	r2, #6
 8011870:	6839      	ldr	r1, [r7, #0]
 8011872:	4618      	mov	r0, r3
 8011874:	f000 faf5 	bl	8011e62 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	3306      	adds	r3, #6
 801187c:	2206      	movs	r2, #6
 801187e:	6879      	ldr	r1, [r7, #4]
 8011880:	4618      	mov	r0, r3
 8011882:	f000 faee 	bl	8011e62 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801188c:	2b06      	cmp	r3, #6
 801188e:	d006      	beq.n	801189e <ethernet_output+0x66>
 8011890:	4b0a      	ldr	r3, [pc, #40]	@ (80118bc <ethernet_output+0x84>)
 8011892:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8011896:	490a      	ldr	r1, [pc, #40]	@ (80118c0 <ethernet_output+0x88>)
 8011898:	480a      	ldr	r0, [pc, #40]	@ (80118c4 <ethernet_output+0x8c>)
 801189a:	f000 f915 	bl	8011ac8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	699b      	ldr	r3, [r3, #24]
 80118a2:	68b9      	ldr	r1, [r7, #8]
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	4798      	blx	r3
 80118a8:	4603      	mov	r3, r0
 80118aa:	e002      	b.n	80118b2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80118ac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80118ae:	f06f 0301 	mvn.w	r3, #1
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3718      	adds	r7, #24
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	08015330 	.word	0x08015330
 80118c0:	08015368 	.word	0x08015368
 80118c4:	0801539c 	.word	0x0801539c

080118c8 <rand>:
 80118c8:	4b16      	ldr	r3, [pc, #88]	@ (8011924 <rand+0x5c>)
 80118ca:	b510      	push	{r4, lr}
 80118cc:	681c      	ldr	r4, [r3, #0]
 80118ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80118d0:	b9b3      	cbnz	r3, 8011900 <rand+0x38>
 80118d2:	2018      	movs	r0, #24
 80118d4:	f000 fb3c 	bl	8011f50 <malloc>
 80118d8:	4602      	mov	r2, r0
 80118da:	6320      	str	r0, [r4, #48]	@ 0x30
 80118dc:	b920      	cbnz	r0, 80118e8 <rand+0x20>
 80118de:	4b12      	ldr	r3, [pc, #72]	@ (8011928 <rand+0x60>)
 80118e0:	4812      	ldr	r0, [pc, #72]	@ (801192c <rand+0x64>)
 80118e2:	2152      	movs	r1, #82	@ 0x52
 80118e4:	f000 facc 	bl	8011e80 <__assert_func>
 80118e8:	4911      	ldr	r1, [pc, #68]	@ (8011930 <rand+0x68>)
 80118ea:	4b12      	ldr	r3, [pc, #72]	@ (8011934 <rand+0x6c>)
 80118ec:	e9c0 1300 	strd	r1, r3, [r0]
 80118f0:	4b11      	ldr	r3, [pc, #68]	@ (8011938 <rand+0x70>)
 80118f2:	6083      	str	r3, [r0, #8]
 80118f4:	230b      	movs	r3, #11
 80118f6:	8183      	strh	r3, [r0, #12]
 80118f8:	2100      	movs	r1, #0
 80118fa:	2001      	movs	r0, #1
 80118fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011900:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011902:	480e      	ldr	r0, [pc, #56]	@ (801193c <rand+0x74>)
 8011904:	690b      	ldr	r3, [r1, #16]
 8011906:	694c      	ldr	r4, [r1, #20]
 8011908:	4a0d      	ldr	r2, [pc, #52]	@ (8011940 <rand+0x78>)
 801190a:	4358      	muls	r0, r3
 801190c:	fb02 0004 	mla	r0, r2, r4, r0
 8011910:	fba3 3202 	umull	r3, r2, r3, r2
 8011914:	3301      	adds	r3, #1
 8011916:	eb40 0002 	adc.w	r0, r0, r2
 801191a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801191e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8011922:	bd10      	pop	{r4, pc}
 8011924:	20000038 	.word	0x20000038
 8011928:	080154d2 	.word	0x080154d2
 801192c:	080154e9 	.word	0x080154e9
 8011930:	abcd330e 	.word	0xabcd330e
 8011934:	e66d1234 	.word	0xe66d1234
 8011938:	0005deec 	.word	0x0005deec
 801193c:	5851f42d 	.word	0x5851f42d
 8011940:	4c957f2d 	.word	0x4c957f2d

08011944 <std>:
 8011944:	2300      	movs	r3, #0
 8011946:	b510      	push	{r4, lr}
 8011948:	4604      	mov	r4, r0
 801194a:	e9c0 3300 	strd	r3, r3, [r0]
 801194e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011952:	6083      	str	r3, [r0, #8]
 8011954:	8181      	strh	r1, [r0, #12]
 8011956:	6643      	str	r3, [r0, #100]	@ 0x64
 8011958:	81c2      	strh	r2, [r0, #14]
 801195a:	6183      	str	r3, [r0, #24]
 801195c:	4619      	mov	r1, r3
 801195e:	2208      	movs	r2, #8
 8011960:	305c      	adds	r0, #92	@ 0x5c
 8011962:	f000 fa09 	bl	8011d78 <memset>
 8011966:	4b0d      	ldr	r3, [pc, #52]	@ (801199c <std+0x58>)
 8011968:	6263      	str	r3, [r4, #36]	@ 0x24
 801196a:	4b0d      	ldr	r3, [pc, #52]	@ (80119a0 <std+0x5c>)
 801196c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801196e:	4b0d      	ldr	r3, [pc, #52]	@ (80119a4 <std+0x60>)
 8011970:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011972:	4b0d      	ldr	r3, [pc, #52]	@ (80119a8 <std+0x64>)
 8011974:	6323      	str	r3, [r4, #48]	@ 0x30
 8011976:	4b0d      	ldr	r3, [pc, #52]	@ (80119ac <std+0x68>)
 8011978:	6224      	str	r4, [r4, #32]
 801197a:	429c      	cmp	r4, r3
 801197c:	d006      	beq.n	801198c <std+0x48>
 801197e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011982:	4294      	cmp	r4, r2
 8011984:	d002      	beq.n	801198c <std+0x48>
 8011986:	33d0      	adds	r3, #208	@ 0xd0
 8011988:	429c      	cmp	r4, r3
 801198a:	d105      	bne.n	8011998 <std+0x54>
 801198c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011994:	f000 ba62 	b.w	8011e5c <__retarget_lock_init_recursive>
 8011998:	bd10      	pop	{r4, pc}
 801199a:	bf00      	nop
 801199c:	08011ba9 	.word	0x08011ba9
 80119a0:	08011bcb 	.word	0x08011bcb
 80119a4:	08011c03 	.word	0x08011c03
 80119a8:	08011c27 	.word	0x08011c27
 80119ac:	20008a3c 	.word	0x20008a3c

080119b0 <stdio_exit_handler>:
 80119b0:	4a02      	ldr	r2, [pc, #8]	@ (80119bc <stdio_exit_handler+0xc>)
 80119b2:	4903      	ldr	r1, [pc, #12]	@ (80119c0 <stdio_exit_handler+0x10>)
 80119b4:	4803      	ldr	r0, [pc, #12]	@ (80119c4 <stdio_exit_handler+0x14>)
 80119b6:	f000 b869 	b.w	8011a8c <_fwalk_sglue>
 80119ba:	bf00      	nop
 80119bc:	2000002c 	.word	0x2000002c
 80119c0:	08012765 	.word	0x08012765
 80119c4:	2000003c 	.word	0x2000003c

080119c8 <cleanup_stdio>:
 80119c8:	6841      	ldr	r1, [r0, #4]
 80119ca:	4b0c      	ldr	r3, [pc, #48]	@ (80119fc <cleanup_stdio+0x34>)
 80119cc:	4299      	cmp	r1, r3
 80119ce:	b510      	push	{r4, lr}
 80119d0:	4604      	mov	r4, r0
 80119d2:	d001      	beq.n	80119d8 <cleanup_stdio+0x10>
 80119d4:	f000 fec6 	bl	8012764 <_fflush_r>
 80119d8:	68a1      	ldr	r1, [r4, #8]
 80119da:	4b09      	ldr	r3, [pc, #36]	@ (8011a00 <cleanup_stdio+0x38>)
 80119dc:	4299      	cmp	r1, r3
 80119de:	d002      	beq.n	80119e6 <cleanup_stdio+0x1e>
 80119e0:	4620      	mov	r0, r4
 80119e2:	f000 febf 	bl	8012764 <_fflush_r>
 80119e6:	68e1      	ldr	r1, [r4, #12]
 80119e8:	4b06      	ldr	r3, [pc, #24]	@ (8011a04 <cleanup_stdio+0x3c>)
 80119ea:	4299      	cmp	r1, r3
 80119ec:	d004      	beq.n	80119f8 <cleanup_stdio+0x30>
 80119ee:	4620      	mov	r0, r4
 80119f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119f4:	f000 beb6 	b.w	8012764 <_fflush_r>
 80119f8:	bd10      	pop	{r4, pc}
 80119fa:	bf00      	nop
 80119fc:	20008a3c 	.word	0x20008a3c
 8011a00:	20008aa4 	.word	0x20008aa4
 8011a04:	20008b0c 	.word	0x20008b0c

08011a08 <global_stdio_init.part.0>:
 8011a08:	b510      	push	{r4, lr}
 8011a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8011a38 <global_stdio_init.part.0+0x30>)
 8011a0c:	4c0b      	ldr	r4, [pc, #44]	@ (8011a3c <global_stdio_init.part.0+0x34>)
 8011a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8011a40 <global_stdio_init.part.0+0x38>)
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	4620      	mov	r0, r4
 8011a14:	2200      	movs	r2, #0
 8011a16:	2104      	movs	r1, #4
 8011a18:	f7ff ff94 	bl	8011944 <std>
 8011a1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a20:	2201      	movs	r2, #1
 8011a22:	2109      	movs	r1, #9
 8011a24:	f7ff ff8e 	bl	8011944 <std>
 8011a28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a2c:	2202      	movs	r2, #2
 8011a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a32:	2112      	movs	r1, #18
 8011a34:	f7ff bf86 	b.w	8011944 <std>
 8011a38:	20008b74 	.word	0x20008b74
 8011a3c:	20008a3c 	.word	0x20008a3c
 8011a40:	080119b1 	.word	0x080119b1

08011a44 <__sfp_lock_acquire>:
 8011a44:	4801      	ldr	r0, [pc, #4]	@ (8011a4c <__sfp_lock_acquire+0x8>)
 8011a46:	f000 ba0a 	b.w	8011e5e <__retarget_lock_acquire_recursive>
 8011a4a:	bf00      	nop
 8011a4c:	20008b7d 	.word	0x20008b7d

08011a50 <__sfp_lock_release>:
 8011a50:	4801      	ldr	r0, [pc, #4]	@ (8011a58 <__sfp_lock_release+0x8>)
 8011a52:	f000 ba05 	b.w	8011e60 <__retarget_lock_release_recursive>
 8011a56:	bf00      	nop
 8011a58:	20008b7d 	.word	0x20008b7d

08011a5c <__sinit>:
 8011a5c:	b510      	push	{r4, lr}
 8011a5e:	4604      	mov	r4, r0
 8011a60:	f7ff fff0 	bl	8011a44 <__sfp_lock_acquire>
 8011a64:	6a23      	ldr	r3, [r4, #32]
 8011a66:	b11b      	cbz	r3, 8011a70 <__sinit+0x14>
 8011a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a6c:	f7ff bff0 	b.w	8011a50 <__sfp_lock_release>
 8011a70:	4b04      	ldr	r3, [pc, #16]	@ (8011a84 <__sinit+0x28>)
 8011a72:	6223      	str	r3, [r4, #32]
 8011a74:	4b04      	ldr	r3, [pc, #16]	@ (8011a88 <__sinit+0x2c>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1f5      	bne.n	8011a68 <__sinit+0xc>
 8011a7c:	f7ff ffc4 	bl	8011a08 <global_stdio_init.part.0>
 8011a80:	e7f2      	b.n	8011a68 <__sinit+0xc>
 8011a82:	bf00      	nop
 8011a84:	080119c9 	.word	0x080119c9
 8011a88:	20008b74 	.word	0x20008b74

08011a8c <_fwalk_sglue>:
 8011a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a90:	4607      	mov	r7, r0
 8011a92:	4688      	mov	r8, r1
 8011a94:	4614      	mov	r4, r2
 8011a96:	2600      	movs	r6, #0
 8011a98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a9c:	f1b9 0901 	subs.w	r9, r9, #1
 8011aa0:	d505      	bpl.n	8011aae <_fwalk_sglue+0x22>
 8011aa2:	6824      	ldr	r4, [r4, #0]
 8011aa4:	2c00      	cmp	r4, #0
 8011aa6:	d1f7      	bne.n	8011a98 <_fwalk_sglue+0xc>
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aae:	89ab      	ldrh	r3, [r5, #12]
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d907      	bls.n	8011ac4 <_fwalk_sglue+0x38>
 8011ab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ab8:	3301      	adds	r3, #1
 8011aba:	d003      	beq.n	8011ac4 <_fwalk_sglue+0x38>
 8011abc:	4629      	mov	r1, r5
 8011abe:	4638      	mov	r0, r7
 8011ac0:	47c0      	blx	r8
 8011ac2:	4306      	orrs	r6, r0
 8011ac4:	3568      	adds	r5, #104	@ 0x68
 8011ac6:	e7e9      	b.n	8011a9c <_fwalk_sglue+0x10>

08011ac8 <iprintf>:
 8011ac8:	b40f      	push	{r0, r1, r2, r3}
 8011aca:	b507      	push	{r0, r1, r2, lr}
 8011acc:	4906      	ldr	r1, [pc, #24]	@ (8011ae8 <iprintf+0x20>)
 8011ace:	ab04      	add	r3, sp, #16
 8011ad0:	6808      	ldr	r0, [r1, #0]
 8011ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ad6:	6881      	ldr	r1, [r0, #8]
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	f000 fb19 	bl	8012110 <_vfiprintf_r>
 8011ade:	b003      	add	sp, #12
 8011ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ae4:	b004      	add	sp, #16
 8011ae6:	4770      	bx	lr
 8011ae8:	20000038 	.word	0x20000038

08011aec <_puts_r>:
 8011aec:	6a03      	ldr	r3, [r0, #32]
 8011aee:	b570      	push	{r4, r5, r6, lr}
 8011af0:	6884      	ldr	r4, [r0, #8]
 8011af2:	4605      	mov	r5, r0
 8011af4:	460e      	mov	r6, r1
 8011af6:	b90b      	cbnz	r3, 8011afc <_puts_r+0x10>
 8011af8:	f7ff ffb0 	bl	8011a5c <__sinit>
 8011afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011afe:	07db      	lsls	r3, r3, #31
 8011b00:	d405      	bmi.n	8011b0e <_puts_r+0x22>
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	0598      	lsls	r0, r3, #22
 8011b06:	d402      	bmi.n	8011b0e <_puts_r+0x22>
 8011b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b0a:	f000 f9a8 	bl	8011e5e <__retarget_lock_acquire_recursive>
 8011b0e:	89a3      	ldrh	r3, [r4, #12]
 8011b10:	0719      	lsls	r1, r3, #28
 8011b12:	d502      	bpl.n	8011b1a <_puts_r+0x2e>
 8011b14:	6923      	ldr	r3, [r4, #16]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d135      	bne.n	8011b86 <_puts_r+0x9a>
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	f000 f8c5 	bl	8011cac <__swsetup_r>
 8011b22:	b380      	cbz	r0, 8011b86 <_puts_r+0x9a>
 8011b24:	f04f 35ff 	mov.w	r5, #4294967295
 8011b28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b2a:	07da      	lsls	r2, r3, #31
 8011b2c:	d405      	bmi.n	8011b3a <_puts_r+0x4e>
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	059b      	lsls	r3, r3, #22
 8011b32:	d402      	bmi.n	8011b3a <_puts_r+0x4e>
 8011b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b36:	f000 f993 	bl	8011e60 <__retarget_lock_release_recursive>
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	bd70      	pop	{r4, r5, r6, pc}
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	da04      	bge.n	8011b4c <_puts_r+0x60>
 8011b42:	69a2      	ldr	r2, [r4, #24]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	dc17      	bgt.n	8011b78 <_puts_r+0x8c>
 8011b48:	290a      	cmp	r1, #10
 8011b4a:	d015      	beq.n	8011b78 <_puts_r+0x8c>
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	1c5a      	adds	r2, r3, #1
 8011b50:	6022      	str	r2, [r4, #0]
 8011b52:	7019      	strb	r1, [r3, #0]
 8011b54:	68a3      	ldr	r3, [r4, #8]
 8011b56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b5a:	3b01      	subs	r3, #1
 8011b5c:	60a3      	str	r3, [r4, #8]
 8011b5e:	2900      	cmp	r1, #0
 8011b60:	d1ed      	bne.n	8011b3e <_puts_r+0x52>
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	da11      	bge.n	8011b8a <_puts_r+0x9e>
 8011b66:	4622      	mov	r2, r4
 8011b68:	210a      	movs	r1, #10
 8011b6a:	4628      	mov	r0, r5
 8011b6c:	f000 f85f 	bl	8011c2e <__swbuf_r>
 8011b70:	3001      	adds	r0, #1
 8011b72:	d0d7      	beq.n	8011b24 <_puts_r+0x38>
 8011b74:	250a      	movs	r5, #10
 8011b76:	e7d7      	b.n	8011b28 <_puts_r+0x3c>
 8011b78:	4622      	mov	r2, r4
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f000 f857 	bl	8011c2e <__swbuf_r>
 8011b80:	3001      	adds	r0, #1
 8011b82:	d1e7      	bne.n	8011b54 <_puts_r+0x68>
 8011b84:	e7ce      	b.n	8011b24 <_puts_r+0x38>
 8011b86:	3e01      	subs	r6, #1
 8011b88:	e7e4      	b.n	8011b54 <_puts_r+0x68>
 8011b8a:	6823      	ldr	r3, [r4, #0]
 8011b8c:	1c5a      	adds	r2, r3, #1
 8011b8e:	6022      	str	r2, [r4, #0]
 8011b90:	220a      	movs	r2, #10
 8011b92:	701a      	strb	r2, [r3, #0]
 8011b94:	e7ee      	b.n	8011b74 <_puts_r+0x88>
	...

08011b98 <puts>:
 8011b98:	4b02      	ldr	r3, [pc, #8]	@ (8011ba4 <puts+0xc>)
 8011b9a:	4601      	mov	r1, r0
 8011b9c:	6818      	ldr	r0, [r3, #0]
 8011b9e:	f7ff bfa5 	b.w	8011aec <_puts_r>
 8011ba2:	bf00      	nop
 8011ba4:	20000038 	.word	0x20000038

08011ba8 <__sread>:
 8011ba8:	b510      	push	{r4, lr}
 8011baa:	460c      	mov	r4, r1
 8011bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb0:	f000 f90c 	bl	8011dcc <_read_r>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	bfab      	itete	ge
 8011bb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011bba:	89a3      	ldrhlt	r3, [r4, #12]
 8011bbc:	181b      	addge	r3, r3, r0
 8011bbe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011bc2:	bfac      	ite	ge
 8011bc4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011bc6:	81a3      	strhlt	r3, [r4, #12]
 8011bc8:	bd10      	pop	{r4, pc}

08011bca <__swrite>:
 8011bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bce:	461f      	mov	r7, r3
 8011bd0:	898b      	ldrh	r3, [r1, #12]
 8011bd2:	05db      	lsls	r3, r3, #23
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	460c      	mov	r4, r1
 8011bd8:	4616      	mov	r6, r2
 8011bda:	d505      	bpl.n	8011be8 <__swrite+0x1e>
 8011bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be0:	2302      	movs	r3, #2
 8011be2:	2200      	movs	r2, #0
 8011be4:	f000 f8e0 	bl	8011da8 <_lseek_r>
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011bf2:	81a3      	strh	r3, [r4, #12]
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	463b      	mov	r3, r7
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfe:	f000 b8f7 	b.w	8011df0 <_write_r>

08011c02 <__sseek>:
 8011c02:	b510      	push	{r4, lr}
 8011c04:	460c      	mov	r4, r1
 8011c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c0a:	f000 f8cd 	bl	8011da8 <_lseek_r>
 8011c0e:	1c43      	adds	r3, r0, #1
 8011c10:	89a3      	ldrh	r3, [r4, #12]
 8011c12:	bf15      	itete	ne
 8011c14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011c16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011c1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011c1e:	81a3      	strheq	r3, [r4, #12]
 8011c20:	bf18      	it	ne
 8011c22:	81a3      	strhne	r3, [r4, #12]
 8011c24:	bd10      	pop	{r4, pc}

08011c26 <__sclose>:
 8011c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c2a:	f000 b8ad 	b.w	8011d88 <_close_r>

08011c2e <__swbuf_r>:
 8011c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c30:	460e      	mov	r6, r1
 8011c32:	4614      	mov	r4, r2
 8011c34:	4605      	mov	r5, r0
 8011c36:	b118      	cbz	r0, 8011c40 <__swbuf_r+0x12>
 8011c38:	6a03      	ldr	r3, [r0, #32]
 8011c3a:	b90b      	cbnz	r3, 8011c40 <__swbuf_r+0x12>
 8011c3c:	f7ff ff0e 	bl	8011a5c <__sinit>
 8011c40:	69a3      	ldr	r3, [r4, #24]
 8011c42:	60a3      	str	r3, [r4, #8]
 8011c44:	89a3      	ldrh	r3, [r4, #12]
 8011c46:	071a      	lsls	r2, r3, #28
 8011c48:	d501      	bpl.n	8011c4e <__swbuf_r+0x20>
 8011c4a:	6923      	ldr	r3, [r4, #16]
 8011c4c:	b943      	cbnz	r3, 8011c60 <__swbuf_r+0x32>
 8011c4e:	4621      	mov	r1, r4
 8011c50:	4628      	mov	r0, r5
 8011c52:	f000 f82b 	bl	8011cac <__swsetup_r>
 8011c56:	b118      	cbz	r0, 8011c60 <__swbuf_r+0x32>
 8011c58:	f04f 37ff 	mov.w	r7, #4294967295
 8011c5c:	4638      	mov	r0, r7
 8011c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	6922      	ldr	r2, [r4, #16]
 8011c64:	1a98      	subs	r0, r3, r2
 8011c66:	6963      	ldr	r3, [r4, #20]
 8011c68:	b2f6      	uxtb	r6, r6
 8011c6a:	4283      	cmp	r3, r0
 8011c6c:	4637      	mov	r7, r6
 8011c6e:	dc05      	bgt.n	8011c7c <__swbuf_r+0x4e>
 8011c70:	4621      	mov	r1, r4
 8011c72:	4628      	mov	r0, r5
 8011c74:	f000 fd76 	bl	8012764 <_fflush_r>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	d1ed      	bne.n	8011c58 <__swbuf_r+0x2a>
 8011c7c:	68a3      	ldr	r3, [r4, #8]
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	60a3      	str	r3, [r4, #8]
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	1c5a      	adds	r2, r3, #1
 8011c86:	6022      	str	r2, [r4, #0]
 8011c88:	701e      	strb	r6, [r3, #0]
 8011c8a:	6962      	ldr	r2, [r4, #20]
 8011c8c:	1c43      	adds	r3, r0, #1
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d004      	beq.n	8011c9c <__swbuf_r+0x6e>
 8011c92:	89a3      	ldrh	r3, [r4, #12]
 8011c94:	07db      	lsls	r3, r3, #31
 8011c96:	d5e1      	bpl.n	8011c5c <__swbuf_r+0x2e>
 8011c98:	2e0a      	cmp	r6, #10
 8011c9a:	d1df      	bne.n	8011c5c <__swbuf_r+0x2e>
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f000 fd60 	bl	8012764 <_fflush_r>
 8011ca4:	2800      	cmp	r0, #0
 8011ca6:	d0d9      	beq.n	8011c5c <__swbuf_r+0x2e>
 8011ca8:	e7d6      	b.n	8011c58 <__swbuf_r+0x2a>
	...

08011cac <__swsetup_r>:
 8011cac:	b538      	push	{r3, r4, r5, lr}
 8011cae:	4b29      	ldr	r3, [pc, #164]	@ (8011d54 <__swsetup_r+0xa8>)
 8011cb0:	4605      	mov	r5, r0
 8011cb2:	6818      	ldr	r0, [r3, #0]
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	b118      	cbz	r0, 8011cc0 <__swsetup_r+0x14>
 8011cb8:	6a03      	ldr	r3, [r0, #32]
 8011cba:	b90b      	cbnz	r3, 8011cc0 <__swsetup_r+0x14>
 8011cbc:	f7ff fece 	bl	8011a5c <__sinit>
 8011cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cc4:	0719      	lsls	r1, r3, #28
 8011cc6:	d422      	bmi.n	8011d0e <__swsetup_r+0x62>
 8011cc8:	06da      	lsls	r2, r3, #27
 8011cca:	d407      	bmi.n	8011cdc <__swsetup_r+0x30>
 8011ccc:	2209      	movs	r2, #9
 8011cce:	602a      	str	r2, [r5, #0]
 8011cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cd4:	81a3      	strh	r3, [r4, #12]
 8011cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8011cda:	e033      	b.n	8011d44 <__swsetup_r+0x98>
 8011cdc:	0758      	lsls	r0, r3, #29
 8011cde:	d512      	bpl.n	8011d06 <__swsetup_r+0x5a>
 8011ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ce2:	b141      	cbz	r1, 8011cf6 <__swsetup_r+0x4a>
 8011ce4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ce8:	4299      	cmp	r1, r3
 8011cea:	d002      	beq.n	8011cf2 <__swsetup_r+0x46>
 8011cec:	4628      	mov	r0, r5
 8011cee:	f000 f8e5 	bl	8011ebc <_free_r>
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cf6:	89a3      	ldrh	r3, [r4, #12]
 8011cf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011cfc:	81a3      	strh	r3, [r4, #12]
 8011cfe:	2300      	movs	r3, #0
 8011d00:	6063      	str	r3, [r4, #4]
 8011d02:	6923      	ldr	r3, [r4, #16]
 8011d04:	6023      	str	r3, [r4, #0]
 8011d06:	89a3      	ldrh	r3, [r4, #12]
 8011d08:	f043 0308 	orr.w	r3, r3, #8
 8011d0c:	81a3      	strh	r3, [r4, #12]
 8011d0e:	6923      	ldr	r3, [r4, #16]
 8011d10:	b94b      	cbnz	r3, 8011d26 <__swsetup_r+0x7a>
 8011d12:	89a3      	ldrh	r3, [r4, #12]
 8011d14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d1c:	d003      	beq.n	8011d26 <__swsetup_r+0x7a>
 8011d1e:	4621      	mov	r1, r4
 8011d20:	4628      	mov	r0, r5
 8011d22:	f000 fd7f 	bl	8012824 <__smakebuf_r>
 8011d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d2a:	f013 0201 	ands.w	r2, r3, #1
 8011d2e:	d00a      	beq.n	8011d46 <__swsetup_r+0x9a>
 8011d30:	2200      	movs	r2, #0
 8011d32:	60a2      	str	r2, [r4, #8]
 8011d34:	6962      	ldr	r2, [r4, #20]
 8011d36:	4252      	negs	r2, r2
 8011d38:	61a2      	str	r2, [r4, #24]
 8011d3a:	6922      	ldr	r2, [r4, #16]
 8011d3c:	b942      	cbnz	r2, 8011d50 <__swsetup_r+0xa4>
 8011d3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d42:	d1c5      	bne.n	8011cd0 <__swsetup_r+0x24>
 8011d44:	bd38      	pop	{r3, r4, r5, pc}
 8011d46:	0799      	lsls	r1, r3, #30
 8011d48:	bf58      	it	pl
 8011d4a:	6962      	ldrpl	r2, [r4, #20]
 8011d4c:	60a2      	str	r2, [r4, #8]
 8011d4e:	e7f4      	b.n	8011d3a <__swsetup_r+0x8e>
 8011d50:	2000      	movs	r0, #0
 8011d52:	e7f7      	b.n	8011d44 <__swsetup_r+0x98>
 8011d54:	20000038 	.word	0x20000038

08011d58 <memcmp>:
 8011d58:	b510      	push	{r4, lr}
 8011d5a:	3901      	subs	r1, #1
 8011d5c:	4402      	add	r2, r0
 8011d5e:	4290      	cmp	r0, r2
 8011d60:	d101      	bne.n	8011d66 <memcmp+0xe>
 8011d62:	2000      	movs	r0, #0
 8011d64:	e005      	b.n	8011d72 <memcmp+0x1a>
 8011d66:	7803      	ldrb	r3, [r0, #0]
 8011d68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011d6c:	42a3      	cmp	r3, r4
 8011d6e:	d001      	beq.n	8011d74 <memcmp+0x1c>
 8011d70:	1b18      	subs	r0, r3, r4
 8011d72:	bd10      	pop	{r4, pc}
 8011d74:	3001      	adds	r0, #1
 8011d76:	e7f2      	b.n	8011d5e <memcmp+0x6>

08011d78 <memset>:
 8011d78:	4402      	add	r2, r0
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	d100      	bne.n	8011d82 <memset+0xa>
 8011d80:	4770      	bx	lr
 8011d82:	f803 1b01 	strb.w	r1, [r3], #1
 8011d86:	e7f9      	b.n	8011d7c <memset+0x4>

08011d88 <_close_r>:
 8011d88:	b538      	push	{r3, r4, r5, lr}
 8011d8a:	4d06      	ldr	r5, [pc, #24]	@ (8011da4 <_close_r+0x1c>)
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	4604      	mov	r4, r0
 8011d90:	4608      	mov	r0, r1
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	f7ef fd78 	bl	8001888 <_close>
 8011d98:	1c43      	adds	r3, r0, #1
 8011d9a:	d102      	bne.n	8011da2 <_close_r+0x1a>
 8011d9c:	682b      	ldr	r3, [r5, #0]
 8011d9e:	b103      	cbz	r3, 8011da2 <_close_r+0x1a>
 8011da0:	6023      	str	r3, [r4, #0]
 8011da2:	bd38      	pop	{r3, r4, r5, pc}
 8011da4:	20008b78 	.word	0x20008b78

08011da8 <_lseek_r>:
 8011da8:	b538      	push	{r3, r4, r5, lr}
 8011daa:	4d07      	ldr	r5, [pc, #28]	@ (8011dc8 <_lseek_r+0x20>)
 8011dac:	4604      	mov	r4, r0
 8011dae:	4608      	mov	r0, r1
 8011db0:	4611      	mov	r1, r2
 8011db2:	2200      	movs	r2, #0
 8011db4:	602a      	str	r2, [r5, #0]
 8011db6:	461a      	mov	r2, r3
 8011db8:	f7ef fd8d 	bl	80018d6 <_lseek>
 8011dbc:	1c43      	adds	r3, r0, #1
 8011dbe:	d102      	bne.n	8011dc6 <_lseek_r+0x1e>
 8011dc0:	682b      	ldr	r3, [r5, #0]
 8011dc2:	b103      	cbz	r3, 8011dc6 <_lseek_r+0x1e>
 8011dc4:	6023      	str	r3, [r4, #0]
 8011dc6:	bd38      	pop	{r3, r4, r5, pc}
 8011dc8:	20008b78 	.word	0x20008b78

08011dcc <_read_r>:
 8011dcc:	b538      	push	{r3, r4, r5, lr}
 8011dce:	4d07      	ldr	r5, [pc, #28]	@ (8011dec <_read_r+0x20>)
 8011dd0:	4604      	mov	r4, r0
 8011dd2:	4608      	mov	r0, r1
 8011dd4:	4611      	mov	r1, r2
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	602a      	str	r2, [r5, #0]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f7ef fd1b 	bl	8001816 <_read>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	d102      	bne.n	8011dea <_read_r+0x1e>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	b103      	cbz	r3, 8011dea <_read_r+0x1e>
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	bd38      	pop	{r3, r4, r5, pc}
 8011dec:	20008b78 	.word	0x20008b78

08011df0 <_write_r>:
 8011df0:	b538      	push	{r3, r4, r5, lr}
 8011df2:	4d07      	ldr	r5, [pc, #28]	@ (8011e10 <_write_r+0x20>)
 8011df4:	4604      	mov	r4, r0
 8011df6:	4608      	mov	r0, r1
 8011df8:	4611      	mov	r1, r2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	602a      	str	r2, [r5, #0]
 8011dfe:	461a      	mov	r2, r3
 8011e00:	f7ef fd26 	bl	8001850 <_write>
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	d102      	bne.n	8011e0e <_write_r+0x1e>
 8011e08:	682b      	ldr	r3, [r5, #0]
 8011e0a:	b103      	cbz	r3, 8011e0e <_write_r+0x1e>
 8011e0c:	6023      	str	r3, [r4, #0]
 8011e0e:	bd38      	pop	{r3, r4, r5, pc}
 8011e10:	20008b78 	.word	0x20008b78

08011e14 <__libc_init_array>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	4d0d      	ldr	r5, [pc, #52]	@ (8011e4c <__libc_init_array+0x38>)
 8011e18:	4c0d      	ldr	r4, [pc, #52]	@ (8011e50 <__libc_init_array+0x3c>)
 8011e1a:	1b64      	subs	r4, r4, r5
 8011e1c:	10a4      	asrs	r4, r4, #2
 8011e1e:	2600      	movs	r6, #0
 8011e20:	42a6      	cmp	r6, r4
 8011e22:	d109      	bne.n	8011e38 <__libc_init_array+0x24>
 8011e24:	4d0b      	ldr	r5, [pc, #44]	@ (8011e54 <__libc_init_array+0x40>)
 8011e26:	4c0c      	ldr	r4, [pc, #48]	@ (8011e58 <__libc_init_array+0x44>)
 8011e28:	f000 fdb6 	bl	8012998 <_init>
 8011e2c:	1b64      	subs	r4, r4, r5
 8011e2e:	10a4      	asrs	r4, r4, #2
 8011e30:	2600      	movs	r6, #0
 8011e32:	42a6      	cmp	r6, r4
 8011e34:	d105      	bne.n	8011e42 <__libc_init_array+0x2e>
 8011e36:	bd70      	pop	{r4, r5, r6, pc}
 8011e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e3c:	4798      	blx	r3
 8011e3e:	3601      	adds	r6, #1
 8011e40:	e7ee      	b.n	8011e20 <__libc_init_array+0xc>
 8011e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e46:	4798      	blx	r3
 8011e48:	3601      	adds	r6, #1
 8011e4a:	e7f2      	b.n	8011e32 <__libc_init_array+0x1e>
 8011e4c:	080155b8 	.word	0x080155b8
 8011e50:	080155b8 	.word	0x080155b8
 8011e54:	080155b8 	.word	0x080155b8
 8011e58:	080155bc 	.word	0x080155bc

08011e5c <__retarget_lock_init_recursive>:
 8011e5c:	4770      	bx	lr

08011e5e <__retarget_lock_acquire_recursive>:
 8011e5e:	4770      	bx	lr

08011e60 <__retarget_lock_release_recursive>:
 8011e60:	4770      	bx	lr

08011e62 <memcpy>:
 8011e62:	440a      	add	r2, r1
 8011e64:	4291      	cmp	r1, r2
 8011e66:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e6a:	d100      	bne.n	8011e6e <memcpy+0xc>
 8011e6c:	4770      	bx	lr
 8011e6e:	b510      	push	{r4, lr}
 8011e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e78:	4291      	cmp	r1, r2
 8011e7a:	d1f9      	bne.n	8011e70 <memcpy+0xe>
 8011e7c:	bd10      	pop	{r4, pc}
	...

08011e80 <__assert_func>:
 8011e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e82:	4614      	mov	r4, r2
 8011e84:	461a      	mov	r2, r3
 8011e86:	4b09      	ldr	r3, [pc, #36]	@ (8011eac <__assert_func+0x2c>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	4605      	mov	r5, r0
 8011e8c:	68d8      	ldr	r0, [r3, #12]
 8011e8e:	b954      	cbnz	r4, 8011ea6 <__assert_func+0x26>
 8011e90:	4b07      	ldr	r3, [pc, #28]	@ (8011eb0 <__assert_func+0x30>)
 8011e92:	461c      	mov	r4, r3
 8011e94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e98:	9100      	str	r1, [sp, #0]
 8011e9a:	462b      	mov	r3, r5
 8011e9c:	4905      	ldr	r1, [pc, #20]	@ (8011eb4 <__assert_func+0x34>)
 8011e9e:	f000 fc89 	bl	80127b4 <fiprintf>
 8011ea2:	f000 fd2d 	bl	8012900 <abort>
 8011ea6:	4b04      	ldr	r3, [pc, #16]	@ (8011eb8 <__assert_func+0x38>)
 8011ea8:	e7f4      	b.n	8011e94 <__assert_func+0x14>
 8011eaa:	bf00      	nop
 8011eac:	20000038 	.word	0x20000038
 8011eb0:	0801557c 	.word	0x0801557c
 8011eb4:	0801554e 	.word	0x0801554e
 8011eb8:	08015541 	.word	0x08015541

08011ebc <_free_r>:
 8011ebc:	b538      	push	{r3, r4, r5, lr}
 8011ebe:	4605      	mov	r5, r0
 8011ec0:	2900      	cmp	r1, #0
 8011ec2:	d041      	beq.n	8011f48 <_free_r+0x8c>
 8011ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ec8:	1f0c      	subs	r4, r1, #4
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bfb8      	it	lt
 8011ece:	18e4      	addlt	r4, r4, r3
 8011ed0:	f000 f8e8 	bl	80120a4 <__malloc_lock>
 8011ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8011f4c <_free_r+0x90>)
 8011ed6:	6813      	ldr	r3, [r2, #0]
 8011ed8:	b933      	cbnz	r3, 8011ee8 <_free_r+0x2c>
 8011eda:	6063      	str	r3, [r4, #4]
 8011edc:	6014      	str	r4, [r2, #0]
 8011ede:	4628      	mov	r0, r5
 8011ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee4:	f000 b8e4 	b.w	80120b0 <__malloc_unlock>
 8011ee8:	42a3      	cmp	r3, r4
 8011eea:	d908      	bls.n	8011efe <_free_r+0x42>
 8011eec:	6820      	ldr	r0, [r4, #0]
 8011eee:	1821      	adds	r1, r4, r0
 8011ef0:	428b      	cmp	r3, r1
 8011ef2:	bf01      	itttt	eq
 8011ef4:	6819      	ldreq	r1, [r3, #0]
 8011ef6:	685b      	ldreq	r3, [r3, #4]
 8011ef8:	1809      	addeq	r1, r1, r0
 8011efa:	6021      	streq	r1, [r4, #0]
 8011efc:	e7ed      	b.n	8011eda <_free_r+0x1e>
 8011efe:	461a      	mov	r2, r3
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	b10b      	cbz	r3, 8011f08 <_free_r+0x4c>
 8011f04:	42a3      	cmp	r3, r4
 8011f06:	d9fa      	bls.n	8011efe <_free_r+0x42>
 8011f08:	6811      	ldr	r1, [r2, #0]
 8011f0a:	1850      	adds	r0, r2, r1
 8011f0c:	42a0      	cmp	r0, r4
 8011f0e:	d10b      	bne.n	8011f28 <_free_r+0x6c>
 8011f10:	6820      	ldr	r0, [r4, #0]
 8011f12:	4401      	add	r1, r0
 8011f14:	1850      	adds	r0, r2, r1
 8011f16:	4283      	cmp	r3, r0
 8011f18:	6011      	str	r1, [r2, #0]
 8011f1a:	d1e0      	bne.n	8011ede <_free_r+0x22>
 8011f1c:	6818      	ldr	r0, [r3, #0]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	6053      	str	r3, [r2, #4]
 8011f22:	4408      	add	r0, r1
 8011f24:	6010      	str	r0, [r2, #0]
 8011f26:	e7da      	b.n	8011ede <_free_r+0x22>
 8011f28:	d902      	bls.n	8011f30 <_free_r+0x74>
 8011f2a:	230c      	movs	r3, #12
 8011f2c:	602b      	str	r3, [r5, #0]
 8011f2e:	e7d6      	b.n	8011ede <_free_r+0x22>
 8011f30:	6820      	ldr	r0, [r4, #0]
 8011f32:	1821      	adds	r1, r4, r0
 8011f34:	428b      	cmp	r3, r1
 8011f36:	bf04      	itt	eq
 8011f38:	6819      	ldreq	r1, [r3, #0]
 8011f3a:	685b      	ldreq	r3, [r3, #4]
 8011f3c:	6063      	str	r3, [r4, #4]
 8011f3e:	bf04      	itt	eq
 8011f40:	1809      	addeq	r1, r1, r0
 8011f42:	6021      	streq	r1, [r4, #0]
 8011f44:	6054      	str	r4, [r2, #4]
 8011f46:	e7ca      	b.n	8011ede <_free_r+0x22>
 8011f48:	bd38      	pop	{r3, r4, r5, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20008b84 	.word	0x20008b84

08011f50 <malloc>:
 8011f50:	4b02      	ldr	r3, [pc, #8]	@ (8011f5c <malloc+0xc>)
 8011f52:	4601      	mov	r1, r0
 8011f54:	6818      	ldr	r0, [r3, #0]
 8011f56:	f000 b825 	b.w	8011fa4 <_malloc_r>
 8011f5a:	bf00      	nop
 8011f5c:	20000038 	.word	0x20000038

08011f60 <sbrk_aligned>:
 8011f60:	b570      	push	{r4, r5, r6, lr}
 8011f62:	4e0f      	ldr	r6, [pc, #60]	@ (8011fa0 <sbrk_aligned+0x40>)
 8011f64:	460c      	mov	r4, r1
 8011f66:	6831      	ldr	r1, [r6, #0]
 8011f68:	4605      	mov	r5, r0
 8011f6a:	b911      	cbnz	r1, 8011f72 <sbrk_aligned+0x12>
 8011f6c:	f000 fcb8 	bl	80128e0 <_sbrk_r>
 8011f70:	6030      	str	r0, [r6, #0]
 8011f72:	4621      	mov	r1, r4
 8011f74:	4628      	mov	r0, r5
 8011f76:	f000 fcb3 	bl	80128e0 <_sbrk_r>
 8011f7a:	1c43      	adds	r3, r0, #1
 8011f7c:	d103      	bne.n	8011f86 <sbrk_aligned+0x26>
 8011f7e:	f04f 34ff 	mov.w	r4, #4294967295
 8011f82:	4620      	mov	r0, r4
 8011f84:	bd70      	pop	{r4, r5, r6, pc}
 8011f86:	1cc4      	adds	r4, r0, #3
 8011f88:	f024 0403 	bic.w	r4, r4, #3
 8011f8c:	42a0      	cmp	r0, r4
 8011f8e:	d0f8      	beq.n	8011f82 <sbrk_aligned+0x22>
 8011f90:	1a21      	subs	r1, r4, r0
 8011f92:	4628      	mov	r0, r5
 8011f94:	f000 fca4 	bl	80128e0 <_sbrk_r>
 8011f98:	3001      	adds	r0, #1
 8011f9a:	d1f2      	bne.n	8011f82 <sbrk_aligned+0x22>
 8011f9c:	e7ef      	b.n	8011f7e <sbrk_aligned+0x1e>
 8011f9e:	bf00      	nop
 8011fa0:	20008b80 	.word	0x20008b80

08011fa4 <_malloc_r>:
 8011fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fa8:	1ccd      	adds	r5, r1, #3
 8011faa:	f025 0503 	bic.w	r5, r5, #3
 8011fae:	3508      	adds	r5, #8
 8011fb0:	2d0c      	cmp	r5, #12
 8011fb2:	bf38      	it	cc
 8011fb4:	250c      	movcc	r5, #12
 8011fb6:	2d00      	cmp	r5, #0
 8011fb8:	4606      	mov	r6, r0
 8011fba:	db01      	blt.n	8011fc0 <_malloc_r+0x1c>
 8011fbc:	42a9      	cmp	r1, r5
 8011fbe:	d904      	bls.n	8011fca <_malloc_r+0x26>
 8011fc0:	230c      	movs	r3, #12
 8011fc2:	6033      	str	r3, [r6, #0]
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80120a0 <_malloc_r+0xfc>
 8011fce:	f000 f869 	bl	80120a4 <__malloc_lock>
 8011fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8011fd6:	461c      	mov	r4, r3
 8011fd8:	bb44      	cbnz	r4, 801202c <_malloc_r+0x88>
 8011fda:	4629      	mov	r1, r5
 8011fdc:	4630      	mov	r0, r6
 8011fde:	f7ff ffbf 	bl	8011f60 <sbrk_aligned>
 8011fe2:	1c43      	adds	r3, r0, #1
 8011fe4:	4604      	mov	r4, r0
 8011fe6:	d158      	bne.n	801209a <_malloc_r+0xf6>
 8011fe8:	f8d8 4000 	ldr.w	r4, [r8]
 8011fec:	4627      	mov	r7, r4
 8011fee:	2f00      	cmp	r7, #0
 8011ff0:	d143      	bne.n	801207a <_malloc_r+0xd6>
 8011ff2:	2c00      	cmp	r4, #0
 8011ff4:	d04b      	beq.n	801208e <_malloc_r+0xea>
 8011ff6:	6823      	ldr	r3, [r4, #0]
 8011ff8:	4639      	mov	r1, r7
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	eb04 0903 	add.w	r9, r4, r3
 8012000:	f000 fc6e 	bl	80128e0 <_sbrk_r>
 8012004:	4581      	cmp	r9, r0
 8012006:	d142      	bne.n	801208e <_malloc_r+0xea>
 8012008:	6821      	ldr	r1, [r4, #0]
 801200a:	1a6d      	subs	r5, r5, r1
 801200c:	4629      	mov	r1, r5
 801200e:	4630      	mov	r0, r6
 8012010:	f7ff ffa6 	bl	8011f60 <sbrk_aligned>
 8012014:	3001      	adds	r0, #1
 8012016:	d03a      	beq.n	801208e <_malloc_r+0xea>
 8012018:	6823      	ldr	r3, [r4, #0]
 801201a:	442b      	add	r3, r5
 801201c:	6023      	str	r3, [r4, #0]
 801201e:	f8d8 3000 	ldr.w	r3, [r8]
 8012022:	685a      	ldr	r2, [r3, #4]
 8012024:	bb62      	cbnz	r2, 8012080 <_malloc_r+0xdc>
 8012026:	f8c8 7000 	str.w	r7, [r8]
 801202a:	e00f      	b.n	801204c <_malloc_r+0xa8>
 801202c:	6822      	ldr	r2, [r4, #0]
 801202e:	1b52      	subs	r2, r2, r5
 8012030:	d420      	bmi.n	8012074 <_malloc_r+0xd0>
 8012032:	2a0b      	cmp	r2, #11
 8012034:	d917      	bls.n	8012066 <_malloc_r+0xc2>
 8012036:	1961      	adds	r1, r4, r5
 8012038:	42a3      	cmp	r3, r4
 801203a:	6025      	str	r5, [r4, #0]
 801203c:	bf18      	it	ne
 801203e:	6059      	strne	r1, [r3, #4]
 8012040:	6863      	ldr	r3, [r4, #4]
 8012042:	bf08      	it	eq
 8012044:	f8c8 1000 	streq.w	r1, [r8]
 8012048:	5162      	str	r2, [r4, r5]
 801204a:	604b      	str	r3, [r1, #4]
 801204c:	4630      	mov	r0, r6
 801204e:	f000 f82f 	bl	80120b0 <__malloc_unlock>
 8012052:	f104 000b 	add.w	r0, r4, #11
 8012056:	1d23      	adds	r3, r4, #4
 8012058:	f020 0007 	bic.w	r0, r0, #7
 801205c:	1ac2      	subs	r2, r0, r3
 801205e:	bf1c      	itt	ne
 8012060:	1a1b      	subne	r3, r3, r0
 8012062:	50a3      	strne	r3, [r4, r2]
 8012064:	e7af      	b.n	8011fc6 <_malloc_r+0x22>
 8012066:	6862      	ldr	r2, [r4, #4]
 8012068:	42a3      	cmp	r3, r4
 801206a:	bf0c      	ite	eq
 801206c:	f8c8 2000 	streq.w	r2, [r8]
 8012070:	605a      	strne	r2, [r3, #4]
 8012072:	e7eb      	b.n	801204c <_malloc_r+0xa8>
 8012074:	4623      	mov	r3, r4
 8012076:	6864      	ldr	r4, [r4, #4]
 8012078:	e7ae      	b.n	8011fd8 <_malloc_r+0x34>
 801207a:	463c      	mov	r4, r7
 801207c:	687f      	ldr	r7, [r7, #4]
 801207e:	e7b6      	b.n	8011fee <_malloc_r+0x4a>
 8012080:	461a      	mov	r2, r3
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	42a3      	cmp	r3, r4
 8012086:	d1fb      	bne.n	8012080 <_malloc_r+0xdc>
 8012088:	2300      	movs	r3, #0
 801208a:	6053      	str	r3, [r2, #4]
 801208c:	e7de      	b.n	801204c <_malloc_r+0xa8>
 801208e:	230c      	movs	r3, #12
 8012090:	6033      	str	r3, [r6, #0]
 8012092:	4630      	mov	r0, r6
 8012094:	f000 f80c 	bl	80120b0 <__malloc_unlock>
 8012098:	e794      	b.n	8011fc4 <_malloc_r+0x20>
 801209a:	6005      	str	r5, [r0, #0]
 801209c:	e7d6      	b.n	801204c <_malloc_r+0xa8>
 801209e:	bf00      	nop
 80120a0:	20008b84 	.word	0x20008b84

080120a4 <__malloc_lock>:
 80120a4:	4801      	ldr	r0, [pc, #4]	@ (80120ac <__malloc_lock+0x8>)
 80120a6:	f7ff beda 	b.w	8011e5e <__retarget_lock_acquire_recursive>
 80120aa:	bf00      	nop
 80120ac:	20008b7c 	.word	0x20008b7c

080120b0 <__malloc_unlock>:
 80120b0:	4801      	ldr	r0, [pc, #4]	@ (80120b8 <__malloc_unlock+0x8>)
 80120b2:	f7ff bed5 	b.w	8011e60 <__retarget_lock_release_recursive>
 80120b6:	bf00      	nop
 80120b8:	20008b7c 	.word	0x20008b7c

080120bc <__sfputc_r>:
 80120bc:	6893      	ldr	r3, [r2, #8]
 80120be:	3b01      	subs	r3, #1
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	b410      	push	{r4}
 80120c4:	6093      	str	r3, [r2, #8]
 80120c6:	da08      	bge.n	80120da <__sfputc_r+0x1e>
 80120c8:	6994      	ldr	r4, [r2, #24]
 80120ca:	42a3      	cmp	r3, r4
 80120cc:	db01      	blt.n	80120d2 <__sfputc_r+0x16>
 80120ce:	290a      	cmp	r1, #10
 80120d0:	d103      	bne.n	80120da <__sfputc_r+0x1e>
 80120d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d6:	f7ff bdaa 	b.w	8011c2e <__swbuf_r>
 80120da:	6813      	ldr	r3, [r2, #0]
 80120dc:	1c58      	adds	r0, r3, #1
 80120de:	6010      	str	r0, [r2, #0]
 80120e0:	7019      	strb	r1, [r3, #0]
 80120e2:	4608      	mov	r0, r1
 80120e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120e8:	4770      	bx	lr

080120ea <__sfputs_r>:
 80120ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ec:	4606      	mov	r6, r0
 80120ee:	460f      	mov	r7, r1
 80120f0:	4614      	mov	r4, r2
 80120f2:	18d5      	adds	r5, r2, r3
 80120f4:	42ac      	cmp	r4, r5
 80120f6:	d101      	bne.n	80120fc <__sfputs_r+0x12>
 80120f8:	2000      	movs	r0, #0
 80120fa:	e007      	b.n	801210c <__sfputs_r+0x22>
 80120fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012100:	463a      	mov	r2, r7
 8012102:	4630      	mov	r0, r6
 8012104:	f7ff ffda 	bl	80120bc <__sfputc_r>
 8012108:	1c43      	adds	r3, r0, #1
 801210a:	d1f3      	bne.n	80120f4 <__sfputs_r+0xa>
 801210c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012110 <_vfiprintf_r>:
 8012110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012114:	460d      	mov	r5, r1
 8012116:	b09d      	sub	sp, #116	@ 0x74
 8012118:	4614      	mov	r4, r2
 801211a:	4698      	mov	r8, r3
 801211c:	4606      	mov	r6, r0
 801211e:	b118      	cbz	r0, 8012128 <_vfiprintf_r+0x18>
 8012120:	6a03      	ldr	r3, [r0, #32]
 8012122:	b90b      	cbnz	r3, 8012128 <_vfiprintf_r+0x18>
 8012124:	f7ff fc9a 	bl	8011a5c <__sinit>
 8012128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801212a:	07d9      	lsls	r1, r3, #31
 801212c:	d405      	bmi.n	801213a <_vfiprintf_r+0x2a>
 801212e:	89ab      	ldrh	r3, [r5, #12]
 8012130:	059a      	lsls	r2, r3, #22
 8012132:	d402      	bmi.n	801213a <_vfiprintf_r+0x2a>
 8012134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012136:	f7ff fe92 	bl	8011e5e <__retarget_lock_acquire_recursive>
 801213a:	89ab      	ldrh	r3, [r5, #12]
 801213c:	071b      	lsls	r3, r3, #28
 801213e:	d501      	bpl.n	8012144 <_vfiprintf_r+0x34>
 8012140:	692b      	ldr	r3, [r5, #16]
 8012142:	b99b      	cbnz	r3, 801216c <_vfiprintf_r+0x5c>
 8012144:	4629      	mov	r1, r5
 8012146:	4630      	mov	r0, r6
 8012148:	f7ff fdb0 	bl	8011cac <__swsetup_r>
 801214c:	b170      	cbz	r0, 801216c <_vfiprintf_r+0x5c>
 801214e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012150:	07dc      	lsls	r4, r3, #31
 8012152:	d504      	bpl.n	801215e <_vfiprintf_r+0x4e>
 8012154:	f04f 30ff 	mov.w	r0, #4294967295
 8012158:	b01d      	add	sp, #116	@ 0x74
 801215a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215e:	89ab      	ldrh	r3, [r5, #12]
 8012160:	0598      	lsls	r0, r3, #22
 8012162:	d4f7      	bmi.n	8012154 <_vfiprintf_r+0x44>
 8012164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012166:	f7ff fe7b 	bl	8011e60 <__retarget_lock_release_recursive>
 801216a:	e7f3      	b.n	8012154 <_vfiprintf_r+0x44>
 801216c:	2300      	movs	r3, #0
 801216e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012170:	2320      	movs	r3, #32
 8012172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012176:	f8cd 800c 	str.w	r8, [sp, #12]
 801217a:	2330      	movs	r3, #48	@ 0x30
 801217c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801232c <_vfiprintf_r+0x21c>
 8012180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012184:	f04f 0901 	mov.w	r9, #1
 8012188:	4623      	mov	r3, r4
 801218a:	469a      	mov	sl, r3
 801218c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012190:	b10a      	cbz	r2, 8012196 <_vfiprintf_r+0x86>
 8012192:	2a25      	cmp	r2, #37	@ 0x25
 8012194:	d1f9      	bne.n	801218a <_vfiprintf_r+0x7a>
 8012196:	ebba 0b04 	subs.w	fp, sl, r4
 801219a:	d00b      	beq.n	80121b4 <_vfiprintf_r+0xa4>
 801219c:	465b      	mov	r3, fp
 801219e:	4622      	mov	r2, r4
 80121a0:	4629      	mov	r1, r5
 80121a2:	4630      	mov	r0, r6
 80121a4:	f7ff ffa1 	bl	80120ea <__sfputs_r>
 80121a8:	3001      	adds	r0, #1
 80121aa:	f000 80a7 	beq.w	80122fc <_vfiprintf_r+0x1ec>
 80121ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121b0:	445a      	add	r2, fp
 80121b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80121b4:	f89a 3000 	ldrb.w	r3, [sl]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 809f 	beq.w	80122fc <_vfiprintf_r+0x1ec>
 80121be:	2300      	movs	r3, #0
 80121c0:	f04f 32ff 	mov.w	r2, #4294967295
 80121c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121c8:	f10a 0a01 	add.w	sl, sl, #1
 80121cc:	9304      	str	r3, [sp, #16]
 80121ce:	9307      	str	r3, [sp, #28]
 80121d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80121d6:	4654      	mov	r4, sl
 80121d8:	2205      	movs	r2, #5
 80121da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121de:	4853      	ldr	r0, [pc, #332]	@ (801232c <_vfiprintf_r+0x21c>)
 80121e0:	f7ee f806 	bl	80001f0 <memchr>
 80121e4:	9a04      	ldr	r2, [sp, #16]
 80121e6:	b9d8      	cbnz	r0, 8012220 <_vfiprintf_r+0x110>
 80121e8:	06d1      	lsls	r1, r2, #27
 80121ea:	bf44      	itt	mi
 80121ec:	2320      	movmi	r3, #32
 80121ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121f2:	0713      	lsls	r3, r2, #28
 80121f4:	bf44      	itt	mi
 80121f6:	232b      	movmi	r3, #43	@ 0x2b
 80121f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121fc:	f89a 3000 	ldrb.w	r3, [sl]
 8012200:	2b2a      	cmp	r3, #42	@ 0x2a
 8012202:	d015      	beq.n	8012230 <_vfiprintf_r+0x120>
 8012204:	9a07      	ldr	r2, [sp, #28]
 8012206:	4654      	mov	r4, sl
 8012208:	2000      	movs	r0, #0
 801220a:	f04f 0c0a 	mov.w	ip, #10
 801220e:	4621      	mov	r1, r4
 8012210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012214:	3b30      	subs	r3, #48	@ 0x30
 8012216:	2b09      	cmp	r3, #9
 8012218:	d94b      	bls.n	80122b2 <_vfiprintf_r+0x1a2>
 801221a:	b1b0      	cbz	r0, 801224a <_vfiprintf_r+0x13a>
 801221c:	9207      	str	r2, [sp, #28]
 801221e:	e014      	b.n	801224a <_vfiprintf_r+0x13a>
 8012220:	eba0 0308 	sub.w	r3, r0, r8
 8012224:	fa09 f303 	lsl.w	r3, r9, r3
 8012228:	4313      	orrs	r3, r2
 801222a:	9304      	str	r3, [sp, #16]
 801222c:	46a2      	mov	sl, r4
 801222e:	e7d2      	b.n	80121d6 <_vfiprintf_r+0xc6>
 8012230:	9b03      	ldr	r3, [sp, #12]
 8012232:	1d19      	adds	r1, r3, #4
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	9103      	str	r1, [sp, #12]
 8012238:	2b00      	cmp	r3, #0
 801223a:	bfbb      	ittet	lt
 801223c:	425b      	neglt	r3, r3
 801223e:	f042 0202 	orrlt.w	r2, r2, #2
 8012242:	9307      	strge	r3, [sp, #28]
 8012244:	9307      	strlt	r3, [sp, #28]
 8012246:	bfb8      	it	lt
 8012248:	9204      	strlt	r2, [sp, #16]
 801224a:	7823      	ldrb	r3, [r4, #0]
 801224c:	2b2e      	cmp	r3, #46	@ 0x2e
 801224e:	d10a      	bne.n	8012266 <_vfiprintf_r+0x156>
 8012250:	7863      	ldrb	r3, [r4, #1]
 8012252:	2b2a      	cmp	r3, #42	@ 0x2a
 8012254:	d132      	bne.n	80122bc <_vfiprintf_r+0x1ac>
 8012256:	9b03      	ldr	r3, [sp, #12]
 8012258:	1d1a      	adds	r2, r3, #4
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	9203      	str	r2, [sp, #12]
 801225e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012262:	3402      	adds	r4, #2
 8012264:	9305      	str	r3, [sp, #20]
 8012266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801233c <_vfiprintf_r+0x22c>
 801226a:	7821      	ldrb	r1, [r4, #0]
 801226c:	2203      	movs	r2, #3
 801226e:	4650      	mov	r0, sl
 8012270:	f7ed ffbe 	bl	80001f0 <memchr>
 8012274:	b138      	cbz	r0, 8012286 <_vfiprintf_r+0x176>
 8012276:	9b04      	ldr	r3, [sp, #16]
 8012278:	eba0 000a 	sub.w	r0, r0, sl
 801227c:	2240      	movs	r2, #64	@ 0x40
 801227e:	4082      	lsls	r2, r0
 8012280:	4313      	orrs	r3, r2
 8012282:	3401      	adds	r4, #1
 8012284:	9304      	str	r3, [sp, #16]
 8012286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228a:	4829      	ldr	r0, [pc, #164]	@ (8012330 <_vfiprintf_r+0x220>)
 801228c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012290:	2206      	movs	r2, #6
 8012292:	f7ed ffad 	bl	80001f0 <memchr>
 8012296:	2800      	cmp	r0, #0
 8012298:	d03f      	beq.n	801231a <_vfiprintf_r+0x20a>
 801229a:	4b26      	ldr	r3, [pc, #152]	@ (8012334 <_vfiprintf_r+0x224>)
 801229c:	bb1b      	cbnz	r3, 80122e6 <_vfiprintf_r+0x1d6>
 801229e:	9b03      	ldr	r3, [sp, #12]
 80122a0:	3307      	adds	r3, #7
 80122a2:	f023 0307 	bic.w	r3, r3, #7
 80122a6:	3308      	adds	r3, #8
 80122a8:	9303      	str	r3, [sp, #12]
 80122aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122ac:	443b      	add	r3, r7
 80122ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80122b0:	e76a      	b.n	8012188 <_vfiprintf_r+0x78>
 80122b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80122b6:	460c      	mov	r4, r1
 80122b8:	2001      	movs	r0, #1
 80122ba:	e7a8      	b.n	801220e <_vfiprintf_r+0xfe>
 80122bc:	2300      	movs	r3, #0
 80122be:	3401      	adds	r4, #1
 80122c0:	9305      	str	r3, [sp, #20]
 80122c2:	4619      	mov	r1, r3
 80122c4:	f04f 0c0a 	mov.w	ip, #10
 80122c8:	4620      	mov	r0, r4
 80122ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122ce:	3a30      	subs	r2, #48	@ 0x30
 80122d0:	2a09      	cmp	r2, #9
 80122d2:	d903      	bls.n	80122dc <_vfiprintf_r+0x1cc>
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d0c6      	beq.n	8012266 <_vfiprintf_r+0x156>
 80122d8:	9105      	str	r1, [sp, #20]
 80122da:	e7c4      	b.n	8012266 <_vfiprintf_r+0x156>
 80122dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80122e0:	4604      	mov	r4, r0
 80122e2:	2301      	movs	r3, #1
 80122e4:	e7f0      	b.n	80122c8 <_vfiprintf_r+0x1b8>
 80122e6:	ab03      	add	r3, sp, #12
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	462a      	mov	r2, r5
 80122ec:	4b12      	ldr	r3, [pc, #72]	@ (8012338 <_vfiprintf_r+0x228>)
 80122ee:	a904      	add	r1, sp, #16
 80122f0:	4630      	mov	r0, r6
 80122f2:	f3af 8000 	nop.w
 80122f6:	4607      	mov	r7, r0
 80122f8:	1c78      	adds	r0, r7, #1
 80122fa:	d1d6      	bne.n	80122aa <_vfiprintf_r+0x19a>
 80122fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122fe:	07d9      	lsls	r1, r3, #31
 8012300:	d405      	bmi.n	801230e <_vfiprintf_r+0x1fe>
 8012302:	89ab      	ldrh	r3, [r5, #12]
 8012304:	059a      	lsls	r2, r3, #22
 8012306:	d402      	bmi.n	801230e <_vfiprintf_r+0x1fe>
 8012308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801230a:	f7ff fda9 	bl	8011e60 <__retarget_lock_release_recursive>
 801230e:	89ab      	ldrh	r3, [r5, #12]
 8012310:	065b      	lsls	r3, r3, #25
 8012312:	f53f af1f 	bmi.w	8012154 <_vfiprintf_r+0x44>
 8012316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012318:	e71e      	b.n	8012158 <_vfiprintf_r+0x48>
 801231a:	ab03      	add	r3, sp, #12
 801231c:	9300      	str	r3, [sp, #0]
 801231e:	462a      	mov	r2, r5
 8012320:	4b05      	ldr	r3, [pc, #20]	@ (8012338 <_vfiprintf_r+0x228>)
 8012322:	a904      	add	r1, sp, #16
 8012324:	4630      	mov	r0, r6
 8012326:	f000 f879 	bl	801241c <_printf_i>
 801232a:	e7e4      	b.n	80122f6 <_vfiprintf_r+0x1e6>
 801232c:	0801557d 	.word	0x0801557d
 8012330:	08015587 	.word	0x08015587
 8012334:	00000000 	.word	0x00000000
 8012338:	080120eb 	.word	0x080120eb
 801233c:	08015583 	.word	0x08015583

08012340 <_printf_common>:
 8012340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012344:	4616      	mov	r6, r2
 8012346:	4698      	mov	r8, r3
 8012348:	688a      	ldr	r2, [r1, #8]
 801234a:	690b      	ldr	r3, [r1, #16]
 801234c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012350:	4293      	cmp	r3, r2
 8012352:	bfb8      	it	lt
 8012354:	4613      	movlt	r3, r2
 8012356:	6033      	str	r3, [r6, #0]
 8012358:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801235c:	4607      	mov	r7, r0
 801235e:	460c      	mov	r4, r1
 8012360:	b10a      	cbz	r2, 8012366 <_printf_common+0x26>
 8012362:	3301      	adds	r3, #1
 8012364:	6033      	str	r3, [r6, #0]
 8012366:	6823      	ldr	r3, [r4, #0]
 8012368:	0699      	lsls	r1, r3, #26
 801236a:	bf42      	ittt	mi
 801236c:	6833      	ldrmi	r3, [r6, #0]
 801236e:	3302      	addmi	r3, #2
 8012370:	6033      	strmi	r3, [r6, #0]
 8012372:	6825      	ldr	r5, [r4, #0]
 8012374:	f015 0506 	ands.w	r5, r5, #6
 8012378:	d106      	bne.n	8012388 <_printf_common+0x48>
 801237a:	f104 0a19 	add.w	sl, r4, #25
 801237e:	68e3      	ldr	r3, [r4, #12]
 8012380:	6832      	ldr	r2, [r6, #0]
 8012382:	1a9b      	subs	r3, r3, r2
 8012384:	42ab      	cmp	r3, r5
 8012386:	dc26      	bgt.n	80123d6 <_printf_common+0x96>
 8012388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801238c:	6822      	ldr	r2, [r4, #0]
 801238e:	3b00      	subs	r3, #0
 8012390:	bf18      	it	ne
 8012392:	2301      	movne	r3, #1
 8012394:	0692      	lsls	r2, r2, #26
 8012396:	d42b      	bmi.n	80123f0 <_printf_common+0xb0>
 8012398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801239c:	4641      	mov	r1, r8
 801239e:	4638      	mov	r0, r7
 80123a0:	47c8      	blx	r9
 80123a2:	3001      	adds	r0, #1
 80123a4:	d01e      	beq.n	80123e4 <_printf_common+0xa4>
 80123a6:	6823      	ldr	r3, [r4, #0]
 80123a8:	6922      	ldr	r2, [r4, #16]
 80123aa:	f003 0306 	and.w	r3, r3, #6
 80123ae:	2b04      	cmp	r3, #4
 80123b0:	bf02      	ittt	eq
 80123b2:	68e5      	ldreq	r5, [r4, #12]
 80123b4:	6833      	ldreq	r3, [r6, #0]
 80123b6:	1aed      	subeq	r5, r5, r3
 80123b8:	68a3      	ldr	r3, [r4, #8]
 80123ba:	bf0c      	ite	eq
 80123bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123c0:	2500      	movne	r5, #0
 80123c2:	4293      	cmp	r3, r2
 80123c4:	bfc4      	itt	gt
 80123c6:	1a9b      	subgt	r3, r3, r2
 80123c8:	18ed      	addgt	r5, r5, r3
 80123ca:	2600      	movs	r6, #0
 80123cc:	341a      	adds	r4, #26
 80123ce:	42b5      	cmp	r5, r6
 80123d0:	d11a      	bne.n	8012408 <_printf_common+0xc8>
 80123d2:	2000      	movs	r0, #0
 80123d4:	e008      	b.n	80123e8 <_printf_common+0xa8>
 80123d6:	2301      	movs	r3, #1
 80123d8:	4652      	mov	r2, sl
 80123da:	4641      	mov	r1, r8
 80123dc:	4638      	mov	r0, r7
 80123de:	47c8      	blx	r9
 80123e0:	3001      	adds	r0, #1
 80123e2:	d103      	bne.n	80123ec <_printf_common+0xac>
 80123e4:	f04f 30ff 	mov.w	r0, #4294967295
 80123e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ec:	3501      	adds	r5, #1
 80123ee:	e7c6      	b.n	801237e <_printf_common+0x3e>
 80123f0:	18e1      	adds	r1, r4, r3
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	2030      	movs	r0, #48	@ 0x30
 80123f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80123fa:	4422      	add	r2, r4
 80123fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012404:	3302      	adds	r3, #2
 8012406:	e7c7      	b.n	8012398 <_printf_common+0x58>
 8012408:	2301      	movs	r3, #1
 801240a:	4622      	mov	r2, r4
 801240c:	4641      	mov	r1, r8
 801240e:	4638      	mov	r0, r7
 8012410:	47c8      	blx	r9
 8012412:	3001      	adds	r0, #1
 8012414:	d0e6      	beq.n	80123e4 <_printf_common+0xa4>
 8012416:	3601      	adds	r6, #1
 8012418:	e7d9      	b.n	80123ce <_printf_common+0x8e>
	...

0801241c <_printf_i>:
 801241c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012420:	7e0f      	ldrb	r7, [r1, #24]
 8012422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012424:	2f78      	cmp	r7, #120	@ 0x78
 8012426:	4691      	mov	r9, r2
 8012428:	4680      	mov	r8, r0
 801242a:	460c      	mov	r4, r1
 801242c:	469a      	mov	sl, r3
 801242e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012432:	d807      	bhi.n	8012444 <_printf_i+0x28>
 8012434:	2f62      	cmp	r7, #98	@ 0x62
 8012436:	d80a      	bhi.n	801244e <_printf_i+0x32>
 8012438:	2f00      	cmp	r7, #0
 801243a:	f000 80d2 	beq.w	80125e2 <_printf_i+0x1c6>
 801243e:	2f58      	cmp	r7, #88	@ 0x58
 8012440:	f000 80b9 	beq.w	80125b6 <_printf_i+0x19a>
 8012444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801244c:	e03a      	b.n	80124c4 <_printf_i+0xa8>
 801244e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012452:	2b15      	cmp	r3, #21
 8012454:	d8f6      	bhi.n	8012444 <_printf_i+0x28>
 8012456:	a101      	add	r1, pc, #4	@ (adr r1, 801245c <_printf_i+0x40>)
 8012458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801245c:	080124b5 	.word	0x080124b5
 8012460:	080124c9 	.word	0x080124c9
 8012464:	08012445 	.word	0x08012445
 8012468:	08012445 	.word	0x08012445
 801246c:	08012445 	.word	0x08012445
 8012470:	08012445 	.word	0x08012445
 8012474:	080124c9 	.word	0x080124c9
 8012478:	08012445 	.word	0x08012445
 801247c:	08012445 	.word	0x08012445
 8012480:	08012445 	.word	0x08012445
 8012484:	08012445 	.word	0x08012445
 8012488:	080125c9 	.word	0x080125c9
 801248c:	080124f3 	.word	0x080124f3
 8012490:	08012583 	.word	0x08012583
 8012494:	08012445 	.word	0x08012445
 8012498:	08012445 	.word	0x08012445
 801249c:	080125eb 	.word	0x080125eb
 80124a0:	08012445 	.word	0x08012445
 80124a4:	080124f3 	.word	0x080124f3
 80124a8:	08012445 	.word	0x08012445
 80124ac:	08012445 	.word	0x08012445
 80124b0:	0801258b 	.word	0x0801258b
 80124b4:	6833      	ldr	r3, [r6, #0]
 80124b6:	1d1a      	adds	r2, r3, #4
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	6032      	str	r2, [r6, #0]
 80124bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80124c4:	2301      	movs	r3, #1
 80124c6:	e09d      	b.n	8012604 <_printf_i+0x1e8>
 80124c8:	6833      	ldr	r3, [r6, #0]
 80124ca:	6820      	ldr	r0, [r4, #0]
 80124cc:	1d19      	adds	r1, r3, #4
 80124ce:	6031      	str	r1, [r6, #0]
 80124d0:	0606      	lsls	r6, r0, #24
 80124d2:	d501      	bpl.n	80124d8 <_printf_i+0xbc>
 80124d4:	681d      	ldr	r5, [r3, #0]
 80124d6:	e003      	b.n	80124e0 <_printf_i+0xc4>
 80124d8:	0645      	lsls	r5, r0, #25
 80124da:	d5fb      	bpl.n	80124d4 <_printf_i+0xb8>
 80124dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80124e0:	2d00      	cmp	r5, #0
 80124e2:	da03      	bge.n	80124ec <_printf_i+0xd0>
 80124e4:	232d      	movs	r3, #45	@ 0x2d
 80124e6:	426d      	negs	r5, r5
 80124e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124ec:	4859      	ldr	r0, [pc, #356]	@ (8012654 <_printf_i+0x238>)
 80124ee:	230a      	movs	r3, #10
 80124f0:	e011      	b.n	8012516 <_printf_i+0xfa>
 80124f2:	6821      	ldr	r1, [r4, #0]
 80124f4:	6833      	ldr	r3, [r6, #0]
 80124f6:	0608      	lsls	r0, r1, #24
 80124f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80124fc:	d402      	bmi.n	8012504 <_printf_i+0xe8>
 80124fe:	0649      	lsls	r1, r1, #25
 8012500:	bf48      	it	mi
 8012502:	b2ad      	uxthmi	r5, r5
 8012504:	2f6f      	cmp	r7, #111	@ 0x6f
 8012506:	4853      	ldr	r0, [pc, #332]	@ (8012654 <_printf_i+0x238>)
 8012508:	6033      	str	r3, [r6, #0]
 801250a:	bf14      	ite	ne
 801250c:	230a      	movne	r3, #10
 801250e:	2308      	moveq	r3, #8
 8012510:	2100      	movs	r1, #0
 8012512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012516:	6866      	ldr	r6, [r4, #4]
 8012518:	60a6      	str	r6, [r4, #8]
 801251a:	2e00      	cmp	r6, #0
 801251c:	bfa2      	ittt	ge
 801251e:	6821      	ldrge	r1, [r4, #0]
 8012520:	f021 0104 	bicge.w	r1, r1, #4
 8012524:	6021      	strge	r1, [r4, #0]
 8012526:	b90d      	cbnz	r5, 801252c <_printf_i+0x110>
 8012528:	2e00      	cmp	r6, #0
 801252a:	d04b      	beq.n	80125c4 <_printf_i+0x1a8>
 801252c:	4616      	mov	r6, r2
 801252e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012532:	fb03 5711 	mls	r7, r3, r1, r5
 8012536:	5dc7      	ldrb	r7, [r0, r7]
 8012538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801253c:	462f      	mov	r7, r5
 801253e:	42bb      	cmp	r3, r7
 8012540:	460d      	mov	r5, r1
 8012542:	d9f4      	bls.n	801252e <_printf_i+0x112>
 8012544:	2b08      	cmp	r3, #8
 8012546:	d10b      	bne.n	8012560 <_printf_i+0x144>
 8012548:	6823      	ldr	r3, [r4, #0]
 801254a:	07df      	lsls	r7, r3, #31
 801254c:	d508      	bpl.n	8012560 <_printf_i+0x144>
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	6861      	ldr	r1, [r4, #4]
 8012552:	4299      	cmp	r1, r3
 8012554:	bfde      	ittt	le
 8012556:	2330      	movle	r3, #48	@ 0x30
 8012558:	f806 3c01 	strble.w	r3, [r6, #-1]
 801255c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012560:	1b92      	subs	r2, r2, r6
 8012562:	6122      	str	r2, [r4, #16]
 8012564:	f8cd a000 	str.w	sl, [sp]
 8012568:	464b      	mov	r3, r9
 801256a:	aa03      	add	r2, sp, #12
 801256c:	4621      	mov	r1, r4
 801256e:	4640      	mov	r0, r8
 8012570:	f7ff fee6 	bl	8012340 <_printf_common>
 8012574:	3001      	adds	r0, #1
 8012576:	d14a      	bne.n	801260e <_printf_i+0x1f2>
 8012578:	f04f 30ff 	mov.w	r0, #4294967295
 801257c:	b004      	add	sp, #16
 801257e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012582:	6823      	ldr	r3, [r4, #0]
 8012584:	f043 0320 	orr.w	r3, r3, #32
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	4833      	ldr	r0, [pc, #204]	@ (8012658 <_printf_i+0x23c>)
 801258c:	2778      	movs	r7, #120	@ 0x78
 801258e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012592:	6823      	ldr	r3, [r4, #0]
 8012594:	6831      	ldr	r1, [r6, #0]
 8012596:	061f      	lsls	r7, r3, #24
 8012598:	f851 5b04 	ldr.w	r5, [r1], #4
 801259c:	d402      	bmi.n	80125a4 <_printf_i+0x188>
 801259e:	065f      	lsls	r7, r3, #25
 80125a0:	bf48      	it	mi
 80125a2:	b2ad      	uxthmi	r5, r5
 80125a4:	6031      	str	r1, [r6, #0]
 80125a6:	07d9      	lsls	r1, r3, #31
 80125a8:	bf44      	itt	mi
 80125aa:	f043 0320 	orrmi.w	r3, r3, #32
 80125ae:	6023      	strmi	r3, [r4, #0]
 80125b0:	b11d      	cbz	r5, 80125ba <_printf_i+0x19e>
 80125b2:	2310      	movs	r3, #16
 80125b4:	e7ac      	b.n	8012510 <_printf_i+0xf4>
 80125b6:	4827      	ldr	r0, [pc, #156]	@ (8012654 <_printf_i+0x238>)
 80125b8:	e7e9      	b.n	801258e <_printf_i+0x172>
 80125ba:	6823      	ldr	r3, [r4, #0]
 80125bc:	f023 0320 	bic.w	r3, r3, #32
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	e7f6      	b.n	80125b2 <_printf_i+0x196>
 80125c4:	4616      	mov	r6, r2
 80125c6:	e7bd      	b.n	8012544 <_printf_i+0x128>
 80125c8:	6833      	ldr	r3, [r6, #0]
 80125ca:	6825      	ldr	r5, [r4, #0]
 80125cc:	6961      	ldr	r1, [r4, #20]
 80125ce:	1d18      	adds	r0, r3, #4
 80125d0:	6030      	str	r0, [r6, #0]
 80125d2:	062e      	lsls	r6, r5, #24
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	d501      	bpl.n	80125dc <_printf_i+0x1c0>
 80125d8:	6019      	str	r1, [r3, #0]
 80125da:	e002      	b.n	80125e2 <_printf_i+0x1c6>
 80125dc:	0668      	lsls	r0, r5, #25
 80125de:	d5fb      	bpl.n	80125d8 <_printf_i+0x1bc>
 80125e0:	8019      	strh	r1, [r3, #0]
 80125e2:	2300      	movs	r3, #0
 80125e4:	6123      	str	r3, [r4, #16]
 80125e6:	4616      	mov	r6, r2
 80125e8:	e7bc      	b.n	8012564 <_printf_i+0x148>
 80125ea:	6833      	ldr	r3, [r6, #0]
 80125ec:	1d1a      	adds	r2, r3, #4
 80125ee:	6032      	str	r2, [r6, #0]
 80125f0:	681e      	ldr	r6, [r3, #0]
 80125f2:	6862      	ldr	r2, [r4, #4]
 80125f4:	2100      	movs	r1, #0
 80125f6:	4630      	mov	r0, r6
 80125f8:	f7ed fdfa 	bl	80001f0 <memchr>
 80125fc:	b108      	cbz	r0, 8012602 <_printf_i+0x1e6>
 80125fe:	1b80      	subs	r0, r0, r6
 8012600:	6060      	str	r0, [r4, #4]
 8012602:	6863      	ldr	r3, [r4, #4]
 8012604:	6123      	str	r3, [r4, #16]
 8012606:	2300      	movs	r3, #0
 8012608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801260c:	e7aa      	b.n	8012564 <_printf_i+0x148>
 801260e:	6923      	ldr	r3, [r4, #16]
 8012610:	4632      	mov	r2, r6
 8012612:	4649      	mov	r1, r9
 8012614:	4640      	mov	r0, r8
 8012616:	47d0      	blx	sl
 8012618:	3001      	adds	r0, #1
 801261a:	d0ad      	beq.n	8012578 <_printf_i+0x15c>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	079b      	lsls	r3, r3, #30
 8012620:	d413      	bmi.n	801264a <_printf_i+0x22e>
 8012622:	68e0      	ldr	r0, [r4, #12]
 8012624:	9b03      	ldr	r3, [sp, #12]
 8012626:	4298      	cmp	r0, r3
 8012628:	bfb8      	it	lt
 801262a:	4618      	movlt	r0, r3
 801262c:	e7a6      	b.n	801257c <_printf_i+0x160>
 801262e:	2301      	movs	r3, #1
 8012630:	4632      	mov	r2, r6
 8012632:	4649      	mov	r1, r9
 8012634:	4640      	mov	r0, r8
 8012636:	47d0      	blx	sl
 8012638:	3001      	adds	r0, #1
 801263a:	d09d      	beq.n	8012578 <_printf_i+0x15c>
 801263c:	3501      	adds	r5, #1
 801263e:	68e3      	ldr	r3, [r4, #12]
 8012640:	9903      	ldr	r1, [sp, #12]
 8012642:	1a5b      	subs	r3, r3, r1
 8012644:	42ab      	cmp	r3, r5
 8012646:	dcf2      	bgt.n	801262e <_printf_i+0x212>
 8012648:	e7eb      	b.n	8012622 <_printf_i+0x206>
 801264a:	2500      	movs	r5, #0
 801264c:	f104 0619 	add.w	r6, r4, #25
 8012650:	e7f5      	b.n	801263e <_printf_i+0x222>
 8012652:	bf00      	nop
 8012654:	0801558e 	.word	0x0801558e
 8012658:	0801559f 	.word	0x0801559f

0801265c <__sflush_r>:
 801265c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	0716      	lsls	r6, r2, #28
 8012666:	4605      	mov	r5, r0
 8012668:	460c      	mov	r4, r1
 801266a:	d454      	bmi.n	8012716 <__sflush_r+0xba>
 801266c:	684b      	ldr	r3, [r1, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	dc02      	bgt.n	8012678 <__sflush_r+0x1c>
 8012672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012674:	2b00      	cmp	r3, #0
 8012676:	dd48      	ble.n	801270a <__sflush_r+0xae>
 8012678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801267a:	2e00      	cmp	r6, #0
 801267c:	d045      	beq.n	801270a <__sflush_r+0xae>
 801267e:	2300      	movs	r3, #0
 8012680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012684:	682f      	ldr	r7, [r5, #0]
 8012686:	6a21      	ldr	r1, [r4, #32]
 8012688:	602b      	str	r3, [r5, #0]
 801268a:	d030      	beq.n	80126ee <__sflush_r+0x92>
 801268c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801268e:	89a3      	ldrh	r3, [r4, #12]
 8012690:	0759      	lsls	r1, r3, #29
 8012692:	d505      	bpl.n	80126a0 <__sflush_r+0x44>
 8012694:	6863      	ldr	r3, [r4, #4]
 8012696:	1ad2      	subs	r2, r2, r3
 8012698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801269a:	b10b      	cbz	r3, 80126a0 <__sflush_r+0x44>
 801269c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801269e:	1ad2      	subs	r2, r2, r3
 80126a0:	2300      	movs	r3, #0
 80126a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80126a4:	6a21      	ldr	r1, [r4, #32]
 80126a6:	4628      	mov	r0, r5
 80126a8:	47b0      	blx	r6
 80126aa:	1c43      	adds	r3, r0, #1
 80126ac:	89a3      	ldrh	r3, [r4, #12]
 80126ae:	d106      	bne.n	80126be <__sflush_r+0x62>
 80126b0:	6829      	ldr	r1, [r5, #0]
 80126b2:	291d      	cmp	r1, #29
 80126b4:	d82b      	bhi.n	801270e <__sflush_r+0xb2>
 80126b6:	4a2a      	ldr	r2, [pc, #168]	@ (8012760 <__sflush_r+0x104>)
 80126b8:	410a      	asrs	r2, r1
 80126ba:	07d6      	lsls	r6, r2, #31
 80126bc:	d427      	bmi.n	801270e <__sflush_r+0xb2>
 80126be:	2200      	movs	r2, #0
 80126c0:	6062      	str	r2, [r4, #4]
 80126c2:	04d9      	lsls	r1, r3, #19
 80126c4:	6922      	ldr	r2, [r4, #16]
 80126c6:	6022      	str	r2, [r4, #0]
 80126c8:	d504      	bpl.n	80126d4 <__sflush_r+0x78>
 80126ca:	1c42      	adds	r2, r0, #1
 80126cc:	d101      	bne.n	80126d2 <__sflush_r+0x76>
 80126ce:	682b      	ldr	r3, [r5, #0]
 80126d0:	b903      	cbnz	r3, 80126d4 <__sflush_r+0x78>
 80126d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80126d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126d6:	602f      	str	r7, [r5, #0]
 80126d8:	b1b9      	cbz	r1, 801270a <__sflush_r+0xae>
 80126da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126de:	4299      	cmp	r1, r3
 80126e0:	d002      	beq.n	80126e8 <__sflush_r+0x8c>
 80126e2:	4628      	mov	r0, r5
 80126e4:	f7ff fbea 	bl	8011ebc <_free_r>
 80126e8:	2300      	movs	r3, #0
 80126ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80126ec:	e00d      	b.n	801270a <__sflush_r+0xae>
 80126ee:	2301      	movs	r3, #1
 80126f0:	4628      	mov	r0, r5
 80126f2:	47b0      	blx	r6
 80126f4:	4602      	mov	r2, r0
 80126f6:	1c50      	adds	r0, r2, #1
 80126f8:	d1c9      	bne.n	801268e <__sflush_r+0x32>
 80126fa:	682b      	ldr	r3, [r5, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d0c6      	beq.n	801268e <__sflush_r+0x32>
 8012700:	2b1d      	cmp	r3, #29
 8012702:	d001      	beq.n	8012708 <__sflush_r+0xac>
 8012704:	2b16      	cmp	r3, #22
 8012706:	d11e      	bne.n	8012746 <__sflush_r+0xea>
 8012708:	602f      	str	r7, [r5, #0]
 801270a:	2000      	movs	r0, #0
 801270c:	e022      	b.n	8012754 <__sflush_r+0xf8>
 801270e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012712:	b21b      	sxth	r3, r3
 8012714:	e01b      	b.n	801274e <__sflush_r+0xf2>
 8012716:	690f      	ldr	r7, [r1, #16]
 8012718:	2f00      	cmp	r7, #0
 801271a:	d0f6      	beq.n	801270a <__sflush_r+0xae>
 801271c:	0793      	lsls	r3, r2, #30
 801271e:	680e      	ldr	r6, [r1, #0]
 8012720:	bf08      	it	eq
 8012722:	694b      	ldreq	r3, [r1, #20]
 8012724:	600f      	str	r7, [r1, #0]
 8012726:	bf18      	it	ne
 8012728:	2300      	movne	r3, #0
 801272a:	eba6 0807 	sub.w	r8, r6, r7
 801272e:	608b      	str	r3, [r1, #8]
 8012730:	f1b8 0f00 	cmp.w	r8, #0
 8012734:	dde9      	ble.n	801270a <__sflush_r+0xae>
 8012736:	6a21      	ldr	r1, [r4, #32]
 8012738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801273a:	4643      	mov	r3, r8
 801273c:	463a      	mov	r2, r7
 801273e:	4628      	mov	r0, r5
 8012740:	47b0      	blx	r6
 8012742:	2800      	cmp	r0, #0
 8012744:	dc08      	bgt.n	8012758 <__sflush_r+0xfc>
 8012746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801274a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801274e:	81a3      	strh	r3, [r4, #12]
 8012750:	f04f 30ff 	mov.w	r0, #4294967295
 8012754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012758:	4407      	add	r7, r0
 801275a:	eba8 0800 	sub.w	r8, r8, r0
 801275e:	e7e7      	b.n	8012730 <__sflush_r+0xd4>
 8012760:	dfbffffe 	.word	0xdfbffffe

08012764 <_fflush_r>:
 8012764:	b538      	push	{r3, r4, r5, lr}
 8012766:	690b      	ldr	r3, [r1, #16]
 8012768:	4605      	mov	r5, r0
 801276a:	460c      	mov	r4, r1
 801276c:	b913      	cbnz	r3, 8012774 <_fflush_r+0x10>
 801276e:	2500      	movs	r5, #0
 8012770:	4628      	mov	r0, r5
 8012772:	bd38      	pop	{r3, r4, r5, pc}
 8012774:	b118      	cbz	r0, 801277e <_fflush_r+0x1a>
 8012776:	6a03      	ldr	r3, [r0, #32]
 8012778:	b90b      	cbnz	r3, 801277e <_fflush_r+0x1a>
 801277a:	f7ff f96f 	bl	8011a5c <__sinit>
 801277e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d0f3      	beq.n	801276e <_fflush_r+0xa>
 8012786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012788:	07d0      	lsls	r0, r2, #31
 801278a:	d404      	bmi.n	8012796 <_fflush_r+0x32>
 801278c:	0599      	lsls	r1, r3, #22
 801278e:	d402      	bmi.n	8012796 <_fflush_r+0x32>
 8012790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012792:	f7ff fb64 	bl	8011e5e <__retarget_lock_acquire_recursive>
 8012796:	4628      	mov	r0, r5
 8012798:	4621      	mov	r1, r4
 801279a:	f7ff ff5f 	bl	801265c <__sflush_r>
 801279e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127a0:	07da      	lsls	r2, r3, #31
 80127a2:	4605      	mov	r5, r0
 80127a4:	d4e4      	bmi.n	8012770 <_fflush_r+0xc>
 80127a6:	89a3      	ldrh	r3, [r4, #12]
 80127a8:	059b      	lsls	r3, r3, #22
 80127aa:	d4e1      	bmi.n	8012770 <_fflush_r+0xc>
 80127ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127ae:	f7ff fb57 	bl	8011e60 <__retarget_lock_release_recursive>
 80127b2:	e7dd      	b.n	8012770 <_fflush_r+0xc>

080127b4 <fiprintf>:
 80127b4:	b40e      	push	{r1, r2, r3}
 80127b6:	b503      	push	{r0, r1, lr}
 80127b8:	4601      	mov	r1, r0
 80127ba:	ab03      	add	r3, sp, #12
 80127bc:	4805      	ldr	r0, [pc, #20]	@ (80127d4 <fiprintf+0x20>)
 80127be:	f853 2b04 	ldr.w	r2, [r3], #4
 80127c2:	6800      	ldr	r0, [r0, #0]
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	f7ff fca3 	bl	8012110 <_vfiprintf_r>
 80127ca:	b002      	add	sp, #8
 80127cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80127d0:	b003      	add	sp, #12
 80127d2:	4770      	bx	lr
 80127d4:	20000038 	.word	0x20000038

080127d8 <__swhatbuf_r>:
 80127d8:	b570      	push	{r4, r5, r6, lr}
 80127da:	460c      	mov	r4, r1
 80127dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127e0:	2900      	cmp	r1, #0
 80127e2:	b096      	sub	sp, #88	@ 0x58
 80127e4:	4615      	mov	r5, r2
 80127e6:	461e      	mov	r6, r3
 80127e8:	da0d      	bge.n	8012806 <__swhatbuf_r+0x2e>
 80127ea:	89a3      	ldrh	r3, [r4, #12]
 80127ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80127f0:	f04f 0100 	mov.w	r1, #0
 80127f4:	bf14      	ite	ne
 80127f6:	2340      	movne	r3, #64	@ 0x40
 80127f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80127fc:	2000      	movs	r0, #0
 80127fe:	6031      	str	r1, [r6, #0]
 8012800:	602b      	str	r3, [r5, #0]
 8012802:	b016      	add	sp, #88	@ 0x58
 8012804:	bd70      	pop	{r4, r5, r6, pc}
 8012806:	466a      	mov	r2, sp
 8012808:	f000 f848 	bl	801289c <_fstat_r>
 801280c:	2800      	cmp	r0, #0
 801280e:	dbec      	blt.n	80127ea <__swhatbuf_r+0x12>
 8012810:	9901      	ldr	r1, [sp, #4]
 8012812:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012816:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801281a:	4259      	negs	r1, r3
 801281c:	4159      	adcs	r1, r3
 801281e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012822:	e7eb      	b.n	80127fc <__swhatbuf_r+0x24>

08012824 <__smakebuf_r>:
 8012824:	898b      	ldrh	r3, [r1, #12]
 8012826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012828:	079d      	lsls	r5, r3, #30
 801282a:	4606      	mov	r6, r0
 801282c:	460c      	mov	r4, r1
 801282e:	d507      	bpl.n	8012840 <__smakebuf_r+0x1c>
 8012830:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012834:	6023      	str	r3, [r4, #0]
 8012836:	6123      	str	r3, [r4, #16]
 8012838:	2301      	movs	r3, #1
 801283a:	6163      	str	r3, [r4, #20]
 801283c:	b003      	add	sp, #12
 801283e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012840:	ab01      	add	r3, sp, #4
 8012842:	466a      	mov	r2, sp
 8012844:	f7ff ffc8 	bl	80127d8 <__swhatbuf_r>
 8012848:	9f00      	ldr	r7, [sp, #0]
 801284a:	4605      	mov	r5, r0
 801284c:	4639      	mov	r1, r7
 801284e:	4630      	mov	r0, r6
 8012850:	f7ff fba8 	bl	8011fa4 <_malloc_r>
 8012854:	b948      	cbnz	r0, 801286a <__smakebuf_r+0x46>
 8012856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801285a:	059a      	lsls	r2, r3, #22
 801285c:	d4ee      	bmi.n	801283c <__smakebuf_r+0x18>
 801285e:	f023 0303 	bic.w	r3, r3, #3
 8012862:	f043 0302 	orr.w	r3, r3, #2
 8012866:	81a3      	strh	r3, [r4, #12]
 8012868:	e7e2      	b.n	8012830 <__smakebuf_r+0xc>
 801286a:	89a3      	ldrh	r3, [r4, #12]
 801286c:	6020      	str	r0, [r4, #0]
 801286e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012872:	81a3      	strh	r3, [r4, #12]
 8012874:	9b01      	ldr	r3, [sp, #4]
 8012876:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801287a:	b15b      	cbz	r3, 8012894 <__smakebuf_r+0x70>
 801287c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012880:	4630      	mov	r0, r6
 8012882:	f000 f81d 	bl	80128c0 <_isatty_r>
 8012886:	b128      	cbz	r0, 8012894 <__smakebuf_r+0x70>
 8012888:	89a3      	ldrh	r3, [r4, #12]
 801288a:	f023 0303 	bic.w	r3, r3, #3
 801288e:	f043 0301 	orr.w	r3, r3, #1
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	89a3      	ldrh	r3, [r4, #12]
 8012896:	431d      	orrs	r5, r3
 8012898:	81a5      	strh	r5, [r4, #12]
 801289a:	e7cf      	b.n	801283c <__smakebuf_r+0x18>

0801289c <_fstat_r>:
 801289c:	b538      	push	{r3, r4, r5, lr}
 801289e:	4d07      	ldr	r5, [pc, #28]	@ (80128bc <_fstat_r+0x20>)
 80128a0:	2300      	movs	r3, #0
 80128a2:	4604      	mov	r4, r0
 80128a4:	4608      	mov	r0, r1
 80128a6:	4611      	mov	r1, r2
 80128a8:	602b      	str	r3, [r5, #0]
 80128aa:	f7ee fff9 	bl	80018a0 <_fstat>
 80128ae:	1c43      	adds	r3, r0, #1
 80128b0:	d102      	bne.n	80128b8 <_fstat_r+0x1c>
 80128b2:	682b      	ldr	r3, [r5, #0]
 80128b4:	b103      	cbz	r3, 80128b8 <_fstat_r+0x1c>
 80128b6:	6023      	str	r3, [r4, #0]
 80128b8:	bd38      	pop	{r3, r4, r5, pc}
 80128ba:	bf00      	nop
 80128bc:	20008b78 	.word	0x20008b78

080128c0 <_isatty_r>:
 80128c0:	b538      	push	{r3, r4, r5, lr}
 80128c2:	4d06      	ldr	r5, [pc, #24]	@ (80128dc <_isatty_r+0x1c>)
 80128c4:	2300      	movs	r3, #0
 80128c6:	4604      	mov	r4, r0
 80128c8:	4608      	mov	r0, r1
 80128ca:	602b      	str	r3, [r5, #0]
 80128cc:	f7ee fff8 	bl	80018c0 <_isatty>
 80128d0:	1c43      	adds	r3, r0, #1
 80128d2:	d102      	bne.n	80128da <_isatty_r+0x1a>
 80128d4:	682b      	ldr	r3, [r5, #0]
 80128d6:	b103      	cbz	r3, 80128da <_isatty_r+0x1a>
 80128d8:	6023      	str	r3, [r4, #0]
 80128da:	bd38      	pop	{r3, r4, r5, pc}
 80128dc:	20008b78 	.word	0x20008b78

080128e0 <_sbrk_r>:
 80128e0:	b538      	push	{r3, r4, r5, lr}
 80128e2:	4d06      	ldr	r5, [pc, #24]	@ (80128fc <_sbrk_r+0x1c>)
 80128e4:	2300      	movs	r3, #0
 80128e6:	4604      	mov	r4, r0
 80128e8:	4608      	mov	r0, r1
 80128ea:	602b      	str	r3, [r5, #0]
 80128ec:	f7ef f800 	bl	80018f0 <_sbrk>
 80128f0:	1c43      	adds	r3, r0, #1
 80128f2:	d102      	bne.n	80128fa <_sbrk_r+0x1a>
 80128f4:	682b      	ldr	r3, [r5, #0]
 80128f6:	b103      	cbz	r3, 80128fa <_sbrk_r+0x1a>
 80128f8:	6023      	str	r3, [r4, #0]
 80128fa:	bd38      	pop	{r3, r4, r5, pc}
 80128fc:	20008b78 	.word	0x20008b78

08012900 <abort>:
 8012900:	b508      	push	{r3, lr}
 8012902:	2006      	movs	r0, #6
 8012904:	f000 f82c 	bl	8012960 <raise>
 8012908:	2001      	movs	r0, #1
 801290a:	f7ee ff79 	bl	8001800 <_exit>

0801290e <_raise_r>:
 801290e:	291f      	cmp	r1, #31
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	4605      	mov	r5, r0
 8012914:	460c      	mov	r4, r1
 8012916:	d904      	bls.n	8012922 <_raise_r+0x14>
 8012918:	2316      	movs	r3, #22
 801291a:	6003      	str	r3, [r0, #0]
 801291c:	f04f 30ff 	mov.w	r0, #4294967295
 8012920:	bd38      	pop	{r3, r4, r5, pc}
 8012922:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012924:	b112      	cbz	r2, 801292c <_raise_r+0x1e>
 8012926:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801292a:	b94b      	cbnz	r3, 8012940 <_raise_r+0x32>
 801292c:	4628      	mov	r0, r5
 801292e:	f000 f831 	bl	8012994 <_getpid_r>
 8012932:	4622      	mov	r2, r4
 8012934:	4601      	mov	r1, r0
 8012936:	4628      	mov	r0, r5
 8012938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801293c:	f000 b818 	b.w	8012970 <_kill_r>
 8012940:	2b01      	cmp	r3, #1
 8012942:	d00a      	beq.n	801295a <_raise_r+0x4c>
 8012944:	1c59      	adds	r1, r3, #1
 8012946:	d103      	bne.n	8012950 <_raise_r+0x42>
 8012948:	2316      	movs	r3, #22
 801294a:	6003      	str	r3, [r0, #0]
 801294c:	2001      	movs	r0, #1
 801294e:	e7e7      	b.n	8012920 <_raise_r+0x12>
 8012950:	2100      	movs	r1, #0
 8012952:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012956:	4620      	mov	r0, r4
 8012958:	4798      	blx	r3
 801295a:	2000      	movs	r0, #0
 801295c:	e7e0      	b.n	8012920 <_raise_r+0x12>
	...

08012960 <raise>:
 8012960:	4b02      	ldr	r3, [pc, #8]	@ (801296c <raise+0xc>)
 8012962:	4601      	mov	r1, r0
 8012964:	6818      	ldr	r0, [r3, #0]
 8012966:	f7ff bfd2 	b.w	801290e <_raise_r>
 801296a:	bf00      	nop
 801296c:	20000038 	.word	0x20000038

08012970 <_kill_r>:
 8012970:	b538      	push	{r3, r4, r5, lr}
 8012972:	4d07      	ldr	r5, [pc, #28]	@ (8012990 <_kill_r+0x20>)
 8012974:	2300      	movs	r3, #0
 8012976:	4604      	mov	r4, r0
 8012978:	4608      	mov	r0, r1
 801297a:	4611      	mov	r1, r2
 801297c:	602b      	str	r3, [r5, #0]
 801297e:	f7ee ff2d 	bl	80017dc <_kill>
 8012982:	1c43      	adds	r3, r0, #1
 8012984:	d102      	bne.n	801298c <_kill_r+0x1c>
 8012986:	682b      	ldr	r3, [r5, #0]
 8012988:	b103      	cbz	r3, 801298c <_kill_r+0x1c>
 801298a:	6023      	str	r3, [r4, #0]
 801298c:	bd38      	pop	{r3, r4, r5, pc}
 801298e:	bf00      	nop
 8012990:	20008b78 	.word	0x20008b78

08012994 <_getpid_r>:
 8012994:	f7ee bf1a 	b.w	80017cc <_getpid>

08012998 <_init>:
 8012998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801299a:	bf00      	nop
 801299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801299e:	bc08      	pop	{r3}
 80129a0:	469e      	mov	lr, r3
 80129a2:	4770      	bx	lr

080129a4 <_fini>:
 80129a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129a6:	bf00      	nop
 80129a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129aa:	bc08      	pop	{r3}
 80129ac:	469e      	mov	lr, r3
 80129ae:	4770      	bx	lr
